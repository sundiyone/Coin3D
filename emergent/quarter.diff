Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 51)
+++ CMakeLists.txt	(working copy)
@@ -1,76 +1,28 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.6) # Or does this work on 2.4? 2008-05-15, oyshole
-SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true) # Avoid unneccesary code
+CMAKE_MINIMUM_REQUIRED(VERSION 3.6)
 
-PROJECT(Quarter)
+PROJECT(Quarter LANGUAGES C CXX)
 SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/SIMCMakeMacros/")
 
-# This is a convenience macro for generating better tree structures in VS solutions.
-# Running this in any directory will affect all libraries/executables at that location.
-MACRO(SIM_VS_GENERATE_BASIC_TREE)
-  SOURCE_GROUP("Source" REGULAR_EXPRESSION \\.cpp)
-  SOURCE_GROUP("Headers" REGULAR_EXPRESSION \\.h)
+SET(CMAKE_C_COMPILER "/mingw64/bin/gcc")
+SET(CMAKE_CXX_COMPILER "/mingw64/bin/g++")
 
-  SOURCE_GROUP("Source\\Generated Moc files" REGULAR_EXPRESSION moc_*)
-  SOURCE_GROUP("Source\\Generated Qrc files" REGULAR_EXPRESSION [^\\.]qrc_*)
-  SOURCE_GROUP("Resources" REGULAR_EXPRESSION .*\\.qrc)
-
-  SOURCE_GROUP("Build" REGULAR_EXPRESSION \\.txt)
-  SOURCE_GROUP("Build\\Rules" REGULAR_EXPRESSION \\.rule)
-ENDMACRO()
-
 # Add an option to enable static builds
 OPTION(Quarter_BUILD_STATIC_LIBRARY "Build static library instead of shared library (DLL, so etc..)" OFF)
 OPTION(Quarter_BUILD_PLUGIN "Build Quarter plugin for QT Designer" OFF)
 OPTION(Quarter_BUILD_EXAMPLES "Build Quarter example applications" OFF)
 
-# Set up the different flavors of postfixes and CRTs for Windows environments
-#  Install configuration
-#
-# Quarter will be installed into the directory configured by CMAKE_INSTALL_PREFIX. This
-# defaults to /usr/local/ on UNIX and c:/Program Files/Quarter on Windows.
-#
-# On Windows, the namimg convention is as follows (ripped from the "Coin" way of doing stuff):
-# Dynamic Release: Quarter.dll and Quarter.lib
-# Dynamic Debug: Quarterd.dll and Quarterd.lib
-# Static Release: Quarters.lib
-# Static Debug: Quartersd.lib
-IF(WIN32)
-  IF(Quarter_BUILD_STATIC_LIBRARY)
-    SET(CMAKE_DEBUG_POSTFIX "sd")
-    SET(CMAKE_RELEASE_POSTFIX "s") #NB! Undocumented variable, could be deprecated
-        
-    #Don't use dynamic runtime in static builds.
-    STRING(REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
-    STRING(REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
-    STRING(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
-    STRING(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
-  ELSE()
-    SET(CMAKE_DEBUG_POSTFIX "d")
-  ENDIF()
-
-  # Enable single project multithread compilation for VS2008
-  IF(MSVC_VERSION EQUAL 1500)
-    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP4")
-  ENDIF()
-ENDIF()
-
 FIND_PACKAGE(OpenGL REQUIRED)
 FIND_PACKAGE(Coin REQUIRED) # FIXME: The results of this macro is not cached.
-SET(QT_USE_QTDESIGNER true)
-SET(QT_USE_QTTEST true)
 SET(QT_USE_QTOPENGL true)
 SET(QT_USE_QTUITOOLS true)
-FIND_PACKAGE(Qt4 REQUIRED)
-INCLUDE(${QT_USE_FILE})
-
-
-FIND_PACKAGE(Spacenav)
-IF (Spacenav_FOUND)
-INCLUDE_DIRECTORIES(${Spacenav_INCLUDE_DIR})
-ENDIF(Spacenav_FOUND)
-
-# FIXME: Is this really necessary? Shouldnt the link directories be sorted out by the package scripts.
-# 2008-05-15, oyshole
+FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Core 3DCore Gui Widgets)
+SET(CMAKE_AUTOMOC ON)
+SET(CMAKE_AUTOUIC ON)
+MESSAGE("Qt5Core_LIBRARIES    = ${Qt5Core_LIBRARIES}")
+MESSAGE("Qt53DCore_LIBRARIES  = ${Qt53DCore_LIBRARIES}")
+MESSAGE("Qt5Gui_LIBRARIES     = ${Qt5Gui_LIBRARIES}")
+MESSAGE("Qt5Widgets_LIBRARIES = ${Qt5Widgets_LIBRARIES}")
+SET(QT_INCLUDE_DIR ${Qt5Core_INCLUDES} ${Qt53DCore_INCLUDES} ${Qt5Gui_INCLUDES} ${Qt5Widgets_INCLUDES})
 LINK_DIRECTORIES(${QT_LIB_DIR} ${Coin_LIB_DIR} ${OPENGL_gl_DIRECTORY})
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include/)
 INCLUDE_DIRECTORIES(${QT_INCLUDE_DIR} ${Coin_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR})
@@ -78,17 +30,12 @@
 ADD_DEFINITIONS(${Coin_DEFINES})
 ADD_DEFINITIONS(${QT_DEFINITIONS})
 
-IF(MSVC)
-  MESSAGE(STATUS "MSVC Version: " ${MSVC_VERSION})
-  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
-ENDIF()
-
 # config.h
 SET(QUARTER_MAJOR_VERSION "1")
 SET(QUARTER_MINOR_VERSION "0")
 SET(QUARTER_MICRO_VERSION "1")
 CONFIGURE_FILE(config.h.cmake.in ${PROJECT_BINARY_DIR}/config.h)
-INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/)
+INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})
 
 # What to build
 ADD_SUBDIRECTORY(src)
@@ -98,24 +45,3 @@
         FILES_MATCHING PATTERN "*.h"
         PATTERN ".hg" EXCLUDE)
 
-# Experimental support for CPack.
-# Tested with NSIS on Windows Vista.
-# 2008-05-15
-
-# Packaging options
-SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Quarter")
-SET(CPACK_PACKAGE_VENDOR "Kongsberg SIM")
-SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/README")
-SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "Quarter")
-SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Quarter")
-#Add a registry variable for detecting the link type on Win32 systems.
-IF(Quarter_BUILD_STATIC_LIBRARY)
-  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "\ \ WriteRegStr\ SHCTX\ \\\"Software\\\\Kongsberg SIM\\\\Quarter\\\" \\\"Dynamic\\\" \\\"false\\\"")
-ELSE()
-  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "\ \ WriteRegStr\ SHCTX\ \\\"Software\\\\Kongsberg SIM\\\\Quarter\\\" \\\"Dynamic\\\" \\\"true\\\"")
-ENDIF()
-SET(CPACK_PACKAGE_VERSION_MAJOR "1")
-SET(CPACK_PACKAGE_VERSION_MINOR "0")
-SET(CPACK_PACKAGE_VERSION_PATCH "0")
-SET(CPACK_NSIS_MODIFY_PATH on)
-INCLUDE(CPack)
Index: README
===================================================================
--- README	(revision 51)
+++ README	(working copy)
@@ -18,7 +18,7 @@
 own experiences using Coin and Qt together in our applications.
 
 The functionality in Quarter revolves around QuarterWidget, a subclass
-of QGLWidget. This widget provides functionality for rendering of Coin
+of QOpenGLWidget. This widget provides functionality for rendering of Coin
 scenegraphs and translation of QEvents into SoEvents. Using this
 widget is as easy as using any other QWidget.
 
Index: SIMCMakeMacros/FindCoin.cmake
===================================================================
--- SIMCMakeMacros/FindCoin.cmake	(revision 51)
+++ SIMCMakeMacros/FindCoin.cmake	(working copy)
@@ -12,140 +12,190 @@
 
 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS True)
 
-IF(USE_SIM_FIND)
-  # FIXME: Experimental find mechanism. Should be tested on several platforms with several
-  # configurations and someone extended before becomming the one and only thing. 20081105 larsm
-  INCLUDE(SimFind)
-  SIM_FIND(Coin RELEASELIBNAMES Coin Coin3 Coin3s Coin4
-                  DEBUGLIBNAMES Coind Coin3d Coin4d
-                  INCLUDEFILE Inventor/SbLinear.h)
-ELSE(USE_SIM_FIND)
-  IF(NOT COINDIR)
-    SET(COINDIR $ENV{COINDIR})
-    IF(COINDIR)
-      MESSAGE(STATUS "Setting COINDIR to \"${COINDIR}\" from environment variable")
-    ENDIF(COINDIR)
-  ENDIF(NOT COINDIR)
-  
-  SET(COIN_NAMES Coin Coin3 Coin3s)
-  SET(COIN_NAMES_DEBUG Coind Coin3d)
-  
-  IF(APPLE)
-    # Coin installs as a framework named Inventor on MacOS
-    SET(COIN_NAMES ${COIN_NAMES} Inventor)
-  ENDIF(APPLE)
+# use coin-config
+find_program(Coin_CONFIG_EXECUTABLE NAMES coin-config DOC "coin-config executable")
+mark_as_advanced(Coin_CONFIG_EXECUTABLE)
+MESSAGE("coin-config = ${Coin_CONFIG_EXECUTABLE}")
 
-  IF(COINDIR)
-    # Look for Coin in environment variable COINDIR
-    FIND_LIBRARY(Coin_LIBRARY_RELEASE NAMES ${COIN_NAMES} PATHS ${COINDIR} PATH_SUFFIXES src bin lib . NO_DEFAULT_PATH)
-    FIND_LIBRARY(Coin_LIBRARY_DEBUG NAMES ${COIN_NAMES_DEBUG} PATHS ${COINDIR} PATH_SUFFIXES src bin lib . NO_DEFAULT_PATH)
+if(Coin_CONFIG_EXECUTABLE)
+  set(Coin_LIBRARY_FOUND 1)
 
-    IF(Coin_LIBRARY_RELEASE AND NOT Coin_LIBRARY_DEBUG)
-      SET(Coin_LIBRARY_DEBUG ${Coin_LIBRARY_RELEASE})
-      SET(Coin_LIBRARY       ${Coin_LIBRARY_RELEASE})
-      SET(Coin_LIBRARIES     ${Coin_LIBRARY_RELEASE})
-    ENDIF()
+  #execute_process(COMMAND ${Coin_CONFIG_EXECUTABLE} --cppflags OUTPUT_VARIABLE CoinConf_cppflags)
+  #string(REGEX REPLACE "[\r\n]" " " CoinConf_cppflags "${CoinConf_cppflags}")
 
-    IF(Coin_LIBRARY_DEBUG AND NOT Coin_LIBRARY_RELEASE)
-      SET(Coin_LIBRARY_RELEASE ${Coin_LIBRARY_DEBUG})
-      SET(Coin_LIBRARY       ${Coin_LIBRARY_DEBUG})
-      SET(Coin_LIBRARIES     ${Coin_LIBRARY_DEBUG})
-    ENDIF()
+  #execute_process(COMMAND ${Coin_CONFIG_EXECUTABLE} --includedir OUTPUT_VARIABLE CoinConf_includedir)
+  #MESSAGE("${CoinConf_includedir}")
+  #string(REGEX REPLACE "[\r\n]" " " CoinConf_includedir "${CoinConf_includedir}")
 
-    IF(Coin_LIBRARY_DEBUG AND Coin_LIBRARY_RELEASE)
-      IF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
-	#If the generator supports configuration types then set
-	#optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
-	SET(Coin_LIBRARY optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
-      ELSE()
-	#If there are no configuration types and CMAKE_BUILD_TYPE has no value
-	#then just use the release libraries
-	SET(Coin_LIBRARY ${Coin_LIBRARY_RELEASE})
-      ENDIF()
-      SET(Coin_LIBRARIES optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
-    ENDIF()
+  #execute_process(COMMAND ${Coin_CONFIG_EXECUTABLE} --ldflags OUTPUT_VARIABLE CoinConf_ldflags)
+  #MESSAGE("${CoinConf_ldflags}")
+  #string(REGEX REPLACE "[\r\n]" " " CoinConf_ldflags "${CoinConf_ldflags}")
 
-    SET(Coin_LIBRARY ${Coin_LIBRARY} CACHE FILEPATH "The Coin library")
-    MARK_AS_ADVANCED(Coin_LIBRARY_RELEASE Coin_LIBRARY_DEBUG)
+  #execute_process(COMMAND ${Coin_CONFIG_EXECUTABLE} --libs OUTPUT_VARIABLE CoinConf_libs)
+  #MESSAGE("${CoinConf_libs}")
+  #string(REGEX REPLACE "[\r\n]" " " CoinConf_libs "${CoinConf_libs}")
 
-    FIND_PATH(Coin_INCLUDE_DIR Inventor/SbLinear.h PATHS ${COINDIR} PATH_SUFFIXES include . NO_DEFAULT_PATH)
+  #string(REGEX MATCHALL "(^| )-l([./+-_\\a-zA-Z]*)" CoinConf_libs "${CoinConf_libs}")
+  #string(REGEX REPLACE "(^| )-l" "" CoinConf_libs "${CoinConf_libs}")
 
-    IF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
-      SET(Coin_FOUND TRUE)
-    ENDIF ()
+  #string(REGEX MATCHALL "(^| )-L([./+-_\\a-zA-Z]*)" CoinConf_ldirs "${CoinConf_ldflags}")
+  #string(REGEX REPLACE "(^| )-L" "" CoinConf_ldirs "${CoinConf_ldirs}")
 
-    IF (Coin_FOUND)
-      MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
-    ELSE (Coin_FOUND)
-      IF (Coin_FIND_REQUIRED)
-        MESSAGE(FATAL_ERROR "Could not find Coin in ${COINDIR} - try changing the COINDIR environment variable.")
-      ENDIF (Coin_FIND_REQUIRED)
-    ENDIF (Coin_FOUND)
+  #string(REGEX REPLACE "(^| )-l([./+-_\\a-zA-Z]*)" " " CoinConf_ldflags "${CoinConf_ldflags}")
+  #string(REGEX REPLACE "(^| )-L([./+-_\\a-zA-Z]*)" " " CoinConf_ldflags "${CoinConf_ldflags}")
 
-  ELSE(COINDIR)
-    # pkgconfig supported?
-    INCLUDE(FindPkgConfig)
+  #separate_arguments(CoinConf_includedir)
 
-    IF(PKG_CONFIG_FOUND)
-      IF (NOT Coin_FIND_QUIETLY)
-	MESSAGE(STATUS "Using pkg-config to locate Coin.")
-      ENDIF(NOT Coin_FIND_QUIETLY)
+  #set( Coin_CXXFLAGS "${CoinConf_cppflags}" )
+  #set( Coin_LINK_FLAGS "${CoinConf_ldflags}" )
+  #set( Coin_INCLUDE_DIRS "${CoinConf_includedir}")
+  #set( Coin_LINK_DIRS "${CoinConf_ldirs}")
+  set( Coin_CXXFLAGS "-I/mingw64/include -I/mingw64/include/Inventor/annex -DCOIN_NOT_DLL")
+  set( Coin_LINK_FLAGS "-L/mingw64/lib")
+  set( Coin_INCLUDE_DIRS "/mingw64/include")
+  set( Coin_LIBS "-lCoin -lopengl32 -lgdi32 -lwinmm -luser32 -lopengl32 -lgdi32 -lwinmm -luser32")
+  set( Coin_LIBRARY ${Coin_LINK_FLAGS} ${Coin_LIBS})
+  set( Coin_LIBRARY_RELEASE ${Coin_LIBRARY})
+  set( Coin_LIBRARY_DEBUG ${Coin_LIBRARY})
+  SET(Coin_LIBRARIES ${Coin_LIBRARY})
+  SET(Coin_DEFINES -DCOIN_NOT_DLL)
+  MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
+ELSE(Coin_CONFIG_EXECUTABLE)
+	IF(USE_SIM_FIND)
+	  # FIXME: Experimental find mechanism. Should be tested on several platforms with several
+	  # configurations and someone extended before becomming the one and only thing. 20081105 larsm
+	  INCLUDE(SimFind)
+	  SIM_FIND(Coin RELEASELIBNAMES Coin Coin3 Coin3s Coin4
+			  DEBUGLIBNAMES Coind Coin3d Coin4d
+			  INCLUDEFILE Inventor/SbLinear.h)
+	ELSE(USE_SIM_FIND)
+	  IF(NOT COINDIR)
+	    SET(COINDIR $ENV{COINDIR})
+	    IF(COINDIR)
+	      MESSAGE(STATUS "Setting COINDIR to \"${COINDIR}\" from environment variable")
+	    ENDIF(COINDIR)
+	  ENDIF(NOT COINDIR)
+	  
+	  SET(COIN_NAMES Coin Coin3 Coin3s)
+	  SET(COIN_NAMES_DEBUG Coind Coin3d)
+	  
+	  IF(APPLE)
+	    # Coin installs as a framework named Inventor on MacOS
+	    SET(COIN_NAMES ${COIN_NAMES} Inventor)
+	  ENDIF(APPLE)
 
-      pkg_search_module(Coin Coin)
-      IF(Coin_FOUND)
-	SET(Coin_LIBRARY ${Coin_LIBRARIES} ${Coin_LDFLAGS})
-	SET(Coin_INCLUDE_DIR ${Coin_INCLUDE_DIRS})
-        MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
-      ENDIF(Coin_FOUND)
-    ENDIF(PKG_CONFIG_FOUND)
+	  IF(COINDIR)
+	    # Look for Coin in environment variable COINDIR
+	    FIND_LIBRARY(Coin_LIBRARY_RELEASE NAMES ${COIN_NAMES} PATHS ${COINDIR} PATH_SUFFIXES src bin lib . NO_DEFAULT_PATH)
+	    FIND_LIBRARY(Coin_LIBRARY_DEBUG NAMES ${COIN_NAMES_DEBUG} PATHS ${COINDIR} PATH_SUFFIXES src bin lib . NO_DEFAULT_PATH)
 
-    # Automatic find, if pkg-config fails
-    IF(NOT Coin_FOUND)
-      FIND_PATH(Coin_INCLUDE_DIR Inventor/SbLinear.h)
+	    IF(Coin_LIBRARY_RELEASE AND NOT Coin_LIBRARY_DEBUG)
+	      SET(Coin_LIBRARY_DEBUG ${Coin_LIBRARY_RELEASE})
+	      SET(Coin_LIBRARY       ${Coin_LIBRARY_RELEASE})
+	      SET(Coin_LIBRARIES     ${Coin_LIBRARY_RELEASE})
+	    ENDIF()
 
-      FIND_LIBRARY(Coin_LIBRARY NAMES ${COIN_NAMES})
+	    IF(Coin_LIBRARY_DEBUG AND NOT Coin_LIBRARY_RELEASE)
+	      SET(Coin_LIBRARY_RELEASE ${Coin_LIBRARY_DEBUG})
+	      SET(Coin_LIBRARY       ${Coin_LIBRARY_DEBUG})
+	      SET(Coin_LIBRARIES     ${Coin_LIBRARY_DEBUG})
+	    ENDIF()
 
-      IF (APPLE)
-	FIND_LIBRARY(Ogl_LIBRARY OpenGL)
-	SET(Coin_LIBRARY ${Coin_LIBRARY} ${Ogl_LIBRARY})
-      ENDIF(APPLE)
-      IF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
-	SET(Coin_FOUND TRUE)
-      ENDIF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
-    ENDIF(NOT Coin_FOUND)
+	    IF(Coin_LIBRARY_DEBUG AND Coin_LIBRARY_RELEASE)
+	      IF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
+		#If the generator supports configuration types then set
+		#optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
+		SET(Coin_LIBRARY optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
+	      ELSE()
+		#If there are no configuration types and CMAKE_BUILD_TYPE has no value
+		#then just use the release libraries
+		SET(Coin_LIBRARY ${Coin_LIBRARY_RELEASE})
+	      ENDIF()
+	      SET(Coin_LIBRARIES optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
+	    ENDIF()
 
+	    SET(Coin_LIBRARY ${Coin_LIBRARY} CACHE FILEPATH "The Coin library")
+	    MARK_AS_ADVANCED(Coin_LIBRARY_RELEASE Coin_LIBRARY_DEBUG)
 
-    # Process stuff
-    IF (Coin_FOUND)
-      MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
-    ELSE (Coin_FOUND)
-      IF (Coin_FIND_REQUIRED)
-        MESSAGE(FATAL_ERROR "Could not find Coin. Try setting the COINDIR environment variable to the root of the Coin 3 installation directory.")
-      ENDIF (Coin_FIND_REQUIRED)
-    ENDIF (Coin_FOUND)
-  ENDIF(COINDIR)
+	    FIND_PATH(Coin_INCLUDE_DIR Inventor/SbLinear.h PATHS ${COINDIR} PATH_SUFFIXES include . NO_DEFAULT_PATH)
 
-  # Coin_DEFINES - only on WIN32
-  IF (Coin_FOUND AND WIN32)
-    FIND_FILE(Coin_pc NAMES Coin.pc PATHS ${Coin_INCLUDE_DIR}/../ PATH_SUFFIXES . lib/pkgconfig/ NO_DEFAULT_PATH)
-    MARK_AS_ADVANCED(Coin_pc)
-    IF(EXISTS ${Coin_pc})
-      FILE(READ ${Coin_pc} CoinPC)
-      IF (${CoinPC} MATCHES COIN_DLL)
-	MESSAGE(STATUS "Found Coin.pc with -DCOIN_DLL")
-	SET(Coin_DEFINES -DCOIN_DLL)
-      ELSE()
-	MESSAGE(STATUS "Found Coin.pc with -DCOIN_NOT_DLL")
-	SET(Coin_DEFINES -DCOIN_NOT_DLL)
-      ENDIF()
-    ELSE()
-      IF(COIN_NOT_DLL)
-	SET(Coin_DEFINES -DCOIN_NOT_DLL)
-      ELSEIF(NOT COIN_DLL)
-	SET(Coin_DEFINES -DCOIN_DLL)
-	MESSAGE(STATUS "WARNING: Could not find Coin.pc, using -DCOIN_DLL=1. Override or remove this warning using cmake -DCOIN_NOT_DLL=1 or cmake -DCOIN_DLL=1.")
-      ENDIF(COIN_NOT_DLL)
-    ENDIF()
-  ENDIF()
+	    IF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
+	      SET(Coin_FOUND TRUE)
+	    ENDIF ()
 
-ENDIF(USE_SIM_FIND)
+	    IF (Coin_FOUND)
+	      MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
+	    ELSE (Coin_FOUND)
+	      IF (Coin_FIND_REQUIRED)
+		MESSAGE(FATAL_ERROR "Could not find Coin in ${COINDIR} - try changing the COINDIR environment variable.")
+	      ENDIF (Coin_FIND_REQUIRED)
+	    ENDIF (Coin_FOUND)
+
+	  ELSE(COINDIR)
+	    # pkgconfig supported?
+	    INCLUDE(FindPkgConfig)
+
+	    IF(PKG_CONFIG_FOUND)
+	      IF (NOT Coin_FIND_QUIETLY)
+		MESSAGE(STATUS "Using pkg-config to locate Coin.")
+	      ENDIF(NOT Coin_FIND_QUIETLY)
+
+	      pkg_search_module(Coin Coin)
+	      IF(Coin_FOUND)
+		SET(Coin_LIBRARY ${Coin_LIBRARIES} ${Coin_LDFLAGS})
+		SET(Coin_INCLUDE_DIR ${Coin_INCLUDE_DIRS})
+		MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
+	      ENDIF(Coin_FOUND)
+	    ENDIF(PKG_CONFIG_FOUND)
+
+	    # Automatic find, if pkg-config fails
+	    IF(NOT Coin_FOUND)
+	      FIND_PATH(Coin_INCLUDE_DIR Inventor/SbLinear.h)
+
+	      FIND_LIBRARY(Coin_LIBRARY NAMES ${COIN_NAMES})
+
+	      IF (APPLE)
+		FIND_LIBRARY(Ogl_LIBRARY OpenGL)
+		SET(Coin_LIBRARY ${Coin_LIBRARY} ${Ogl_LIBRARY})
+	      ENDIF(APPLE)
+	      IF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
+		SET(Coin_FOUND TRUE)
+	      ENDIF (Coin_INCLUDE_DIR AND Coin_LIBRARY)
+	    ENDIF(NOT Coin_FOUND)
+
+
+	    # Process stuff
+	    IF (Coin_FOUND)
+	      MESSAGE(STATUS "Found Coin" "${Coin_LIBRARY}")
+	    ELSE (Coin_FOUND)
+	      IF (Coin_FIND_REQUIRED)
+		MESSAGE(FATAL_ERROR "Could not find Coin. Try setting the COINDIR environment variable to the root of the Coin 3 installation directory.")
+	      ENDIF (Coin_FIND_REQUIRED)
+	    ENDIF (Coin_FOUND)
+	  ENDIF(COINDIR)
+
+	  # Coin_DEFINES - only on WIN32
+	  IF (Coin_FOUND AND WIN32)
+	    FIND_FILE(Coin_pc NAMES Coin.pc PATHS ${Coin_INCLUDE_DIR}/../ PATH_SUFFIXES . lib/pkgconfig/ NO_DEFAULT_PATH)
+	    MARK_AS_ADVANCED(Coin_pc)
+	    IF(EXISTS ${Coin_pc})
+	      FILE(READ ${Coin_pc} CoinPC)
+	      IF (${CoinPC} MATCHES COIN_DLL)
+		MESSAGE(STATUS "Found Coin.pc with -DCOIN_DLL")
+		SET(Coin_DEFINES -DCOIN_DLL)
+	      ELSE()
+		MESSAGE(STATUS "Found Coin.pc with -DCOIN_NOT_DLL")
+		SET(Coin_DEFINES -DCOIN_NOT_DLL)
+	      ENDIF()
+	    ELSE()
+	      IF(COIN_NOT_DLL)
+		SET(Coin_DEFINES -DCOIN_NOT_DLL)
+	      ELSEIF(NOT COIN_DLL)
+		SET(Coin_DEFINES -DCOIN_DLL)
+		MESSAGE(STATUS "WARNING: Could not find Coin.pc, using -DCOIN_DLL=1. Override or remove this warning using cmake -DCOIN_NOT_DLL=1 or cmake -DCOIN_DLL=1.")
+	      ENDIF(COIN_NOT_DLL)
+	    ENDIF()
+	  ENDIF()
+
+	ENDIF(USE_SIM_FIND)
+ENDIF(Coin_CONFIG_EXECUTABLE)
Index: build/qmake/Quarter.pro
===================================================================
--- build/qmake/Quarter.pro	(revision 51)
+++ build/qmake/Quarter.pro	(working copy)
@@ -3,7 +3,7 @@
 
 CONFIG += dll
 VERSION = 1.0.0
-QT += opengl
+QT += widgets gui opengl
 
 include(coin.pro)
 
Index: build/qmake/QuarterWidgetPlugin.pro
===================================================================
--- build/qmake/QuarterWidgetPlugin.pro	(revision 51)
+++ build/qmake/QuarterWidgetPlugin.pro	(working copy)
@@ -3,7 +3,7 @@
 
 CONFIG += designer plugin debug_and_release
 VERSION = 0.1.0
-QT += opengl
+QT += widgets gui opengl
 
 include(coin.pro)
 
Index: include/Quarter/QuarterWidget.h
===================================================================
--- include/Quarter/QuarterWidget.h	(revision 51)
+++ include/Quarter/QuarterWidget.h	(working copy)
@@ -26,24 +26,11 @@
 #include <Inventor/SbBasic.h>
 #include <Inventor/SoRenderManager.h>
 #include <Inventor/actions/SoGLRenderAction.h>
-
-// for more recent versions of Qt, should use QOpenGLWidget instead of QGLWidget!
-#if (QT_VERSION >= 0x050600)
-#define QT_GL_WIDGET QOpenGLWidget
-#define QT_OPEN_GL_WIDGET
-#else
-#define QT_GL_WIDGET QGLWidget
-#endif
       
-#include <QColor>
-#include <QUrl>
-#ifdef QT_OPEN_GL_WIDGET
-#include <QOpenGLWidget>
-#else
-#include <QGLWidget>
-#endif
+#include <QtGui/QColor>
+#include <QtCore/QUrl>
+#include <QtWidgets/QOpenGLWidget>
 #include <Quarter/Basic.h>
-
 class QMenu;
 class SoNode;
 class SoEvent;
@@ -58,8 +45,8 @@
 class EventFilter;
 const char DEFAULT_NAVIGATIONFILE []  = "coin:///scxml/navigation/examiner.xml";
 
-class QUARTER_DLL_API QuarterWidget : public QT_GL_WIDGET {
-  typedef QT_GL_WIDGET inherited;
+class QUARTER_DLL_API QuarterWidget : public QOpenGLWidget {
+  typedef QOpenGLWidget inherited;
   Q_OBJECT
 
   Q_PROPERTY(QUrl navigationModeFile READ navigationModeFile WRITE setNavigationModeFile RESET resetNavigationModeFile)
@@ -83,11 +70,7 @@
 
 public:
   explicit QuarterWidget();
-  explicit QuarterWidget(QWidget * parent, const QT_GL_WIDGET * sharewidget = 0, Qt::WindowFlags f = 0);
-#ifndef QT_OPEN_GL_WIDGET  
-  explicit QuarterWidget(QGLContext * context, QWidget * parent = 0, const QT_GL_WIDGET * sharewidget = 0, Qt::WindowFlags f = 0);
-  explicit QuarterWidget(const QGLFormat & format, QWidget * parent = 0, const QT_GL_WIDGET * shareWidget = 0, Qt::WindowFlags f = 0);
-#endif  
+  explicit QuarterWidget(QWidget * parent, const QOpenGLWidget * sharewidget = 0, Qt::WindowFlags f = 0);
   
   virtual ~QuarterWidget();
 
@@ -202,7 +185,7 @@
   virtual bool updateDevicePixelRatio(void);
 
 private:
-  void constructor(const QT_GL_WIDGET * sharewidget);
+  void constructor(const QOpenGLWidget * sharewidget);
   friend class QuarterWidgetP;
   class QuarterWidgetP * pimpl;
 };
Index: src/Quarter/CMakeLists.txt
===================================================================
--- src/Quarter/CMakeLists.txt	(revision 51)
+++ src/Quarter/CMakeLists.txt	(working copy)
@@ -1,4 +1,3 @@
-INCLUDE(SimQtMacros)
 
 SET(Library Quarter)
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
@@ -17,19 +16,14 @@
 FILE(GLOB_RECURSE MocPrivateHeaders RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.h)
 FILE(GLOB_RECURSE MocPublicHeaders RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ../../include/Quarter/*.h)
 
-# Moc both the public and private headers
-SIM_QT4_AUTO_WRAP_CPP(MocPrivateSources ${MocPrivateHeaders})
-SIM_QT4_AUTO_WRAP_CPP(MocPublicSources ${MocPublicHeaders})
-
 # Some convenient variables. The inclusion of the headers in the source variable is to force CMake to include the headers in VS project generation.
 SET(AllSources ${Sources} ${MocPublicSources} ${MocPrivateSources} ${PublicHeaders} ${PrivateHeaders} ${CMakeCache})
 
-
 IF (Spacenav_FOUND)
   SET(Extra_libraries ${Spacenav_LIBRARIES} ${Spacenav_LIBRARY})
 ENDIF(Spacenav_FOUND)
 
-
+SET(QT_LIBRARIES ${Qt5Core_LIBRARIES} ${Qt53DCore_LIBRARIES} ${Qt5Gui_LIBRARIES} ${Qt5Widgets_LIBRARIES})
 SET(AllLibs ${Coin_LIBRARY} ${QT_LIBRARIES} ${OPENGL_LIBRARY} ${Extra_libraries})
 
 
Index: src/Quarter/ContextMenu.cpp
===================================================================
--- src/Quarter/ContextMenu.cpp	(revision 51)
+++ src/Quarter/ContextMenu.cpp	(working copy)
@@ -23,7 +23,7 @@
 
 #include "ContextMenu.h"
 
-#include <QMenu>
+#include <QtWidgets/QMenu>
 
 #include <Inventor/SoEventManager.h>
 #include <Inventor/scxml/SoScXMLStateMachine.h>
Index: src/Quarter/DragDropHandler.cpp
===================================================================
--- src/Quarter/DragDropHandler.cpp	(revision 51)
+++ src/Quarter/DragDropHandler.cpp	(working copy)
@@ -29,12 +29,12 @@
 
 #include <Quarter/eventhandlers/DragDropHandler.h>
 
-#include <QUrl>
-#include <QFileInfo>
-#include <QStringList>
-#include <QDragEnterEvent>
-#include <QDropEvent>
-#include <QMimeData>
+#include <QtCore/QUrl>
+#include <QtCore/QFileInfo>
+#include <QtCore/QStringList>
+#include <QtGui/QDragEnterEvent>
+#include <QtGui/QDropEvent>
+#include <QtCore/QMimeData>
 
 #include <Inventor/SoInput.h>
 #include <Inventor/nodes/SoSeparator.h>
@@ -145,12 +145,7 @@
   if (root == NULL) return;
 
   // set new scenegraph
-  this->quarterwidget->setSceneGraph(root);
-#ifdef QT_OPEN_GL_WIDGET  
   this->quarterwidget->update();
-#else
-  this->quarterwidget->updateGL();
-#endif  
 }
 
 #undef PRIVATE
Index: src/Quarter/EventFilter.cpp
===================================================================
--- src/Quarter/EventFilter.cpp	(revision 51)
+++ src/Quarter/EventFilter.cpp	(working copy)
@@ -26,10 +26,11 @@
 
 #include <Quarter/eventhandlers/EventFilter.h>
 
-#include <QEvent>
-#include <QMouseEvent>
+#include <QtCore/QEvent>
+//#include <Qt3DInput/QMouseEvent>
+#include <QtGui/QMouseEvent>
 #if (QT_VERSION >= 0x050000)
-#include <QGuiApplication>
+#include <QtGui/QGuiApplication>
 #endif
 
 #include <Inventor/SoEventManager.h>
Index: src/Quarter/ImageReader.cpp
===================================================================
--- src/Quarter/ImageReader.cpp	(revision 51)
+++ src/Quarter/ImageReader.cpp	(working copy)
@@ -23,7 +23,7 @@
 #include "ImageReader.h"
 #include <Inventor/SbImage.h>
 #include <Inventor/errors/SoDebugError.h>
-#include <QImage>
+#include <QtGui/QImage>
 
 #include <Quarter/QtCoinCompatibility.h>
 
Index: src/Quarter/InputDevice.cpp
===================================================================
--- src/Quarter/InputDevice.cpp	(revision 51)
+++ src/Quarter/InputDevice.cpp	(working copy)
@@ -21,7 +21,7 @@
 \**************************************************************************/
 
 #include <Quarter/devices/InputDevice.h>
-#include <QInputEvent>
+#include <QtGui/QInputEvent>
 #include <Inventor/events/SoEvents.h>
 #include <Quarter/QuarterWidget.h>
 
Index: src/Quarter/InteractionMode.cpp
===================================================================
--- src/Quarter/InteractionMode.cpp	(revision 51)
+++ src/Quarter/InteractionMode.cpp	(working copy)
@@ -1,7 +1,8 @@
 #include "InteractionMode.h"
-#include <QCoreApplication>
-#include <QKeyEvent>
-#include <QFocusEvent>
+#include <QtCore/QCoreApplication>
+//#include <Qt3DInput/QKeyEvent>
+#include <QtGui/QKeyEvent>
+#include <QtGui/QFocusEvent>
 #include <Quarter/QuarterWidget.h>
 
 /*
Index: src/Quarter/InteractionMode.h
===================================================================
--- src/Quarter/InteractionMode.h	(revision 51)
+++ src/Quarter/InteractionMode.h	(working copy)
@@ -23,8 +23,8 @@
  *
 \**************************************************************************/
 
-#include <QObject>
-#include <QCursor>
+#include <QtCore/QObject>
+#include <QtGui/QCursor>
 #include <Quarter/Basic.h>
 #include <Inventor/SoEventManager.h>
 
Index: src/Quarter/Keyboard.cpp
===================================================================
--- src/Quarter/Keyboard.cpp	(revision 51)
+++ src/Quarter/Keyboard.cpp	(working copy)
@@ -30,8 +30,8 @@
 
 #include <Quarter/devices/Keyboard.h>
 
-#include <QEvent>
-#include <QKeyEvent>
+#include <QtCore/QEvent>
+#include <QtGui/QKeyEvent>
 #include <Inventor/events/SoEvents.h>
 #include <Inventor/events/SoKeyboardEvent.h>
 
Index: src/Quarter/KeyboardP.h
===================================================================
--- src/Quarter/KeyboardP.h	(revision 51)
+++ src/Quarter/KeyboardP.h	(working copy)
@@ -23,7 +23,7 @@
  *
 \**************************************************************************/
 
-#include <QKeyEvent>
+#include <QtGui/QKeyEvent>
 #include <Inventor/events/SoKeyboardEvent.h>
 
 class SoEvent;
Index: src/Quarter/Mouse.cpp
===================================================================
--- src/Quarter/Mouse.cpp	(revision 51)
+++ src/Quarter/Mouse.cpp	(working copy)
@@ -29,13 +29,14 @@
 
 #include <Quarter/devices/Mouse.h>
 
-#include <QEvent>
-#include <QSize>
-#include <QWheelEvent>
+#include <QtCore/QEvent>
+#include <QtCore/QSize>
+//#include <Qt3DInput/QWheelEvent>
+#include <QtGui/QWheelEvent>
 #include <Quarter/QuarterWidget.h>
 
 #if (QT_VERSION >= 0x050000)
-#include <QGuiApplication>
+#include <QtGui/QGuiApplication>
 #endif
 
 #include <Inventor/SbVec2s.h>
Index: src/Quarter/QtCoinCompatibility.cpp
===================================================================
--- src/Quarter/QtCoinCompatibility.cpp	(revision 51)
+++ src/Quarter/QtCoinCompatibility.cpp	(working copy)
@@ -1,6 +1,6 @@
 #include <Quarter/QtCoinCompatibility.h>
 #include <Inventor/SbImage.h>
-#include <QImage>
+#include <QtGui/QImage>
 #include <Inventor/errors/SoDebugError.h>
 
 using namespace SIM::Coin3D::Quarter;
Index: src/Quarter/Quarter.cpp
===================================================================
--- src/Quarter/Quarter.cpp	(revision 51)
+++ src/Quarter/Quarter.cpp	(working copy)
@@ -33,7 +33,7 @@
   applications.
 
   The functionality in Quarter revolves around QuarterWidget, a
-  subclass of QGLWidget. This widget provides functionality for
+  subclass of QOpenGLWidget. This widget provides functionality for
   rendering of Coin scenegraphs and translation of QEvents into
   SoEvents. Using this widget is as easy as using any other QWidget.
 
Index: src/Quarter/QuarterP.h
===================================================================
--- src/Quarter/QuarterP.h	(revision 51)
+++ src/Quarter/QuarterP.h	(working copy)
@@ -1,7 +1,7 @@
 #ifndef QUARTER_QUARTERP_H
 #define QUARTER_QUARTERP_H
 #include <Inventor/SbName.h>
-#include <QCursor>
+#include <QtGui/QCursor>
 #include <config.h>
 
 template <class Key, class T> class QMap;
Index: src/Quarter/QuarterWidget.cpp
===================================================================
--- src/Quarter/QuarterWidget.cpp	(revision 51)
+++ src/Quarter/QuarterWidget.cpp	(working copy)
@@ -40,10 +40,13 @@
 
 #include <assert.h>
 
-#include <QEvent>
-#include <QDebug>
-#include <QFile>
-#include <QAction>
+#include <QtCore/QEvent>
+#include <QtCore/QDebug>
+#include <QtCore/QFile>
+//#include <Qt3DInput/QAction>
+#include <QtWidgets/QAction>
+#include <QtGui/QWindow>
+#include <QtGui/QGuiApplication>
 
 #include <Inventor/SbViewportRegion.h>
 #include <Inventor/system/gl.h>
@@ -72,10 +75,6 @@
 #include "QuarterWidgetP.h"
 #include "QuarterP.h"
 
-#ifdef QT_OPEN_GL_WIDGET
-#include <QWindow>
-#include <QGuiApplication>
-#endif
 
 using namespace SIM::Coin3D::Quarter;
 
@@ -115,43 +114,15 @@
 
 #define PRIVATE(obj) obj->pimpl
 
-#ifndef QT_OPEN_GL_WIDGET
-
 /*! constructor */
-QuarterWidget::QuarterWidget()
-: inherited()
-{
-}
-
-/*! constructor */
-QuarterWidget::QuarterWidget(const QGLFormat & format, QWidget * parent, const QT_GL_WIDGET * sharewidget, Qt::WindowFlags f)
-  : inherited(format, parent, sharewidget, f)
-{
-  this->constructor(sharewidget);
-}
-
-/*! constructor */
-QuarterWidget::QuarterWidget(QGLContext * context, QWidget * parent, const QT_GL_WIDGET * sharewidget, Qt::WindowFlags f)
-  : inherited(context, parent, sharewidget, f)
-{
-  this->constructor(sharewidget);
-}
-
-#endif  
-
-/*! constructor */
-QuarterWidget::QuarterWidget(QWidget * parent, const QT_GL_WIDGET * sharewidget, Qt::WindowFlags f)
-#ifdef QT_OPEN_GL_WIDGET  
+QuarterWidget::QuarterWidget(QWidget * parent, const QOpenGLWidget * sharewidget, Qt::WindowFlags f)
   : inherited(parent, f)
-#else
-  : inherited(parent, sharewidget, f)
-#endif  
 {
   this->constructor(sharewidget);
 }
 
 void
-QuarterWidget::constructor(const QT_GL_WIDGET * sharewidget)
+QuarterWidget::constructor(const QOpenGLWidget * sharewidget)
 {
   PRIVATE(this) = new QuarterWidgetP(this, sharewidget);
 
@@ -670,7 +641,7 @@
   This function will be called whenever the GLContext changes, 
   for instance when the widget is reparented. 
   
-  Overridden from QGLWidget to enable OpenGL depth buffer 
+  Overridden from QOpenGLWidget to enable OpenGL depth buffer 
   and reinitialize the SoRenderManager.
  */
 void
@@ -683,7 +654,6 @@
 
 bool
 QuarterWidget::updateDevicePixelRatio(void) {
-#ifdef QT_OPEN_GL_WIDGET
   qreal dev_pix_ratio = 1.0;
   QWidget* winwidg = window();
   QWindow* win = NULL;
@@ -701,22 +671,19 @@
     emit devicePixelRatioChanged(dev_pix_ratio);
     return true;
   }
-#endif
   return false;
 }
 
 /*!
-  Overridden from QGLWidget to resize the Coin scenegraph
+  Overridden from QOpenGLWidget to resize the Coin scenegraph
  */
 void
 QuarterWidget::resizeGL(int width, int height)
 {
-#ifdef QT_OPEN_GL_WIDGET
   updateDevicePixelRatio();
   qreal dev_pix_ratio = devicePixelRatio();
   width = (int)(dev_pix_ratio * width);
   height = (int)(dev_pix_ratio * height);
-#endif
 
   SbViewportRegion vp(width, height);
   PRIVATE(this)->sorendermanager->setViewportRegion(vp);
@@ -724,12 +691,11 @@
 }
 
 /*!
-  Overridden from QGLWidget to render the scenegraph
+  Overridden from QOpenGLWidget to render the scenegraph
 */
 void
 QuarterWidget::paintGL(void)
 {
-#ifdef QT_OPEN_GL_WIDGET
   if(updateDevicePixelRatio()) {
     qreal dev_pix_ratio = devicePixelRatio();
     int width = (int)(dev_pix_ratio * this->width());
@@ -738,7 +704,6 @@
     PRIVATE(this)->sorendermanager->setViewportRegion(vp);
     PRIVATE(this)->soeventmanager->setViewportRegion(vp);
   }
-#endif
 
   assert(this->isValid() && "No valid GL context found!");
   // We might have to process the delay queue here since we don't know
@@ -786,15 +751,11 @@
   // we're triggering the next paintGL(). Set a flag to remember this
   // to avoid that we process the delay queue in paintGL()
   PRIVATE(this)->processdelayqueue = false;
-#ifdef QT_OPEN_GL_WIDGET  
   this->update();
-#else
-  this->updateGL();
-#endif  
 }
 
 /*!
-  Overridden from QGLWidget to render the scenegraph
+  Overridden from QOpenGLWidget to render the scenegraph
  */
 void
 QuarterWidget::actualRedraw(void)
Index: src/Quarter/QuarterWidgetP.cpp
===================================================================
--- src/Quarter/QuarterWidgetP.cpp	(revision 51)
+++ src/Quarter/QuarterWidgetP.cpp	(working copy)
@@ -24,10 +24,10 @@
 #include <Quarter/QuarterWidget.h>
 #include <Quarter/eventhandlers/EventFilter.h>
 
-#include <QApplication>
-#include <QCursor>
-#include <QMenu>
-#include <QMap>
+#include <QtWidgets/QApplication>
+#include <QtGui/QCursor>
+#include <QtWidgets/QMenu>
+#include <QtCore/QMap>
 
 #include <Inventor/nodes/SoCamera.h>
 #include <Inventor/nodes/SoNode.h>
@@ -50,12 +50,12 @@
 class QuarterWidgetP_cachecontext {
 public:
   uint32_t id;
-  SbList <const QT_GL_WIDGET *> widgetlist;
+  SbList <const QOpenGLWidget *> widgetlist;
 };
 
 static SbList <QuarterWidgetP_cachecontext *> * cachecontext_list = NULL;
 
-QuarterWidgetP::QuarterWidgetP(QuarterWidget * masterptr, const QT_GL_WIDGET * sharewidget)
+QuarterWidgetP::QuarterWidgetP(QuarterWidget * masterptr, const QOpenGLWidget * sharewidget)
 : master(masterptr),
   scene(NULL),
   eventfilter(NULL),
@@ -118,7 +118,7 @@
 }
 
 QuarterWidgetP_cachecontext *
-QuarterWidgetP::findCacheContext(QuarterWidget * widget, const QT_GL_WIDGET * sharewidget)
+QuarterWidgetP::findCacheContext(QuarterWidget * widget, const QOpenGLWidget * sharewidget)
 {
   if (cachecontext_list == NULL) {
     // FIXME: static memory leak
@@ -129,7 +129,7 @@
 
     for (int j = 0; j < cachecontext->widgetlist.getLength(); j++) {
       if (cachecontext->widgetlist[j] == sharewidget) {
-        cachecontext->widgetlist.append((const QT_GL_WIDGET*) widget);
+        cachecontext->widgetlist.append((const QOpenGLWidget*) widget);
         return cachecontext;
       }
     }
@@ -136,7 +136,7 @@
   }
   QuarterWidgetP_cachecontext * cachecontext = new QuarterWidgetP_cachecontext;
   cachecontext->id = SoGLCacheContextElement::getUniqueCacheContext();
-  cachecontext->widgetlist.append((const QT_GL_WIDGET*) widget);
+  cachecontext->widgetlist.append((const QOpenGLWidget*) widget);
   cachecontext_list->append(cachecontext);
 
   return cachecontext;
@@ -143,9 +143,9 @@
 }
 
 void
-QuarterWidgetP::removeFromCacheContext(QuarterWidgetP_cachecontext * context, const QT_GL_WIDGET * widget)
+QuarterWidgetP::removeFromCacheContext(QuarterWidgetP_cachecontext * context, const QOpenGLWidget * widget)
 {
-  context->widgetlist.removeItem((const QT_GL_WIDGET*) widget);
+  context->widgetlist.removeItem((const QOpenGLWidget*) widget);
 
   if (context->widgetlist.getLength() == 0) { // last context in this share group?
     assert(cachecontext_list);
@@ -153,7 +153,7 @@
     for (int i = 0; i < cachecontext_list->getLength(); i++) {
       if ((*cachecontext_list)[i] == context) {
         // set the context while calling destructingContext() (might trigger OpenGL calls)
-        const_cast<QT_GL_WIDGET*> (widget)->makeCurrent();
+        const_cast<QOpenGLWidget*> (widget)->makeCurrent();
         // fetch the cc_glglue context instance as a workaround for a bug fixed in Coin r12818
 #if (QT_VERSION < 0x050600)
         (void) cc_glglue_instance(context->id);
@@ -160,7 +160,7 @@
 #endif        
         cachecontext_list->removeFast(i);
         SoContextHandler::destructingContext(context->id);
-        const_cast<QT_GL_WIDGET*> (widget)->doneCurrent();
+        const_cast<QOpenGLWidget*> (widget)->doneCurrent();
         delete context;
         return;
       }
Index: src/Quarter/QuarterWidgetP.h
===================================================================
--- src/Quarter/QuarterWidgetP.h	(revision 51)
+++ src/Quarter/QuarterWidgetP.h	(working copy)
@@ -25,17 +25,9 @@
 
 #include <Inventor/SbBasic.h>
 #include <Inventor/SbName.h>
-#include <QCursor>
-#include <QList>
-#include <QUrl>
-
-// for more recent versions of Qt, should use QOpenGLWidget instead of QGLWidget!
-#if (QT_VERSION >= 0x050600)
-#define QT_GL_WIDGET QOpenGLWidget
-#define QT_OPEN_GL_WIDGET
-#else
-#define QT_GL_WIDGET QGLWidget
-#endif
+#include <QtGui/QCursor>
+#include <QtCore/QList>
+#include <QtCore/QUrl>
       
 class SoNode;
 class SoCamera;
@@ -43,7 +35,7 @@
 class SoEventManager;
 class SoDirectionalLight;
 class QuarterWidgetP_cachecontext;
-class QT_GL_WIDGET;
+class QOpenGLWidget;
 class QAction;
 class QActionGroup;
 class QMenu;
@@ -60,7 +52,7 @@
 class QuarterWidgetP {
 public:
 
-  QuarterWidgetP(class QuarterWidget * master, const QT_GL_WIDGET * sharewidget);
+  QuarterWidgetP(class QuarterWidget * master, const QOpenGLWidget * sharewidget);
   ~QuarterWidgetP();
 
   SoCamera * searchForCamera(SoNode * root);
@@ -110,8 +102,8 @@
   static bool nativeEventFilter(void * message, long * result);
 
  private:
-  QuarterWidgetP_cachecontext * findCacheContext(QuarterWidget * widget, const QT_GL_WIDGET * sharewidget);
-  static void removeFromCacheContext(QuarterWidgetP_cachecontext * context, const QT_GL_WIDGET * widget);
+  QuarterWidgetP_cachecontext * findCacheContext(QuarterWidget * widget, const QOpenGLWidget * sharewidget);
+  static void removeFromCacheContext(QuarterWidgetP_cachecontext * context, const QOpenGLWidget * widget);
 };
 
 #endif // QUARTER_QUARTERWIDGETP_H
Index: src/Quarter/SpaceNavigatorDevice.cpp
===================================================================
--- src/Quarter/SpaceNavigatorDevice.cpp	(revision 51)
+++ src/Quarter/SpaceNavigatorDevice.cpp	(working copy)
@@ -23,9 +23,9 @@
 
 #include <Quarter/devices/SpaceNavigatorDevice.h>
 
-#include <QApplication>
-#include <QWidget>
-#include <QEvent>
+#include <QtWidgets/QApplication>
+#include <QtWidgets/QWidget>
+#include <QtCore/QEvent>
 
 #include <Inventor/events/SoEvent.h>
 #include <Inventor/events/SoMotion3Event.h>
Index: src/examples/CMakeLists.txt
===================================================================
--- src/examples/CMakeLists.txt	(revision 51)
+++ src/examples/CMakeLists.txt	(working copy)
@@ -1,7 +1,7 @@
 ADD_DEFINITIONS(-DQUARTER_DLL)
 
-#QT4_WRAP_UI(QuarterViewerUi "${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.ui")
-QT4_ADD_RESOURCES(QuarterViewerResources "${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.qrc")
+#QT5_WRAP_UI(QuarterViewerUi "${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.ui")
+QT5_ADD_RESOURCES(QuarterViewerResources "${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.qrc")
 ADD_CUSTOM_COMMAND(OUTPUT ui_QuarterViewer.h COMMAND uic       ARGS ${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.ui -o ${CMAKE_CURRENT_SOURCE_DIR}/ui_QuarterViewer.h DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/QuarterViewer.ui)
 
 #Minimal example
@@ -28,7 +28,7 @@
 TARGET_LINK_LIBRARIES(InheritUIExample Quarter)
 
 #Multiple document interface example
-SIM_QT4_AUTO_WRAP_CPP(MocSources "${CMAKE_CURRENT_SOURCE_DIR}/MdiMainWindow.h")
+SIM_QT5_AUTO_WRAP_CPP(MocSources "${CMAKE_CURRENT_SOURCE_DIR}/MdiMainWindow.h")
 ADD_EXECUTABLE(MDIExample "${CMAKE_CURRENT_SOURCE_DIR}/mdi.cpp"
   "${CMAKE_CURRENT_SOURCE_DIR}/MdiMainWindow.cpp"
   "${CMAKE_CURRENT_SOURCE_DIR}/MdiMainWindow.h"
Index: src/examples/MdiMainWindow.cpp
===================================================================
--- src/examples/MdiMainWindow.cpp	(revision 51)
+++ src/examples/MdiMainWindow.cpp	(working copy)
@@ -137,7 +137,7 @@
   this->mdiarea->addSubWindow(widget);
 
   if (this->firstwidget = 0) {
-    this->firstwidget = (QGLWidget *) widget->quarterWidget();
+    this->firstwidget = (QOpenGLWidget *) widget->quarterWidget();
   }
 
   return widget;
Index: src/examples/MdiMainWindow.h
===================================================================
--- src/examples/MdiMainWindow.h	(revision 51)
+++ src/examples/MdiMainWindow.h	(working copy)
@@ -27,7 +27,7 @@
 #include <QtGui/QMainWindow>
 
 class QString;
-class QGLWidget;
+class QOpenGLWidget;
 class QMdiArea;
 class QDropEvent;
 class QCloseEvent;
@@ -56,7 +56,7 @@
   MdiQuarterWidget * findMdiChild(const QString & filename);
 
   QMdiArea * mdiarea;
-  QGLWidget * firstwidget; // for context sharing
+  QOpenGLWidget * firstwidget; // for context sharing
 };
 
 #endif // QUARTER_MDI_MAINWINDOW_H
Index: src/examples/MdiQuarterWidget.cpp
===================================================================
--- src/examples/MdiQuarterWidget.cpp	(revision 51)
+++ src/examples/MdiQuarterWidget.cpp	(working copy)
@@ -30,7 +30,7 @@
 #include <Inventor/SoInput.h>
 #include <Inventor/nodes/SoSeparator.h>
 
-MdiQuarterWidget::MdiQuarterWidget(QWidget * parent, const QGLWidget * sharewidget)
+MdiQuarterWidget::MdiQuarterWidget(QWidget * parent, const QOpenGLWidget * sharewidget)
   : inherited(parent)
 {
   this->quarterwidget = new QuarterWidget(this, sharewidget);
Index: src/examples/MdiQuarterWidget.h
===================================================================
--- src/examples/MdiQuarterWidget.h	(revision 51)
+++ src/examples/MdiQuarterWidget.h	(working copy)
@@ -31,13 +31,13 @@
 }}}
 
 class QString;
-class QGLWidget;
+class QOpenGLWidget;
 using namespace SIM::Coin3D::Quarter;
 
 class MdiQuarterWidget : public QMdiSubWindow {
   typedef QMdiSubWindow inherited;
 public:
-  MdiQuarterWidget(QWidget * parent = 0, const QGLWidget * sharewidget = 0);
+  MdiQuarterWidget(QWidget * parent = 0, const QOpenGLWidget * sharewidget = 0);
   ~MdiQuarterWidget();
 
   bool loadFile(const QString & filename);
Index: src/plugins/CMakeLists.txt
===================================================================
--- src/plugins/CMakeLists.txt	(revision 51)
+++ src/plugins/CMakeLists.txt	(working copy)
@@ -7,8 +7,8 @@
 FILE(GLOB_RECURSE Headers RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.h)
 FILE(GLOB_RECURSE Resources RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.qrc)
 
-SIM_QT4_AUTO_WRAP_CPP(MocSources ${Headers})
-QT4_ADD_RESOURCES(ResourceSources ${Resources})
+SIM_QT5_AUTO_WRAP_CPP(MocSources ${Headers})
+QT5_ADD_RESOURCES(ResourceSources ${Resources})
 
 # Some convenient variables. The inclusion of the headers in the source variable is to force CMake to include the headers in VS project generation.
 SET(AllSources ${Sources} ${MocSources} ${ResourceSources} ${Headers})
Index: src/plugins/QuarterWidgetPlugin.cpp
===================================================================
--- src/plugins/QuarterWidgetPlugin.cpp	(revision 51)
+++ src/plugins/QuarterWidgetPlugin.cpp	(working copy)
@@ -48,7 +48,7 @@
   QuarterWidgetPluginP(void) {}
   bool initialized;
   bool manageactions;
-  QGLWidget * firstwidget; // for context sharing
+  QOpenGLWidget * firstwidget; // for context sharing
   QDesignerFormEditorInterface * formeditor;
   QList<QAction *> transparencytypeactions;
 };
