.TH "SoGLRenderCache" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoGLRenderCache \- The \fBSoGLRenderCache\fP class is used to cache OpenGL calls\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/caches/SoGLRenderCache\&.h>\fP
.PP
Inherits \fBSoCache\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoGLRenderCache\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual \fB~SoGLRenderCache\fP ()"
.br
.ti -1c
.RI "void \fBopen\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "void \fBclose\fP (void)"
.br
.ti -1c
.RI "void \fBcall\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "\fBint\fP \fBgetCacheContext\fP (void) const"
.br
.ti -1c
.RI "virtual SbBool \fBisValid\fP (const \fBSoState\fP *state) const"
.br
.ti -1c
.RI "virtual void \fBaddNestedCache\fP (\fBSoGLDisplayList\fP *child)"
.br
.ti -1c
.RI "\fBSoGLLazyElement::GLState\fP * \fBgetPreLazyState\fP (void)"
.br
.ti -1c
.RI "\fBSoGLLazyElement::GLState\fP * \fBgetPostLazyState\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdestroy\fP (\fBSoState\fP *state)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBSoGLRenderCache\fP class is used to cache OpenGL calls\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoGLRenderCache::SoGLRenderCache (\fBSoState\fP * state)"
Constructor with \fIstate\fP being the current state\&. 
.SS "SoGLRenderCache::~SoGLRenderCache ()\fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void SoGLRenderCache::open (\fBSoState\fP * state)"
Opens the cache\&. All GL calls will be cached until \fBclose()\fP is called\&.
.PP
\fBSee also:\fP
.RS 4
\fBclose()\fP 
.PP
\fBcall()\fP 
.RE
.PP

.SS "void SoGLRenderCache::close (void)"
Closes the cache\&. Should be called after all GL calls\&.
.PP
\fBSee also:\fP
.RS 4
\fBopen()\fP 
.RE
.PP

.SS "void SoGLRenderCache::call (\fBSoState\fP * state)"
Executes the cached display list\&.
.PP
\fBSee also:\fP
.RS 4
\fBopen()\fP 
.RE
.PP

.SS "\fBint\fP SoGLRenderCache::getCacheContext (void) const"
Returns the cache context of this cache\&. This is used to quickly determine if cache can be used for a state\&.
.PP
This method is an extension versus the Open Inventor API\&. 
.SS "SbBool SoGLRenderCache::isValid (const \fBSoState\fP * state) const\fC [virtual]\fP"
Return \fITRUE\fP if this cache is valid, \fIFALSE\fP otherwise\&. 
.PP
Reimplemented from \fBSoCache\fP\&.
.SS "void SoGLRenderCache::addNestedCache (\fBSoGLDisplayList\fP * child)\fC [virtual]\fP"
Adds a display list which is called from this cache\&. This is to make sure the child display list isn't destroyed too early\&. 
.SS "void SoGLRenderCache::destroy (\fBSoState\fP * state)\fC [protected]\fP, \fC [virtual]\fP"
Can be overridden by subclasses to clean up before they are deleted\&. Default method does nothing\&. 
.PP
Reimplemented from \fBSoCache\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
