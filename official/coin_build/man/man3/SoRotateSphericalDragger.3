.TH "SoRotateSphericalDragger" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoRotateSphericalDragger \- The \fBSoRotateSphericalDragger\fP class is for rotating geometry in any direction\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state:  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/draggers/SoRotateSphericalDragger\&.h>\fP
.PP
Inherits \fBSoDragger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoRotateSphericalDragger\fP (void)"
.br
.ti -1c
.RI "void \fBsetProjector\fP (\fBSbSphereProjector\fP *p)"
.br
.ti -1c
.RI "const \fBSbSphereProjector\fP * \fBgetProjector\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFRotation\fP \fBrotation\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoRotateSphericalDragger\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBsetUpConnections\fP (SbBool onoff, SbBool doitalways=FALSE)"
.br
.ti -1c
.RI "virtual void \fBcopyContents\fP (const \fBSoFieldContainer\fP *fromfc, SbBool copyconnections)"
.br
.ti -1c
.RI "void \fBdragStart\fP (void)"
.br
.ti -1c
.RI "void \fBdrag\fP (void)"
.br
.ti -1c
.RI "void \fBdragFinish\fP (void)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.ti -1c
.RI "static void \fBstartCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBmotionCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBdoneCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBfieldSensorCB\fP (void *f, \fBSoSensor\fP *s)"
.br
.ti -1c
.RI "static void \fBvalueChangedCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBfeedback\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBfeedbackActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBfeedbackSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBfieldSensor\fP"
.br
.ti -1c
.RI "\fBSbMatrix\fP \fBprevMotionMatrix\fP"
.br
.ti -1c
.RI "\fBSbVec3f\fP \fBprevWorldHitPt\fP"
.br
.ti -1c
.RI "\fBSbSphereProjector\fP * \fBsphereProj\fP"
.br
.ti -1c
.RI "SbBool \fBuserProj\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoRotateSphericalDragger\fP class is for rotating geometry in any direction\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state: 

 Screen Shot of Default Dragger
.PP
Use an instance of this dragger class in your scenegraph to let the end-users of your application rotate geometry freely in any direction\&.
.PP
For the initial dragger orientation and the dragger geometry positioning itself, use some kind of transformation node in your scenegraph, as usual\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoRotateSphericalDragger::SoRotateSphericalDragger (void)"
Default constructor, sets up the dragger nodekit catalog with the interaction and feedback geometry\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix):
.PP
.PP
.nf
CLASS SoRotateSphericalDragger
-->"this"
      "callbackList"
      "topSeparator"
         "motionMatrix"
         "geomSeparator"
-->         "rotatorSwitch"
-->            "rotator"
-->            "rotatorActive"
-->         "feedbackSwitch"
-->            "feedback"
-->            "feedbackActive"
.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoRotateSphericalDragger
PVT   "this",  SoRotateSphericalDragger  ---
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ]
PVT   "topSeparator",  SoSeparator  ---
PVT   "motionMatrix",  SoMatrixTransform  ---
PVT   "geomSeparator",  SoSeparator  ---
PVT   "rotatorSwitch",  SoSwitch  ---
      "rotator",  SoSeparator  ---
      "rotatorActive",  SoSeparator  ---
PVT   "feedbackSwitch",  SoSwitch  ---
      "feedback",  SoSeparator  ---
      "feedbackActive",  SoSeparator  ---
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SS "SoRotateSphericalDragger::~SoRotateSphericalDragger (void)\fC [protected]\fP, \fC [virtual]\fP"
Protected destructor\&.
.PP
(Dragger classes are derived from \fBSoBase\fP, so they are reference counted and automatically destroyed when their reference count goes to 0\&.) 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoRotateSphericalDragger::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoFieldData\fP * SoRotateSphericalDragger::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoRotateSphericalDragger::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "void SoRotateSphericalDragger::setProjector (\fBSbSphereProjector\fP * p)"
Replace the default sphere projection strategy\&. You may want to do this if you change the dragger geometry, for instance\&.
.PP
The default projection is an \fBSbSpherePlaneProjector\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbSphereSectionProjector\fP, \fBSbSphereSheetProjector\fP 
.RE
.PP

.SS "const \fBSbSphereProjector\fP * SoRotateSphericalDragger::getProjector (void) const"
Returns projector instance used for converting from user interaction dragger movements to 3D dragger re-orientation\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetProjector()\fP 
.RE
.PP

.SS "SbBool SoRotateSphericalDragger::setUpConnections (SbBool onoff, SbBool doitalways = \fCFALSE\fP)\fC [protected]\fP, \fC [virtual]\fP"
Sets up all internal connections for instances of this class\&.
.PP
(This method will usually not be of interest to the application programmer, unless you want to extend the library with new custom nodekits or dragger classes\&. If so, see the \fBSoBaseKit\fP class documentation\&.) 
.PP
Reimplemented from \fBSoInteractionKit\fP\&.
.SS "void SoRotateSphericalDragger::copyContents (const \fBSoFieldContainer\fP * from, SbBool copyconnections)\fC [protected]\fP, \fC [virtual]\fP"
Makes a deep copy of all data of \fIfrom\fP into this instance, \fIexcept\fP external scenegraph references if \fIcopyconnections\fP is \fCFALSE\fP\&.
.PP
This is the method that should be overridden by extension node / engine / dragger / whatever subclasses which needs to account for internal data that are not handled automatically\&.
.PP
For copying nodes from application code, you should not invoke this function directly, but rather call the \fBSoNode::copy()\fP function:
.PP
.PP
.nf
SoNode * mynewnode = templatenode->copy();
.fi
.PP
.PP
The same also goes for engines\&.
.PP
Make sure that when you override the \fBcopyContents()\fP method in your extension class that you also make it call upwards to it's parent superclass in the inheritance hierarchy, as \fBcopyContents()\fP in for instance \fBSoNode\fP and \fBSoFieldContainer\fP does important work\&. It should go something like this:
.PP
.PP
.nf
void
MyCoinExtensionNode::copyContents(const SoFieldContainer * from,
                                  SbBool copyconnections)
{
  // let parent superclasses do their thing (copy fields, copy
  // instance name, etc etc)
  SoNode::copyContents(from, copyconnections);

  // [\&.\&.then copy internal data\&.\&.]
}
.fi
.PP
 
.PP
Reimplemented from \fBSoInteractionKit\fP\&.
.SS "void SoRotateSphericalDragger::startCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoRotateSphericalDragger::motionCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoRotateSphericalDragger::doneCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoRotateSphericalDragger::fieldSensorCB (void * d, \fBSoSensor\fP * s)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoRotateSphericalDragger::valueChangedCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoRotateSphericalDragger::dragStart (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when dragger is selected (picked) by the user\&. 
.SS "void SoRotateSphericalDragger::drag (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when user drags the mouse after picking the dragger\&. 
.SS "void SoRotateSphericalDragger::dragFinish (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when mouse button is released after picking and interacting with the dragger\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFRotation\fP SoRotateSphericalDragger::rotation"
This field is continuously updated to contain the rotation of the current direction vector of the dragger\&.
.PP
The application programmer using this dragger in his scenegraph should connect the relevant node fields in the scene to this field to make them follow the dragger orientation\&. 
.SS "\fBSoFieldSensor\fP * SoRotateSphericalDragger::fieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSbMatrix\fP SoRotateSphericalDragger::prevMotionMatrix\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSbVec3f\fP SoRotateSphericalDragger::prevWorldHitPt\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSbSphereProjector\fP * SoRotateSphericalDragger::sphereProj\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "SbBool SoRotateSphericalDragger::userProj\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
