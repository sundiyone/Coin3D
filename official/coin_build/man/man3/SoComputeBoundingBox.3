.TH "SoComputeBoundingBox" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoComputeBoundingBox \- The \fBSoComputeBoundingBox\fP class is used to calculate a bounding box\&.
.PP
This engine is simply a wrapper around the \fBSoGetBoundingBoxAction\fP, for a convenient way of having automatic updating of some data in the scene graph which is dependent on the bounding box of some other part of the scene\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/engines/SoComputeBoundingBox\&.h>\fP
.PP
Inherits \fBSoEngine\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual const \fBSoEngineOutputData\fP * \fBgetOutputData\fP (void) const"
.br
.ti -1c
.RI "\fBSoComputeBoundingBox\fP (void)"
.br
.ti -1c
.RI "void \fBsetViewportRegion\fP (const \fBSbViewportRegion\fP &vpr)"
.br
.ti -1c
.RI "const \fBSbViewportRegion\fP & \fBgetViewportRegion\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBnode\fP"
.br
.ti -1c
.RI "\fBSoSFPath\fP \fBpath\fP"
.br
.ti -1c
.RI "\fBSoEngineOutput\fP \fBmin\fP"
.br
.ti -1c
.RI "\fBSoEngineOutput\fP \fBmax\fP"
.br
.ti -1c
.RI "\fBSoEngineOutput\fP \fBboxCenter\fP"
.br
.ti -1c
.RI "\fBSoEngineOutput\fP \fBobjectCenter\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoComputeBoundingBox\fP (void)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetInputDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoEngineOutputData\fP ** \fBgetOutputDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoComputeBoundingBox\fP class is used to calculate a bounding box\&.
.PP
This engine is simply a wrapper around the \fBSoGetBoundingBoxAction\fP, for a convenient way of having automatic updating of some data in the scene graph which is dependent on the bounding box of some other part of the scene\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoComputeBoundingBox::SoComputeBoundingBox (void)"
Default constructor\&. Sets up the internal \fBSoGetBoundingBoxAction\fP instance\&. 
.SS "SoComputeBoundingBox::~SoComputeBoundingBox (void)\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. Deallocate the \fBSoGetBoundingBoxAction\fP instance\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoComputeBoundingBox::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoComputeBoundingBox::getFieldData (void) const\fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "const \fBSoEngineOutputData\fP * SoComputeBoundingBox::getOutputData (void) const\fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.PP
Implements \fBSoEngine\fP\&.
.SS "void SoComputeBoundingBox::setViewportRegion (const \fBSbViewportRegion\fP & vpr)"
Set viewport region for the \fBSoGetBoundingBoxAction\fP instance we're using for calculating bounding boxes\&.
.PP
The default setting is to use an \fBSbViewportRegion\fP with only default values\&. 
.SS "const \fBSbViewportRegion\fP & SoComputeBoundingBox::getViewportRegion (void) const"
Returns viewport region used by the internal \fBSoGetBoundingBoxAction\fP instance\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFNode\fP SoComputeBoundingBox::node"
If this input field is set and \fBSoComputeBoundingBox::path\fP is \fCNULL\fP, the resultant bounding box will be the box encompassing the scene graph rooted at this node pointer\&. 
.SS "\fBSoSFPath\fP SoComputeBoundingBox::path"
If this input field is not \fCNULL\fP, the bounding box values of the given path will be set on the outputs\&. 
.SS "\fBSoEngineOutput\fP SoComputeBoundingBox::min"
(\fBSoSFVec3f\fP) Corner coordinates of the bounding box\&. 
.SS "\fBSoEngineOutput\fP SoComputeBoundingBox::max"
(\fBSoSFVec3f\fP) Corner coordinates of the bounding box\&. 
.SS "\fBSoEngineOutput\fP SoComputeBoundingBox::boxCenter"
(\fBSoSFVec3f\fP) Geometric center point of the bounding box\&. 
.SS "\fBSoEngineOutput\fP SoComputeBoundingBox::objectCenter"
(\fBSoSFVec3f\fP) Object center point for the bounding box\&. See \fBSoGetBoundingBoxAction::getCenter()\fP for an explanation for how this can differ from the geometric center point of the bounding box\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
