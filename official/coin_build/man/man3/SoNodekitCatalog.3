.TH "SoNodekitCatalog" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoNodekitCatalog \- The \fBSoNodekitCatalog\fP class is a container for nodekit layouts\&.
.PP
Nodekits store all their hierarchical layout information and part information in instances of this class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodekits/SoNodekitCatalog\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "\fB~SoNodekitCatalog\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBgetNumEntries\fP (void) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetPartNumber\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetName\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetType\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetType\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetDefaultType\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetDefaultType\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "SbBool \fBisNullByDefault\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "SbBool \fBisNullByDefault\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "SbBool \fBisLeaf\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "SbBool \fBisLeaf\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetParentName\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetParentName\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetParentPartNumber\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetParentPartNumber\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetRightSiblingName\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetRightSiblingName\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetRightSiblingPartNumber\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetRightSiblingPartNumber\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "SbBool \fBisList\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "SbBool \fBisList\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetListContainerType\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "\fBSoType\fP \fBgetListContainerType\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "const \fBSoTypeList\fP & \fBgetListItemTypes\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "const \fBSoTypeList\fP & \fBgetListItemTypes\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "SbBool \fBisPublic\fP (\fBint\fP part) const"
.br
.ti -1c
.RI "SbBool \fBisPublic\fP (const \fBSbName\fP &name) const"
.br
.ti -1c
.RI "\fBSoNodekitCatalog\fP * \fBclone\fP (\fBSoType\fP type) const"
.br
.ti -1c
.RI "SbBool \fBaddEntry\fP (const \fBSbName\fP &name, \fBSoType\fP type, \fBSoType\fP defaulttype, SbBool isdefaultnull, const \fBSbName\fP &parent, const \fBSbName\fP &rightsibling, SbBool islist, \fBSoType\fP listcontainertype, \fBSoType\fP listitemtype, SbBool ispublic)"
.br
.ti -1c
.RI "void \fBaddListItemType\fP (\fBint\fP part, \fBSoType\fP type)"
.br
.ti -1c
.RI "void \fBaddListItemType\fP (const \fBSbName\fP &name, \fBSoType\fP type)"
.br
.ti -1c
.RI "void \fBnarrowTypes\fP (const \fBSbName\fP &name, \fBSoType\fP newtype, \fBSoType\fP newdefaulttype)"
.br
.ti -1c
.RI "void \fBsetNullByDefault\fP (const \fBSbName\fP &name, SbBool nullbydefault)"
.br
.ti -1c
.RI "SbBool \fBrecursiveSearch\fP (\fBint\fP part, const \fBSbName\fP &name, \fBSoTypeList\fP *checked) const"
.br
.ti -1c
.RI "void \fBprintCheck\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBSoNodekitCatalog\fP class is a container for nodekit layouts\&.
.PP
Nodekits store all their hierarchical layout information and part information in instances of this class\&. 


.PP
\fBSee also:\fP
.RS 4
\fBSoNodeKit\fP, \fBSoBaseKit\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoNodekitCatalog::SoNodekitCatalog (void)"
Constructor\&. 
.SS "SoNodekitCatalog::~SoNodekitCatalog ()"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void SoNodekitCatalog::initClass (void)\fC [static]\fP"
Initialization of static variables\&. 
.SS "\fBint\fP SoNodekitCatalog::getNumEntries (void) const"
Returns total number of entries in the catalog\&. 
.SS "\fBint\fP SoNodekitCatalog::getPartNumber (const \fBSbName\fP & name) const"
Returns part number in catalog with \fIname\fP\&. If no part exists with \fIname\fP, returns \fCSO_CATALOG_NAME_NOT_FOUND\fP\&. 
.SS "const \fBSbName\fP & SoNodekitCatalog::getName (\fBint\fP part) const"
Given the \fIpart\fP number, return name of that part\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getType (\fBint\fP part) const"
Given the \fIpart\fP number, return type\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getType (const \fBSbName\fP & name) const"
Given the part \fIname\fP, return type\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getDefaultType (\fBint\fP part) const"
Given \fIpart\fP number, return default type of part\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getDefaultType (const \fBSbName\fP & name) const"
Given part \fIname\fP, return default type of part\&. 
.SS "SbBool SoNodekitCatalog::isNullByDefault (\fBint\fP part) const"
Returns \fCTRUE\fP if the \fIpart\fP is empty by default, otherwise \fCFALSE\fP\&. 
.SS "SbBool SoNodekitCatalog::isNullByDefault (const \fBSbName\fP & name) const"
Returns \fCTRUE\fP if part \fIname\fP is empty by default, otherwise \fCFALSE\fP\&. 
.SS "SbBool SoNodekitCatalog::isLeaf (\fBint\fP part) const"
Returns \fCTRUE\fP if the \fIpart\fP is \fInot\fP a parent for any other parts in the nodekit catalog\&. 
.SS "SbBool SoNodekitCatalog::isLeaf (const \fBSbName\fP & name) const"
Returns \fCTRUE\fP if the part \fIname\fP is \fInot\fP a parent for any other parts in the nodekit catalog\&. 
.SS "const \fBSbName\fP & SoNodekitCatalog::getParentName (\fBint\fP part) const"
Returns name of parent of \fIpart\fP\&. If \fIpart\fP doesn't have a parent, the empty string is returned\&. 
.SS "const \fBSbName\fP & SoNodekitCatalog::getParentName (const \fBSbName\fP & name) const"
Returns name of parent of the part\&. If \fIname\fP doesn't have a parent, the empty string is returned\&. 
.SS "\fBint\fP SoNodekitCatalog::getParentPartNumber (\fBint\fP part) const"
Returns part number of given part's parent\&. If \fIpart\fP doesn't have a parent, SO_CATALOG_NAME_NOT_FOUND is returned\&. 
.SS "\fBint\fP SoNodekitCatalog::getParentPartNumber (const \fBSbName\fP & name) const"
Returns part number of given part's parent\&. If \fIname\fP doesn't have a parent, SO_CATALOG_NAME_NOT_FOUND is returned\&. 
.SS "const \fBSbName\fP & SoNodekitCatalog::getRightSiblingName (\fBint\fP part) const"
Returns name of right sibling of \fIpart\fP\&. Returns the empty string if \fIpart\fP doesn't have a right sibling\&. 
.SS "const \fBSbName\fP & SoNodekitCatalog::getRightSiblingName (const \fBSbName\fP & name) const"
Returns name of sibling of the part\&. Returns the empty string if \fIname\fP doesn't have a right sibling\&. 
.SS "\fBint\fP SoNodekitCatalog::getRightSiblingPartNumber (\fBint\fP part) const"
Returns part number of given part's sibling\&. Returns SO_CATALOG_NAME_NOT_FOUND if \fIpart\fP doesn't have a right sibling\&. 
.SS "\fBint\fP SoNodekitCatalog::getRightSiblingPartNumber (const \fBSbName\fP & name) const"
Returns part number of given part's right sibling\&. Returns SO_CATALOG_NAME_NOT_FOUND if part doesn't have a right sibling\&. 
.SS "SbBool SoNodekitCatalog::isList (\fBint\fP part) const"
Returns \fCTRUE\fP if the given \fIpart\fP is a list container\&. 
.SS "SbBool SoNodekitCatalog::isList (const \fBSbName\fP & name) const"
Returns \fCTRUE\fP if the given part is a list container\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getListContainerType (\fBint\fP part) const"
Returns type of list container (\fBSoGroup\fP, \fBSoSeparator\fP, \fBSoSwitch\fP, etc) which \fIpart\fP is\&. 
.SS "\fBSoType\fP SoNodekitCatalog::getListContainerType (const \fBSbName\fP & name) const"
Returns type of list container (\fBSoGroup\fP, \fBSoSeparator\fP, \fBSoSwitch\fP, etc) which the named part is\&. 
.SS "const \fBSoTypeList\fP & SoNodekitCatalog::getListItemTypes (\fBint\fP part) const"
Returns list of node types which are allowed to be children of the list container \fIpart\fP\&. 
.SS "const \fBSoTypeList\fP & SoNodekitCatalog::getListItemTypes (const \fBSbName\fP & name) const"
Returns list of node types which are allowed to be children of the named list container part\&. 
.SS "SbBool SoNodekitCatalog::isPublic (\fBint\fP part) const"
Returns \fCTRUE\fP if \fIpart\fP is visible and publicly available for queries and modifications, \fCFALSE\fP if \fIpart\fP is hidden\&. 
.SS "SbBool SoNodekitCatalog::isPublic (const \fBSbName\fP & name) const"
Returns \fCTRUE\fP if the part is visible and publicly available for queries and modifications, \fCFALSE\fP if it is hidden\&. 
.SS "\fBSoNodekitCatalog\fP * SoNodekitCatalog::clone (\fBSoType\fP type) const"
Return a clone of this catalog\&. \fItype\fP will be used to set the type and defaulttype values of the toplevel \fCthis\fP entry\&. 
.SS "SbBool SoNodekitCatalog::addEntry (const \fBSbName\fP & name, \fBSoType\fP type, \fBSoType\fP defaulttype, SbBool isdefaultnull, const \fBSbName\fP & parentname, const \fBSbName\fP & rightsiblingname, SbBool islist, \fBSoType\fP listcontainertype, \fBSoType\fP listitemtype, SbBool ispublic)"
Add a new entry to the catalog\&. Returns \fCTRUE\fP if add was ok\&. 
.SS "void SoNodekitCatalog::addListItemType (\fBint\fP part, \fBSoType\fP type)"
Add another allowable type for the given \fIpart\fP\&. \fIpart\fP must of course be a list container item\&. 
.SS "void SoNodekitCatalog::addListItemType (const \fBSbName\fP & name, \fBSoType\fP type)"
Add another allowable type for the \fIname\fP part\&. The part must of course be a list container\&. 
.SS "void SoNodekitCatalog::narrowTypes (const \fBSbName\fP & name, \fBSoType\fP newtype, \fBSoType\fP newdefaulttype)"
Set the type and default type of a part to be subtypes of the old types\&. Useful for 'narrowing' the specification of a nodekit which inherits the catalog of a more generic nodekit superclass\&. 
.SS "void SoNodekitCatalog::setNullByDefault (const \fBSbName\fP & name, SbBool nullbydefault)"
Change whether or not the part with the given \fIname\fP is created by default\&. 
.SS "SbBool SoNodekitCatalog::recursiveSearch (\fBint\fP part, const \fBSbName\fP & name, \fBSoTypeList\fP * checked) const"
Recursively search \fIpart\fP number in catalog for the \fIname\fP part\&.
.PP
The \fIchecked\fP \fBSoTypeList\fP is just used as a placeholder to remember which nodekit class catalogs have already been scanned (or are being scanned) during the recursion\&. You should normally just pass in an empty list\&. 
.SS "void SoNodekitCatalog::printCheck (void) const"
Lists all catalog parts, which is useful for debugging\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
