.TH "SoBaseList" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoBaseList \- The \fBSoBaseList\fP class is a container for pointers to \fBSoBase\fP derived objects\&.
.PP
The additional capability of the \fBSoBaseList\fP class over its parent class, \fBSbPList\fP, is to automatically handle referencing and dereferencing of items as they are added or removed from the lists\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/lists/SoBaseList\&.h>\fP
.PP
Inherits \fBSbPList\fP\&.
.PP
Inherited by \fBSoEngineList\fP, \fBSoNodeList\fP, and \fBSoPathList\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoBaseList\fP (void)"
.br
.ti -1c
.RI "\fBSoBaseList\fP (const \fBint\fP size)"
.br
.ti -1c
.RI "\fBSoBaseList\fP (const \fBSoBaseList\fP &l)"
.br
.ti -1c
.RI "\fB~SoBaseList\fP ()"
.br
.ti -1c
.RI "void \fBappend\fP (\fBSoBase\fP *ptr)"
.br
.ti -1c
.RI "void \fBinsert\fP (\fBSoBase\fP *ptr, const \fBint\fP addbefore)"
.br
.ti -1c
.RI "void \fBremove\fP (const \fBint\fP index)"
.br
.ti -1c
.RI "void \fBremoveItem\fP (\fBSoBase\fP *item)"
.br
.ti -1c
.RI "void \fBtruncate\fP (const \fBint\fP length)"
.br
.ti -1c
.RI "void \fBcopy\fP (const \fBSoBaseList\fP &l)"
.br
.ti -1c
.RI "\fBSoBaseList\fP & \fBoperator=\fP (const \fBSoBaseList\fP &l)"
.br
.ti -1c
.RI "\fBSoBase\fP * \fBoperator[]\fP (const \fBint\fP i) const"
.br
.ti -1c
.RI "void \fBset\fP (const \fBint\fP i, \fBSoBase\fP *const ptr)"
.br
.ti -1c
.RI "void \fBaddReferences\fP (const SbBool flag)"
.br
.ti -1c
.RI "SbBool \fBisReferencing\fP (void) const"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoBaseList\fP class is a container for pointers to \fBSoBase\fP derived objects\&.
.PP
The additional capability of the \fBSoBaseList\fP class over its parent class, \fBSbPList\fP, is to automatically handle referencing and dereferencing of items as they are added or removed from the lists\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoBaseList::SoBaseList (void)"
Default constructor\&. 
.SS "SoBaseList::SoBaseList (const \fBint\fP size)"
Constructor with a hint about the maximum number of pointers in the list\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::SbPList(const int)\fP 
.RE
.PP

.SS "SoBaseList::SoBaseList (const \fBSoBaseList\fP & l)"
Copy constructor\&.
.PP
Shallow copy the items of \fIl\fP into this list, adding to the item reference counts if the reference flag of \fIl\fP is \fCTRUE\fP\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::SbPList(const SbPList &)\fP 
.RE
.PP

.SS "SoBaseList::~SoBaseList ()"
Destructor\&. Dereferences items before freeing resources\&. 
.SH "Member Function Documentation"
.PP 
.SS "void SoBaseList::append (\fBSoBase\fP * ptr)"
Append \fIptr\fP to list, adding to the reference count of the object (unless \fBaddReferences()\fP has been set to \fCFALSE\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::append()\fP 
.RE
.PP

.SS "void SoBaseList::insert (\fBSoBase\fP * ptr, const \fBint\fP addbefore)"
Insert \fIptr\fP in the list at position \fIaddbefore\fP, adding to the reference count of the object (unless \fBaddReferences()\fP has been set to \fCFALSE\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::insert()\fP 
.RE
.PP

.SS "void SoBaseList::remove (const \fBint\fP index)"
Removes item at \fIindex\fP from the list, dereferencing the object (unless \fBaddReferences()\fP has been set to \fCFALSE\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::remove()\fP 
.RE
.PP

.SS "void SoBaseList::removeItem (\fBSoBase\fP * item)"
Removes \fIitem\fP from the list, dereferencing the object (unless \fBaddReferences()\fP has been set to \fCFALSE\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::removeItem()\fP 
.RE
.PP

.SS "void SoBaseList::truncate (const \fBint\fP length)"
Makes the list contain only the \fIlength\fP first items, removing all items from index \fIlength\fP and onwards to the end of the list\&. Dereferences the objects to be removed (unless \fBaddReferences()\fP has been set to \fCFALSE\fP)\&.
.PP
\fBSee also:\fP
.RS 4
\fBSbPList::truncate()\fP 
.RE
.PP

.SS "void SoBaseList::copy (const \fBSoBaseList\fP & l)"
Shallow copy of the item pointers of \fIl\fP list into this one, first removing all items in this list\&. 
.SS "\fBSoBaseList\fP & SoBaseList::operator= (const \fBSoBaseList\fP & l)"
Shallow copy of the \fBSoBase\fP pointers from \fIl\fP into this one, returning a pointer to ourself\&.
.PP
\fBSee also:\fP
.RS 4
\fBcopy()\fP 
.RE
.PP

.SS "\fBSoBase\fP * SoBaseList::operator[] (const \fBint\fP idx) const"
Returns element at \fIidx\fP\&.
.PP
Will automatically expand the size of the internal array if \fIidx\fP is outside the current bounds of the list\&. The values of any additional pointers are then set to \fCNULL\fP\&. 
.SS "void SoBaseList::set (const \fBint\fP i, \fBSoBase\fP *const ptr)"
Index operator to set element at \fIi\fP\&. Does \fInot\fP expand array bounds if \fIi\fP is outside the list\&. 
.SS "void SoBaseList::addReferences (const SbBool flag)"
Decide whether or not the \fBSoBase\fP items should be automatically referenced and dereferenced as they are added and removed from the list\&.
.PP
Default setting is to do referencing\&. 
.SS "SbBool SoBaseList::isReferencing (void) const"
Return whether the \fBSoBase\fP instances are automatically referenced and dereferenced when they are added and removed from the list\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSee also:\fP
.RS 4
\fBaddReferences()\fP 
.RE
.PP
\fBSince:\fP
.RS 4
Coin 2\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
