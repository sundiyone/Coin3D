.TH "SoArray" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoArray \- The \fBSoArray\fP class is a group node for setting up regular arrays of subgraphs\&.
.PP
\fBSoArray\fP presents a convenient way of duplicating a node (typically a shape node) or a complete subgraph in 1 to 3 dimensions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoArray\&.h>\fP
.PP
Inherits \fBSoGroup\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBOrigin\fP { \fBFIRST\fP, \fBCENTER\fP, \fBLAST\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoArray\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBaffectsState\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBhandleEvent\fP (\fBSoHandleEventAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetMatrix\fP (\fBSoGetMatrixAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBsearch\fP (\fBSoSearchAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBaudioRender\fP (\fBSoAudioRenderAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFEnum\fP \fBorigin\fP"
.br
.ti -1c
.RI "\fBSoSFShort\fP \fBnumElements1\fP"
.br
.ti -1c
.RI "\fBSoSFShort\fP \fBnumElements2\fP"
.br
.ti -1c
.RI "\fBSoSFShort\fP \fBnumElements3\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBseparation1\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBseparation2\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBseparation3\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoArray\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoArray\fP class is a group node for setting up regular arrays of subgraphs\&.
.PP
\fBSoArray\fP presents a convenient way of duplicating a node (typically a shape node) or a complete subgraph in 1 to 3 dimensions\&. 

The child node or subgraph can only be translated by regular offsets for all dimensions\&.
.PP
For more flexible functionality for duplication of geometry, see the \fBSoMultipleCopy\fP group node, which can do general transformations (including rotation and scaling) for its child\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
Array {
    origin FIRST
    numElements1 1
    numElements2 1
    numElements3 1
    separation1 1 0 0
    separation2 0 1 0
    separation3 0 0 1
}

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSoMultipleCopy\fP 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoArray::Origin\fP"
The possible settings for the \fBSoArray::origin\fP field\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoArray::SoArray (void)"
Constructor\&. 
.SS "SoArray::~SoArray ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoArray::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "const \fBSoFieldData\fP * SoArray::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "SbBool SoArray::affectsState (void) const\fC [virtual]\fP"
Returns \fCTRUE\fP if the node could have any effect on the state during traversal\&.
.PP
If it returns \fCFALSE\fP, no data in the traversal-state will change from the pre-traversal state to the post-traversal state\&. The \fBSoSeparator\fP node will for instance return \fCFALSE\fP, as it pushes and pops the state before and after traversal of its children\&. All \fBSoShape\fP nodes will also return \fCFALSE\fP, as just pushing out geometry data to the rendering engine won't affect the actual rendering state\&.
.PP
The default method returns \fCTRUE\fP, on a 'better safe than sorry' philosophy\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoArray::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::pick (\fBSoPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::handleEvent (\fBSoHandleEventAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoHandleEventAction\fP\&.
.PP
Inspects the event data from \fIaction\fP, and processes it if it is something which this node should react to\&.
.PP
Nodes influencing relevant state variables for how event handling is done also overrides this method\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::getMatrix (\fBSoGetMatrixAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoGetMatrixAction\fP\&.
.PP
Updates \fIaction\fP by accumulating with the transformation matrix of this node (if any)\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::search (\fBSoSearchAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoSearchAction\fP\&.
.PP
Compares the search criteria from the \fIaction\fP to see if this node is a match\&. Searching is done by matching up \fIall\fP criteria set up in the \fBSoSearchAction\fP -- if \fIany\fP of the requested criteria is a miss, the search is not deemed successful for the node\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoSearchAction\fP 
.RE
.PP

.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoArray::audioRender (\fBSoAudioRenderAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoAudioRenderAction\fP\&.
.PP
Does common processing for \fBSoAudioRenderAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFEnum\fP SoArray::origin"
Where the origin of the array should be set, ie how the array elements will be distributed from the local origo\&.
.PP
Default value is SoArray::FIRST\&. 
.SS "\fBSoSFShort\fP SoArray::numElements1"
Number of duplicates for each X axis row\&. Default 1\&. 
.SS "\fBSoSFShort\fP SoArray::numElements2"
Number of duplicates for each Y axis row\&. Default 1\&. 
.SS "\fBSoSFShort\fP SoArray::numElements3"
Number of duplicates for each Z axis row\&. Default 1\&. 
.SS "\fBSoSFVec3f\fP SoArray::separation1"
Distance in current units between the center point of each element along the X axis\&. Default [1\&.0, 0\&.0, 0\&.0]\&. 
.SS "\fBSoSFVec3f\fP SoArray::separation2"
Distance in current units between the center point of each element along the Y axis\&. Default [0\&.0, 1\&.0, 0\&.0]\&. 
.SS "\fBSoSFVec3f\fP SoArray::separation3"
Distance in current units between the center point of each element along the Z axis\&. Default [0\&.0, 0\&.0, 1\&.0]\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
