.TH "SoSceneTexture2" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoSceneTexture2 \- The \fBSoSceneTexture2\fP class is used to create a 2D texture from a Coin scene graph\&.
.PP
Lets the rendering of a scene graph be specified as a texture image to be used in another scene graph\&. Set up the scene graph used for a texture in the \fBSoSceneTexture2::scene\fP field\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoSceneTexture2\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBModel\fP { \fBMODULATE\fP = SoMultiTextureImageElement::MODULATE, \fBDECAL\fP = SoMultiTextureImageElement::DECAL, \fBBLEND\fP = SoMultiTextureImageElement::BLEND, \fBREPLACE\fP = SoMultiTextureImageElement::REPLACE }"
.br
.ti -1c
.RI "enum \fBWrap\fP { \fBREPEAT\fP = SoMultiTextureImageElement::REPEAT, \fBCLAMP\fP = SoMultiTextureImageElement::CLAMP, \fBCLAMP_TO_BORDER\fP = SoMultiTextureImageElement::CLAMP_TO_BORDER }"
.br
.ti -1c
.RI "enum \fBTransparencyFunction\fP { \fBNONE\fP, \fBALPHA_BLEND\fP, \fBALPHA_TEST\fP }"
.br
.ti -1c
.RI "enum \fBType\fP { \fBDEPTH\fP, \fBRGBA8\fP, \fBRGBA32F\fP, \fBRGB32F\fP, \fBRGBA16F\fP, \fBRGB16F\fP, \fBR3_G3_B2\fP, \fBRGB\fP, \fBRGB4\fP, \fBRGB5\fP, \fBRGB8\fP, \fBRGB10\fP, \fBRGB12\fP, \fBRGB16\fP, \fBRGBA\fP, \fBRGBA2\fP, \fBRGBA4\fP, \fBRGB5_A1\fP, \fBRGB10_A2\fP, \fBRGBA12\fP, \fBRGBA16\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.ti -1c
.RI "virtual void \fBwrite\fP (\fBSoWriteAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBrayPick\fP (\fBSoRayPickAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapS\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapT\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBmodel\fP"
.br
.ti -1c
.RI "\fBSoSFColor\fP \fBblendColor\fP"
.br
.ti -1c
.RI "\fBSoSFVec4f\fP \fBbackgroundColor\fP"
.br
.ti -1c
.RI "\fBSoSFVec2s\fP \fBsize\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBscene\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBsceneTransparencyType\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBtransparencyFunction\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBtype\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoSceneTexture2\fP class is used to create a 2D texture from a Coin scene graph\&.
.PP
Lets the rendering of a scene graph be specified as a texture image to be used in another scene graph\&. Set up the scene graph used for a texture in the \fBSoSceneTexture2::scene\fP field\&. 

This node behaves exactly like \fBSoTexture2\fP when it comes mapping the actual texture onto subsequent geometry\&. Please read the \fBSoTexture2\fP documentation for more information about how textures are mapped onto shapes\&.
.PP
A notable feature of this node is that it will use offscreen pbuffers for hardware accelerated rendering, if they are available from the OpenGL driver\&. WGL, GLX and AGL, for OpenGL drivers on Microsoft Windows, X11 and Mac OS X, respectively, all support the OpenGL Architecture Review Board (ARB) pbuffer extension in later incarnations from most OpenGL vendors\&.
.PP
Note also that the offscreen pbuffer will be used directly on the card as a texture, with no costly round trip back and forth from CPU memory, if the OpenGL driver supports the recent ARB_render_texture extension\&.
.PP
An important limitation is that textures should have dimensions that are equal to a whole power-of-two, see documentation for SoSceneTexture::size\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
SceneTexture2 {
    size 256 256
    scene NULL
    sceneTransparencyType NULL
    type RGBA_UNSIGNED_BYTE
    backgroundColor 0 0 0 0
    transparencyFunction NONE
    wrapS REPEAT
    wrapT REPEAT
    model MODULATE
    blendColor 0 0 0
}

.fi
.PP
.PP
\fBSince:\fP
.RS 4
Coin 2\&.2 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoSceneTexture2::Model\fP"
Texture mapping model, for deciding how to 'merge' the texturemap with the object it is mapped onto\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMODULATE \fP\fP
Texture color is multiplied by the polygon color\&. The result will be Phong shaded (if light model is PHONG)\&. 
.TP
\fB\fIDECAL \fP\fP
Texture image overwrites polygon shading\&. Textured pixels will not be Phong shaded\&. Has undefined behaviour for grayscale and grayscale-alpha textures\&. 
.TP
\fB\fIBLEND \fP\fP
This model is normally used with monochrome textures (i\&.e\&. textures with one or two components)\&. The first component, the intensity, is then used to blend between the shaded color of the polygon and the \fBSoSceneTexture2::blendColor\fP\&. 
.TP
\fB\fIREPLACE \fP\fP
Texture image overwrites polygon shading\&. Textured pixels will not be Phong shaded\&. Supports grayscale and grayscale alpha textures\&. This feature requires OpenGL 1\&.1\&. MODULATE will be used if OpenGL version < 1\&.1 is detected\&. 
.SS "enum \fBSoSceneTexture2::Wrap\fP"
Enumeration of wrapping strategies which can be used when the texturemap doesn't cover the full extent of the geometry\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIREPEAT \fP\fP
Repeat texture when coordinate is not between 0 and 1\&. 
.TP
\fB\fICLAMP \fP\fP
Clamp coordinate between 0 and 1\&. 
.SS "enum \fBSoSceneTexture2::TransparencyFunction\fP"
For deciding how the texture's alpha channel is handled\&. It's not possible to automatically detect this, since the texture is stored only on the graphics card's memory, and it'd be too slow to fetch the image to test the alpha channel like Coin does for regular textures\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINONE \fP\fP
The alpha channel is ignored\&. 
.TP
\fB\fIALPHA_BLEND \fP\fP
Alpha blending is used\&. 
.TP
\fB\fIALPHA_TEST \fP\fP
An alpha test function is used\&. 
.SS "enum \fBSoSceneTexture2::Type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDEPTH \fP\fP
Specifies a depth buffer texture\&. 
.TP
\fB\fIRGBA8 \fP\fP
Specifies an RGBA texture with 8 bits per component\&. 
.TP
\fB\fIRGBA32F \fP\fP
Specifies a RGBA texture with floating point components\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoSceneTexture2::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoSceneTexture2::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "void SoSceneTexture2::notify (\fBSoNotList\fP * l)\fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSceneTexture2::write (\fBSoWriteAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoWriteAction\fP\&.
.PP
Writes out a node object, and any connected nodes, engines etc, if necessary\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSceneTexture2::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSceneTexture2::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSceneTexture2::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSceneTexture2::rayPick (\fBSoRayPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoRayPickAction\fP\&.
.PP
Checks the ray specification of the \fIaction\fP and tests for intersection with the data of the node\&.
.PP
Nodes influencing relevant state variables for how picking is done also overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFEnum\fP SoSceneTexture2::wrapS"
Wrapping strategy for the S coordinate when the texturemap is narrower than the object to map onto\&.
.PP
Default value is \fBSoSceneTexture2::REPEAT\fP\&. 
.SS "\fBSoSFEnum\fP SoSceneTexture2::wrapT"
Wrapping strategy for the T coordinate when the texturemap is shorter than the object to map onto\&.
.PP
Default value is \fBSoSceneTexture2::REPEAT\fP\&. 
.SS "\fBSoSFEnum\fP SoSceneTexture2::model"
Texturemapping model for how the texturemap is 'merged' with the polygon primitives it is applied to\&. Default value is \fBSoSceneTexture2::MODULATE\fP\&. 
.SS "\fBSoSFColor\fP SoSceneTexture2::blendColor"
Blend color\&. Used when \fBSoSceneTexture2::model\fP is \fBSoSceneTexture2::BLEND\fP\&.
.PP
Default color value is [0, 0, 0], black, which means no contribution to the blending is made\&. 
.SS "\fBSoSFVec4f\fP SoSceneTexture2::backgroundColor"
The color the color buffer is cleared to before rendering the scene\&. Default value is (0\&.0f, 0\&.0f, 0\&.0f, 0\&.0f)\&. 
.SS "\fBSoSFVec2s\fP SoSceneTexture2::size"
The size of the texture\&.
.PP
This node currently only supports power of two textures\&. If the size is not a power of two, the value will be rounded upwards to the next power of two\&. 
.SS "\fBSoSFNode\fP SoSceneTexture2::scene"
The scene graph that is rendered into the texture\&. 
.SS "\fBSoSFNode\fP SoSceneTexture2::sceneTransparencyType"
Used for overriding the transparency type for the sub scene graph\&. Should contain an instance of the SoTransparecyType node, or NULL to inherit the transparency type from the current viewer\&.
.PP
Please note that if you want to render the texture using frame buffer objects, you need to use of of the NONE, SCREEN_DOOR, ADD or BLEND transparency types\&. 
.SS "\fBSoSFEnum\fP SoSceneTexture2::transparencyFunction"
The transparency function used\&. Default value is NONE\&. 
.SS "\fBSoSFNode\fP SoSceneTexture2::type"
The type of texture to generate\&. RGBA8 for normal texture, DEPTH for a depth buffer texture, RGBA32F for a floating point RGBA texture\&. texture\&. Default is RGBA_UNSIGNED_BYTE\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
