.TH "SoReversePerspectiveCamera" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoReversePerspectiveCamera \- The \fBSoReversePerspectiveCamera\fP class defines a camera node with reverse perspective rendering\&.
.PP
For realistic looking 3D scene, the geometry should be rendered with perspective calculations\&. Use this camera type to accomplish this\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoReversePerspectiveCamera\&.h>\fP
.PP
Inherits \fBSoPerspectiveCamera\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoReversePerspectiveCamera\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoReversePerspectiveCamera\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoReversePerspectiveCamera\fP class defines a camera node with reverse perspective rendering\&.
.PP
For realistic looking 3D scene, the geometry should be rendered with perspective calculations\&. Use this camera type to accomplish this\&. 

Reverse perspective rendering, a special case of perspective rendering, is where the projection rays do not converge in the eye of the observer, but instead at a point behind the scene\&. Thus objects farther away from the observer appear larger than closer objects\&. A reverse perspective projection is defined by
.IP "\(bu" 2
setting the perspective camera position to the projection point behind the scene
.IP "  \(bu" 4
setting near / far distance to negative values
.PP

.IP "\(bu" 2
rotating the camera orientation by 180 degree around the camera z axis to compensate the image flip induced by the negative near / far values\&.
.PP
.PP
The view volume of the default reverse perspective camera is defined as shown below\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
ReversePerspectiveCamera {
    viewportMapping ADJUST_CAMERA
    position 0 0 -10
    orientation 0 0 1 3\&.14159
    nearDistance -10
    farDistance -1
    aspectRatio 1
    focalDistance -6
    heightAngle 0\&.78539819
}

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoReversePerspectiveCamera::SoReversePerspectiveCamera (void)"
Constructor\&. 
.SS "SoReversePerspectiveCamera::~SoReversePerspectiveCamera ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoReversePerspectiveCamera::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoPerspectiveCamera\fP\&.
.SS "const \fBSoFieldData\fP * SoReversePerspectiveCamera::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoPerspectiveCamera\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
