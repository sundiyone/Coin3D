.TH "base" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
base \- This group is just a lot of basic types for linear algebra, string manipulation and misc\&. other utilities\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBcc_string\fP"
.br
.RI "The \fBcc_string\fP type is a C ADT for ASCII string management\&.
.PP
This is a Coin extension\&. "
.ti -1c
.RI "class \fBSbBSPTree\fP"
.br
.RI "The \fBSbBSPTree\fP class provides a binary space partitioning container\&.
.PP
This class can be used to organize searches for 3D points or normals in a set in O(log(n)) time\&. "
.ti -1c
.RI "class \fBSbBox2s\fP"
.br
.RI "The \fBSbBox2s\fP class is a 2 dimensional box with short integer coordinates\&.
.PP
This box class is used by other classes in Coin for data exchange\&. It provides storage for two box corners with short integer coordinates, which is among other things useful for representing screen or canvas areas in absolute window coordinates\&. "
.ti -1c
.RI "class \fBSbBox2i32\fP"
.br
.RI "The \fBSbBox2i32\fP class is a 2 dimensional box with 32-bit integer coordinates\&.
.PP
This box class is used by other classes in Coin for data exchange\&. It provides storage for two box corners with 32-bit integer coordinates, which is among other things useful for representing screen or canvas areas in absolute window coordinates\&. "
.ti -1c
.RI "class \fBSbBox2f\fP"
.br
.RI "The \fBSbBox2f\fP class is a 2 dimensional box with floating point corner coordinates\&.
.PP
This box class is used by many other classes in Coin for data exchange and storage\&. It provides two box corners with floating point coordinates, which is among other things useful for representing screen or canvas dimensions in normalized coordinates\&. "
.ti -1c
.RI "class \fBSbBox2d\fP"
.br
.RI "The \fBSbBox2d\fP class is a 2 dimensional box with double precision corner coordinates\&.
.PP
This box class is used by many other classes in Coin for data exchange and storage\&. It provides two box corners with double precision coordinates, which is among other things useful for representing screen or canvas dimensions in normalized coordinates\&. "
.ti -1c
.RI "class \fBSbBox3s\fP"
.br
.RI "The \fBSbBox3s\fP class is a 3 dimensional box with short integer coordinates\&.
.PP
This box class is used by other classes in Coin for data exchange\&. It provides storage for two box corners with short integer coordinates\&. "
.ti -1c
.RI "class \fBSbBox3f\fP"
.br
.RI "The \fBSbBox3f\fP class is an abstraction for an axis aligned 3 dimensional box\&.
.PP
This box abstraction class is used by other entities in the Coin library for data exchange and storage\&. It provides a representation of the defining corners of a box in 3D space, with the sides aligned with the 3 principal axes\&. "
.ti -1c
.RI "class \fBSbBox3d\fP"
.br
.RI "The \fBSbBox3d\fP class is an abstraction for an axis aligned 3 dimensional box\&.
.PP
This box abstraction class is used by other entities in the Coin library for data exchange and storage\&. It provides a representation of the defining corners of a box in 3D space, with the sides aligned with the 3 principal axes\&. "
.ti -1c
.RI "class \fBSbClip\fP"
.br
.RI "The \fBSbClip\fP class is a generic polygon clipper class\&.
.PP
It is used by first adding all vertices in the polygon, and then clipping against any number of planes\&. If you need to supply additional information per vertex (e\&.g\&. texture coordinates), you should supply a callback in the constructor, and a pointer to your vertex structure in \fBaddVertex()\fP\&. For every new vertex created, the callback is called with the line being clipped, including the pointers to your vertex structures and the position of the new (clipped against some plane) vertex\&. You should then create a new vertex structure, calculate your data (e\&.g\&. a new texture coordinate) and return a pointer to this structure\&. "
.ti -1c
.RI "class \fBSbColor\fP"
.br
.RI "The \fBSbColor\fP class contains the red, green and blue components which make up a color value\&.
.PP
This class is used within other classes in Coin\&. It inherits the \fBSbVec3f\fP class, interpreting the 3 component vector as a vector in the RGB cube where the red, green and blue components corresponds to x, y and z respectively\&. "
.ti -1c
.RI "class \fBSbColor4f\fP"
.br
.RI "The \fBSbColor4f\fP class contains the red, green, blue and alpha components which make up a color value\&.
.PP
This class is used internally within other classes in Coin\&. It contains a 4 component vector as a position in the RGB cube with an additional transparency value\&. "
.ti -1c
.RI "class \fBSbCylinder\fP"
.br
.RI "The \fBSbCylinder\fP class is a representation of a cylinder\&.
.PP
This class is used within other classes in Coin\&. It contains data to represent a cylinder by an axis and a radius\&. The cylinder has no length/height value, which means it is treated as of infinite length\&. "
.ti -1c
.RI "class \fBSbDict\fP"
.br
.RI "The \fBSbDict\fP class organizes a dictionary of keys and values\&.
.PP
It uses hashing to quickly insert and find entries in the dictionary\&. An entry consists of an unique key and a generic pointer\&. "
.ti -1c
.RI "class \fBSbDPLine\fP"
.br
.RI "The \fBSbDPLine\fP class represents a line using double precision coordinates\&.
.PP
\fBSbDPLine\fP is used by many other classes in Coin\&. It provides a way of specifying a directed line (also known as a ray) through a specified point (origin) and a direction in 3D space\&. Note that the line is infinite in both directions from its definition point\&. "
.ti -1c
.RI "class \fBSbDPMatrix\fP"
.br
.RI "The \fBSbDPMatrix\fP class is a 4x4 dimensional representation of a double-precision matrix\&.
.PP
This class is like the \fBSbMatrix\fP class, but uses double-precision floating point values for its elements\&. For more class documentation, see \fBSbMatrix\fP\&. "
.ti -1c
.RI "class \fBSbDPPlane\fP"
.br
.RI "The \fBSbDPPlane\fP class represents a plane in 3D space\&.
.PP
\fBSbDPPlane\fP is used by many other classes in Coin\&. It provides a way of representing a plane, specified by a plane normal vector and a distance from the origin of the coordinate system\&. "
.ti -1c
.RI "class \fBSbDPRotation\fP"
.br
.RI "The \fBSbDPRotation\fP class represents a rotation in 3D space using double precision data\&.
.PP
\fBSbDPRotation\fP is used extensively throughout the Coin library\&. "
.ti -1c
.RI "class \fBSbHeap\fP"
.br
.RI "The \fBSbHeap\fP class is a generic heap class\&.
.PP
FIXME: write doc\&. "
.ti -1c
.RI "class \fBSbImage\fP"
.br
.RI "The \fBSbImage\fP class is an abstract datatype for 2D and 3D images\&.
.PP
Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. "
.ti -1c
.RI "class \fBSbLine\fP"
.br
.RI "The \fBSbLine\fP class represents a line in 3D space\&.
.PP
\fBSbLine\fP provides a way of specifying a directed line, through a 3D point (origin) and a vector direction in 3D space\&. "
.ti -1c
.RI "class \fBSbMatrix\fP"
.br
.RI "The \fBSbMatrix\fP class is a 4x4 dimensional representation of a matrix\&.
.PP
\fBSbMatrix\fP is used by many other classes in Coin\&. It provides storage for a 4x4 matrix of single-precision floating point values\&. "
.ti -1c
.RI "class \fBSbName\fP"
.br
.RI "The \fBSbName\fP class stores strings by reference\&.
.PP
The class is used by Coin for storing keywords, names and other strings\&. They are stored in a manner where identical strings are guaranteed to map to the same memory address (as returned by the \fBSbName::getString()\fP method)\&. "
.ti -1c
.RI "class \fBSbOctTree\fP"
.br
.RI "The \fBSbOctTree\fP class defines a generic oct tree for fast geometry searches\&.
.PP
Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. "
.ti -1c
.RI "class \fBSbPlane\fP"
.br
.RI "The \fBSbPlane\fP class represents a plane in 3D space\&.
.PP
\fBSbPlane\fP is used by many other classes in Coin\&. It provides a way of representing a plane, specified by a plane normal vector and a distance from the origin of the coordinate system\&. "
.ti -1c
.RI "class \fBSbRotation\fP"
.br
.RI "The \fBSbRotation\fP class represents a rotation in 3D space\&.
.PP
\fBSbRotation\fP is used extensively throughout the Coin library\&. "
.ti -1c
.RI "class \fBSbSphere\fP"
.br
.RI "The \fBSbSphere\fP class is a representation of a sphere\&.
.PP
This class is used within many other classes in Coin\&. It contains the data neccessary to represent a sphere (a 3D point and a radius)\&. "
.ti -1c
.RI "class \fBSbString\fP"
.br
.RI "The \fBSbString\fP class is a string class with convenience functions for string operations\&.
.PP
This is the class used for storing and working with character strings\&. It automatically takes care of supporting all the 'bookkeeping' tasks usually associated with working with character strings, like memory allocation and deallocation etc\&. "
.ti -1c
.RI "class \fBSbTesselator\fP"
.br
.RI "The \fBSbTesselator\fP class is used to tessellate polygons into triangles\&.
.PP
\fBSbTesselator\fP is used within Coin to split polygons into triangles\&. It handles concave polygons, does Delaunay triangulation and avoids generating self-intersecting triangles\&. "
.ti -1c
.RI "class \fBSbTime\fP"
.br
.RI "The \fBSbTime\fP class instances represents time values\&.
.PP
\fBSbTime\fP is a convenient way of doing system independent representation and calculations on time values of high resolution\&. "
.ti -1c
.RI "class \fBSbVec2s\fP"
.br
.RI "The \fBSbVec2s\fP class is a 2 dimensional vector with short integer coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a vector in 2 dimensions as well as simple integer arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec2i32\fP"
.br
.RI "The \fBSbVec2i32\fP class is a 2 dimensional vector with 32-bit signed integer coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a vector in 2 dimensions as well as simple integer arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec2f\fP"
.br
.RI "The \fBSbVec2f\fP class is a 2 dimensional vector with floating point coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a vector in 2 dimensions as well as simple floating point arithmetic operations on this vector\&. "
.ti -1c
.RI "class \fBSbVec2d\fP"
.br
.RI "The \fBSbVec2d\fP class is a 2 dimensional vector with double precision floating point coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a vector in 2 dimensions as well as simple floating point arithmetic operations on this vector\&. "
.ti -1c
.RI "class \fBSbVec3s\fP"
.br
.RI "The \fBSbVec3s\fP class is a 3 dimensional vector with short integer coordinates\&.
.PP
This vector class provides storage for a 3 dimensional vector as well as simple integer arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec3f\fP"
.br
.RI "The \fBSbVec3f\fP class is a 3 dimensional vector with floating point coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a 3 dimensional vector as well as simple floating point arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec3d\fP"
.br
.RI "The \fBSbVec3d\fP class is a 3 dimensional vector with double precision floating point coordinates\&.
.PP
This vector class provides storage for a 3 dimensional double precision floating point vector as well as simple floating point arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec4f\fP"
.br
.RI "The \fBSbVec4f\fP class is a 4 dimensional vector with floating point coordinates\&.
.PP
This vector class is used by many other classes in Coin\&. It provides storage for a 3 dimensional homogeneoues vector (with the 4 components usually referred to as <x, y, z, w>) as well as simple floating point arithmetic operations\&. "
.ti -1c
.RI "class \fBSbVec4d\fP"
.br
.RI "The \fBSbVec4d\fP class is a 4 dimensional vector with double precision floating point coordinates\&.
.PP
This vector class is not by many other classes in Coin\&. It provides storage for a 3 dimensional homogeneoues vector (with the 4 components usually referred to as <x, y, z, w>) aswell as simple double precision floating point arithmetic operations\&. "
.ti -1c
.RI "class \fBSbViewVolume\fP"
.br
.RI "The \fBSbViewVolume\fP class is a viewing volume in 3D space\&.
.PP
This class contains the necessary information for storing a view volume\&. It has methods for projection of primitives into the 3D volume from 2D points in the projection plane or vice versa, doing camera transforms, view volume transforms, etc\&. "
.ti -1c
.RI "class \fBSbDPViewVolume\fP"
.br
.RI "The \fBSbDPViewVolume\fP class is a double precision viewing volume in 3D space\&.
.PP
This class contains the necessary information for storing a view volume\&. It has methods for projection of primitives from or into the 3D volume, doing camera transforms, view volume transforms etc\&. "
.ti -1c
.RI "class \fBSbViewportRegion\fP"
.br
.RI "The \fBSbViewportRegion\fP class is a viewport within a full window\&.
.PP
The \fBSbViewportRegion\fP class contains information to represent a subview within a window\&. It stores information about the origin and size of the subview, aswell as the size of the underlying 'full' window\&. "
.ti -1c
.RI "class \fBSbXfBox3f\fP"
.br
.RI "The \fBSbXfBox3f\fP class is a 3 dimensional box with floating point coordinates and an attached transformation\&.
.PP
This box class is used by many other classes in Coin for data exchange\&. It provides storage for two box corners with floating point coordinates, and for a floating point 4x4 transformation matrix\&. "
.ti -1c
.RI "class \fBSbXfBox3d\fP"
.br
.RI "The \fBSbXfBox3d\fP class is a 3 dimensional box with double precision coordinates and an attached transformation\&.
.PP
It provides storage for two box corners with double precision floating point coordinates, and for a double precision 4x4 transformation matrix\&. "
.ti -1c
.RI "class \fBSbList< Type >\fP"
.br
.RI "The \fBSbList\fP class is a template container class for lists\&.
.PP
\fBSbList\fP is an extension of the Coin library versus the original Open Inventor API\&. Open Inventor handles most list classes by inheriting the \fBSbPList\fP class, which contains an array of generic \fCvoid*\fP pointers\&. By using this template-based class instead, we can share more code and make the list handling code more typesafe\&. "
.ti -1c
.RI "class \fBSbPList\fP"
.br
.RI "The \fBSbPList\fP class is a container class for void pointers\&. "
.ti -1c
.RI "class \fBSbIntList\fP"
.br
.RI "The \fBSbIntList\fP class is a container for integer list arrays\&. "
.ti -1c
.RI "class \fBSbVec3fList\fP"
.br
.RI "The \fBSbVec3fList\fP class is a container for arrays of \fBSbVec3f\fP pointers\&.
.PP
Note that upon using the equality and inequality operators, the \fBSbVec3f\fP objects themselves are not compared, only the pointer values\&. "
.ti -1c
.RI "class \fBSbStringList\fP"
.br
.RI "The \fBSbStringList\fP class is a container for arrays of \fBSbString\fP pointers\&.
.PP
Note that upon using the equality and inequality operators, the strings themselves are not compared, only the pointer values\&. "
.in -1c
.SH "Detailed Description"
.PP 
This group is just a lot of basic types for linear algebra, string manipulation and misc\&. other utilities\&. 


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
