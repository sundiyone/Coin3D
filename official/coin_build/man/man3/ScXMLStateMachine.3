.TH "ScXMLStateMachine" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ScXMLStateMachine \- Manager for processing events and setting states in SCXML structures\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/scxml/ScXMLStateMachine\&.h>\fP
.PP
Inherits \fBScXMLEventTarget\fP\&.
.PP
Inherited by \fBSoScXMLStateMachine\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual void \fBsetName\fP (const \fBSbName\fP &name)"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetName\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBsetDescription\fP (\fBScXMLDocument\fP *document)"
.br
.ti -1c
.RI "const \fBScXMLDocument\fP * \fBgetDescription\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBsetSessionId\fP (const \fBSbName\fP &sessionid)"
.br
.ti -1c
.RI "const \fBSbName\fP & \fBgetSessionId\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBinitialize\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBisActive\fP (void) const"
.br
.ti -1c
.RI "virtual SbBool \fBisFinished\fP (void) const"
.br
.ti -1c
.RI "virtual \fBint\fP \fBgetNumActiveStates\fP (void) const"
.br
.ti -1c
.RI "virtual const \fBScXMLElt\fP * \fBgetActiveState\fP (\fBint\fP idx) const"
.br
.ti -1c
.RI "virtual void \fBaddDeleteCallback\fP (\fBScXMLStateMachineDeleteCB\fP *callback, void *userdata)"
.br
.ti -1c
.RI "virtual void \fBremoveDeleteCallback\fP (\fBScXMLStateMachineDeleteCB\fP *callback, void *userdata)"
.br
.ti -1c
.RI "virtual void \fBaddStateChangeCallback\fP (\fBScXMLStateChangeCB\fP *callback, void *userdata)"
.br
.ti -1c
.RI "virtual void \fBremoveStateChangeCallback\fP (\fBScXMLStateChangeCB\fP *callback, void *userdata)"
.br
.ti -1c
.RI "virtual void \fBsetVariable\fP (const char *name, const char *value)"
.br
.ti -1c
.RI "virtual const char * \fBgetVariable\fP (const char *name) const"
.br
.ti -1c
.RI "virtual void \fBsetLogLevel\fP (\fBint\fP loglevel)"
.br
.ti -1c
.RI "\fBint\fP \fBgetLogLevel\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBsetEvaluator\fP (\fBScXMLEvaluator\fP *evaluator)"
.br
.ti -1c
.RI "\fBScXMLEvaluator\fP * \fBgetEvaluator\fP (void) const"
.br
.ti -1c
.RI "SbBool \fBisModuleEnabled\fP (const char *modulename) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetNumEnabledModules\fP (void) const"
.br
.ti -1c
.RI "const char * \fBgetEnabledModuleName\fP (\fBint\fP idx) const"
.br
.ti -1c
.RI "void \fBsetEnabledModulesList\fP (const \fBSbList\fP< const char *> &modulenames)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBcleanClass\fP (void)"
.br
.ti -1c
.RI "static \fBScXMLStateMachine\fP * \fBgetStateMachineForSessionId\fP (const \fBSbName\fP &sessionid)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual SbBool \fBprocessOneEvent\fP (const \fBScXMLEvent\fP *event)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Manager for processing events and setting states in SCXML structures\&. 


.PP
\fBSince:\fP
.RS 4
Coin 3\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP ScXMLStateMachine::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSoBase::getTypeId() const\fP 
.RE
.PP

.PP
Implements \fBScXMLEventTarget\fP\&.
.PP
Reimplemented in \fBSoScXMLStateMachine\fP\&.
.SS "void ScXMLStateMachine::setSessionId (const \fBSbName\fP & sessionidarg)\fC [virtual]\fP"
This sets the session identifier for the state machine\&. Using this is optional, since state machines are already assigned unique session ids at construction-time\&. 
.SS "const \fBSbName\fP & ScXMLStateMachine::getSessionId (void) const"
Returns the session identifier string for the state machine\&. 
.SS "void ScXMLStateMachine::initialize (void)\fC [virtual]\fP"
Fire up the engine\&. 
.SS "SbBool ScXMLStateMachine::isActive (void) const\fC [virtual]\fP"
Returns whether the state machine is active or not\&. 
.SS "SbBool ScXMLStateMachine::isFinished (void) const\fC [virtual]\fP"
Returns whether the state machine has run to completion or not\&. 
.SS "\fBint\fP ScXMLStateMachine::getNumActiveStates (void) const\fC [virtual]\fP"
This method returns the current event during event processing, and NULL when not processing events\&.
.PP
Event processing is in special cases done with NULL as the current event, as for instance during state machine initialization\&.
.PP
Returns the number of active states in the state machine\&. This number should currently be 1, but in the future, when <parallel> is implemented, it can be more\&. 
.SS "const \fBScXMLElt\fP * ScXMLStateMachine::getActiveState (\fBint\fP idx) const\fC [virtual]\fP"
Returns the Nth active state\&. 
.SS "void ScXMLStateMachine::addDeleteCallback (\fBScXMLStateMachineDeleteCB\fP * cb, void * userdata)\fC [virtual]\fP"
Registers a callback to be called when the state machine object is being deleted\&. 
.SS "void ScXMLStateMachine::removeDeleteCallback (\fBScXMLStateMachineDeleteCB\fP * cb, void * userdata)\fC [virtual]\fP"
Unregisters a callback to be called when the state machine object is being deleted\&. 
.SS "void ScXMLStateMachine::addStateChangeCallback (\fBScXMLStateChangeCB\fP * callback, void * userdata)\fC [virtual]\fP"
Registers a callback to be called when the state machine exits or enters a state\&. 
.SS "void ScXMLStateMachine::removeStateChangeCallback (\fBScXMLStateChangeCB\fP * callback, void * userdata)\fC [virtual]\fP"
Unregisters a callback to be called when the state machine exits or enters a state\&. 
.SS "SbBool ScXMLStateMachine::processOneEvent (const \fBScXMLEvent\fP * event)\fC [protected]\fP, \fC [virtual]\fP"
Processes one event\&. This is an internal inner event-loop utility function\&. 
.PP
Reimplemented from \fBScXMLEventTarget\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
