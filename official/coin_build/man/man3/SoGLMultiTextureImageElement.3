.TH "SoGLMultiTextureImageElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoGLMultiTextureImageElement \- The \fBSoGLMultiTextureImageElement\fP is used to control the current GL texture for texture units\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoGLMultiTextureImageElement\&.h>\fP
.PP
Inherits \fBSoMultiTextureImageElement\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBGLUnitData\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "virtual void \fBpush\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual void \fBpop\fP (\fBSoState\fP *state, const \fBSoElement\fP *prevTopElement)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, \fBSoGLImage\fP *image, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static void \fBrestore\fP (\fBSoState\fP *state, const \fBint\fP unit)"
.br
.ti -1c
.RI "static \fBSoGLImage\fP * \fBget\fP (\fBSoState\fP *state, const \fBint\fP unit, Model &model, \fBSbColor\fP &blendcolor)"
.br
.ti -1c
.RI "static SbBool \fBhasTransparency\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, \fBSoGLImage\fP *image, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static \fBSoGLImage\fP * \fBget\fP (\fBSoState\fP *state, Model &model, \fBSbColor\fP &blendcolor)"
.br
.ti -1c
.RI "static int32_t \fBgetMaxGLTextureSize\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoGLMultiTextureImageElement\fP ()"
.br
.ti -1c
.RI "virtual SbBool \fBhasTransparency\fP (const \fBint\fP unit=0) const"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoGLMultiTextureImageElement\fP is used to control the current GL texture for texture units\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoGLMultiTextureImageElement::~SoGLMultiTextureImageElement (void)\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoGLMultiTextureImageElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoGLMultiTextureImageElement::initClass (void)\fC [static]\fP"
This static method initializes static data in the \fBSoGLMultiTextureImageElement\fP class\&. 
.SS "void SoGLMultiTextureImageElement::push (\fBSoState\fP * state)\fC [virtual]\fP"
This method is called every time a new element is required in one of the stacks\&. This happens when a writable element is requested, using \fBSoState::getElement()\fP or indirectly \fBSoElement::getElement()\fP, and the depth of the current element is less than the state depth\&.
.PP
Override this method if your element needs to copy data from the previous top of stack\&. The \fBpush()\fP method is called on the new element, and the previous element can be found using \fBSoElement::getNextInStack()\fP\&. 
.PP
Reimplemented from \fBSoMultiTextureImageElement\fP\&.
.SS "void SoGLMultiTextureImageElement::pop (\fBSoState\fP * state, const \fBSoElement\fP * prevTopElement)\fC [virtual]\fP"
This method is callled when the state is popped, and the depth of the element is bigger than the current state depth\&. \fBpop()\fP is called on the new top of stack, and a pointer to the previous top of stack is passed in \fIprevTopElement\fP\&.
.PP
Override this method if you need to copy some state information from the previous top of stack\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.SS "void SoGLMultiTextureImageElement::set (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, \fBSoGLImage\fP * image, const Model model, const \fBSbColor\fP & blendColor)\fC [static]\fP"
Sets the current texture\&. Id \fIdidapply\fP is TRUE, it is assumed that the texture image already is the current GL texture\&. Do not use this feature unless you know what you're doing\&. 
.SS "SbBool SoGLMultiTextureImageElement::hasTransparency (\fBSoState\fP * state)\fC [static]\fP"
Returns TRUE if any of the images have at least one transparent pixel\&.
.PP
\fBSince:\fP
.RS 4
Coin 3\&.1 
.RE
.PP

.SS "SbBool SoGLMultiTextureImageElement::hasTransparency (const \fBint\fP unit = \fC0\fP) const\fC [protected]\fP, \fC [virtual]\fP"
Called by \fBcontainsTransparency()\fP\&. Returns \fITRUE\fP if image data has transparency\&. Default method does a very poor job of detecting this, since it returns \fITRUE\fP when the number of components are 2 or
.IP "4." 4
Override whenever it is important to know this (SoGLTextureImageElement overrides it to avoid transparency handling where possible)\&. 
.PP

.PP
Reimplemented from \fBSoMultiTextureImageElement\fP\&.
.SS "int32_t SoGLMultiTextureImageElement::getMaxGLTextureSize (void)\fC [static]\fP"
The size returned by this function will just be a very coarse estimate as it only uses the more or less obsoleted technique of calling glGetIntegerv(GL_MAX_TEXTURE_SIZE)\&.
.PP
For a better estimate, use SoGLTextureImageElement::isTextureSizeLegal()\&.
.PP
Note that this function needs an OpenGL context to be made current for it to work\&. Without that, you will most likely get a faulty return value or even a crash\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
