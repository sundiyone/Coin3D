.TH "SoWriteAction" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoWriteAction \- The \fBSoWriteAction\fP class writes a scene graph to file\&.
.PP
When applied to a scene, this action writes its contents to the stream contained within an \fBSoOutput\fP instance\&. This can be a file, a memory buffer or a system filehandle like \fCstdout\fP, for instance\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/actions/SoWriteAction\&.h>\fP
.PP
Inherits \fBSoAction\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.ti -1c
.RI "\fBSoWriteAction\fP (void)"
.br
.ti -1c
.RI "\fBSoWriteAction\fP (\fBSoOutput\fP *out)"
.br
.ti -1c
.RI "virtual \fB~SoWriteAction\fP (void)"
.br
.ti -1c
.RI "\fBSoOutput\fP * \fBgetOutput\fP (void) const"
.br
.ti -1c
.RI "void \fBcontinueToApply\fP (\fBSoNode\fP *node)"
.br
.ti -1c
.RI "void \fBcontinueToApply\fP (\fBSoPath\fP *path)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBaddMethod\fP (const \fBSoType\fP type, \fBSoActionMethod\fP method)"
.br
.ti -1c
.RI "static void \fBenableElement\fP (const \fBSoType\fP type, const \fBint\fP stackindex)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoEnabledElementsList\fP & \fBgetEnabledElements\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBbeginTraversal\fP (\fBSoNode\fP *node)"
.br
.ti -1c
.RI "virtual SbBool \fBshouldCompactPathLists\fP (void) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoEnabledElementsList\fP * \fBgetClassEnabledElements\fP (void)"
.br
.ti -1c
.RI "static \fBSoActionMethodList\fP * \fBgetClassActionMethods\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoWriteAction\fP class writes a scene graph to file\&.
.PP
When applied to a scene, this action writes its contents to the stream contained within an \fBSoOutput\fP instance\&. This can be a file, a memory buffer or a system filehandle like \fCstdout\fP, for instance\&. 

\fIAll\fP information considered part of the scene graph should be written out, including not only nodes, but also the nodes' field values, global fields (at least those with connections inside the scene the action is applied to), engines in the scene, paths, etc\&.
.PP
The scene is written in the Open Inventor file format\&. Files in this format can be parsed into their scene graph structures by using the \fBSoDB::readAll()\fP method (\fBSoDB\fP also contains a few other import methods you can use)\&.
.PP
Here's a complete, stand-alone usage example which shows how to write a scene graph to a memory buffer:
.PP
.PP
.nf
#include <Inventor/SoDB\&.h>
#include <Inventor/actions/SoWriteAction\&.h>
#include <Inventor/nodes/SoCone\&.h>
#include <Inventor/nodes/SoSeparator\&.h>

static char * buffer;
static size_t buffer_size = 0;

static void *
buffer_realloc(void * bufptr, size_t size)
{
  buffer = (char *)realloc(bufptr, size);
  buffer_size = size;
  return buffer;
}

static SbString
buffer_writeaction(SoNode * root)
{
  SoOutput out;
  buffer = (char *)malloc(1024);
  buffer_size = 1024;
  out\&.setBuffer(buffer, buffer_size, buffer_realloc);

  SoWriteAction wa(&out);
  wa\&.apply(root);

  SbString s(buffer);
  free(buffer);
  return s;
}

int
main(int argc, char ** argv)
{
  SoDB::init();

  SoSeparator * root = new SoSeparator;
  root->ref();

  root->addChild(new SoCone);

  SbString s = buffer_writeaction(root);
  (void)fprintf(stdout, "%s\n", s\&.getString());

  root->unref();
  return 0;
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSoOutput\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoWriteAction::SoWriteAction (void)"
Default constructor\&. Output will be written to \fCstdout\fP in ASCII format\&. 
.SS "SoWriteAction::SoWriteAction (\fBSoOutput\fP * out)"
Constructor\&. Output will be written via the \fIout\fP object\&. 
.SS "SoWriteAction::~SoWriteAction (void)\fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoWriteAction::getTypeId (void) const\fC [virtual]\fP"
Returns the type identification of an action derived from a class inheriting \fBSoAction\fP\&. This is used for run-time type checking and 'downward' casting\&.
.PP
Usage example:
.PP
.PP
.nf
void bar(SoAction * action)
{
  if (action->getTypeId() == SoGLRenderAction::getClassTypeId()) {
    // safe downward cast, know the type
    SoGLRenderAction * glrender = (SoGLRenderAction *)action;
  }
  return; // ignore if not renderaction
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new actions: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through Inventor/nodes/SoSubAction\&.h: SO_ACTION_SOURCE, SO_ACTION_INIT_CLASS and SO_ACTION_CONSTRUCTOR\&.
.PP
For more information on writing Coin extensions, see the \fBSoAction\fP class documentation\&.
.PP
Returns the actual type id of an object derived from a class inheriting \fBSoAction\fP\&. Needs to be overridden in \fIall\fP subclasses\&. 
.PP
Implements \fBSoAction\fP\&.
.SS "void SoWriteAction::addMethod (const \fBSoType\fP type, \fBSoActionMethod\fP method)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoWriteAction::enableElement (const \fBSoType\fP type, const \fBint\fP stackindex)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "const \fBSoEnabledElementsList\fP & SoWriteAction::getEnabledElements (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a list of the elements used by action instances of this class upon traversal operations\&. 
.PP
Reimplemented from \fBSoAction\fP\&.
.SS "\fBSoOutput\fP * SoWriteAction::getOutput (void) const"
Returns a pointer to the \fBSoOutput\fP object we're using when writing the scene graph\&. 
.SS "void SoWriteAction::continueToApply (\fBSoNode\fP * node)"
Applies the write method to the subgraph starting at \fInode\fP with the current \fBSoOutput\fP instance, without resetting any of the internal state of the action instance\&.
.PP
This should normally be for internal use only\&. 
.SS "void SoWriteAction::continueToApply (\fBSoPath\fP * path)"
Applies the write method to \fIpath\fP with the current \fBSoOutput\fP instance, without resetting any of the internal state of the action instance\&.
.PP
This should normally be for internal use only\&. 
.SS "void SoWriteAction::beginTraversal (\fBSoNode\fP * node)\fC [protected]\fP, \fC [virtual]\fP"
This virtual method is called from \fBSoAction::apply()\fP, and is the entry point for the actual scenegraph traversal\&.
.PP
It can be overridden to initialize the action at traversal start, for specific initializations in the action subclasses inheriting \fBSoAction\fP\&.
.PP
Default method just calls \fBtraverse()\fP, which any overridden implementation of the method must do too (or call \fBSoAction::beginTraversal()\fP) to trigger the scenegraph traversal\&. 
.PP
Reimplemented from \fBSoAction\fP\&.
.SS "SbBool SoWriteAction::shouldCompactPathLists (void) const\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Compact path lists are not implemented in Coin (yet), but if they are, \fBSoWriteAction\fP should return \fCFALSE\fP here -- it would only be extra overhead for the \fBSoWriteAction\fP to have pathlists compacted before traversal\&.
.PP
Seems like a silly optimization to me, though\&.\&. :^/ 20000306 mortene\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
