.TH "SbSphereProjector" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SbSphereProjector \- The \fBSbSphereProjector\fP class is the abstract base class for mapping to spherical surfaces\&.
.PP
The sphere projectors map 2D points to various surface types based on spherical shapes\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/projectors/SbSphereProjector\&.h>\fP
.PP
Inherits \fBSbProjector\fP\&.
.PP
Inherited by \fBSbSphereSectionProjector\fP, and \fBSbSphereSheetProjector\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSbVec3f\fP \fBprojectAndGetRotation\fP (const \fBSbVec2f\fP &point, \fBSbRotation\fP &rot)"
.br
.ti -1c
.RI "virtual \fBSbRotation\fP \fBgetRotation\fP (const \fBSbVec3f\fP &point1, const \fBSbVec3f\fP &point2)=0"
.br
.ti -1c
.RI "void \fBsetSphere\fP (const \fBSbSphere\fP &sph)"
.br
.ti -1c
.RI "const \fBSbSphere\fP & \fBgetSphere\fP (void) const"
.br
.ti -1c
.RI "void \fBsetOrientToEye\fP (const SbBool orienttoeye)"
.br
.ti -1c
.RI "SbBool \fBisOrientToEye\fP (void) const"
.br
.ti -1c
.RI "void \fBsetFront\fP (const SbBool infront)"
.br
.ti -1c
.RI "SbBool \fBisFront\fP (void) const"
.br
.ti -1c
.RI "SbBool \fBisPointInFront\fP (const \fBSbVec3f\fP &point) const"
.br
.ti -1c
.RI "virtual void \fBsetWorkingSpace\fP (const \fBSbMatrix\fP &space)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSbSphereProjector\fP (const SbBool orienttoeye)"
.br
.ti -1c
.RI "\fBSbSphereProjector\fP (const \fBSbSphere\fP &s, const SbBool orienttoeye)"
.br
.ti -1c
.RI "SbBool \fBintersectSphereFront\fP (const \fBSbLine\fP &l, \fBSbVec3f\fP &result)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "SbBool \fBintersectFront\fP"
.br
.ti -1c
.RI "\fBSbSphere\fP \fBsphere\fP"
.br
.ti -1c
.RI "SbBool \fBorientToEye\fP"
.br
.ti -1c
.RI "SbBool \fBneedSetup\fP"
.br
.ti -1c
.RI "\fBSbVec3f\fP \fBlastPoint\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBSbSphereProjector\fP class is the abstract base class for mapping to spherical surfaces\&.
.PP
The sphere projectors map 2D points to various surface types based on spherical shapes\&. 


.PP
\fBSee also:\fP
.RS 4
\fBSbCylinderProjector\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SbSphereProjector::SbSphereProjector (const SbBool orienttoeye)\fC [protected]\fP"
Default constructor sets up a sphere at the origin with radius 1\&. 
.SS "SbSphereProjector::SbSphereProjector (const \fBSbSphere\fP & s, const SbBool orienttoeye)\fC [protected]\fP"
Constructor taking an explicit \fIsphere\fP projection definition\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSbVec3f\fP SbSphereProjector::projectAndGetRotation (const \fBSbVec2f\fP & point, \fBSbRotation\fP & rot)"
Project the 2D point to a 3D coordinate on the spherical surface, and find the rotation from the last projection to this one\&.
.PP
\fBSee also:\fP
.RS 4
\fBproject()\fP, \fBgetRotation()\fP 
.RE
.PP

.SS "\fBSbRotation\fP SbSphereProjector::getRotation (const \fBSbVec3f\fP & point1, const \fBSbVec3f\fP & point2)\fC [pure virtual]\fP"
Returns rotation on the projection surface which re-orients \fIpoint1\fP to \fIpoint2\fP\&. 
.PP
Implemented in \fBSbSphereSectionProjector\fP, \fBSbSpherePlaneProjector\fP, and \fBSbSphereSheetProjector\fP\&.
.SS "void SbSphereProjector::setSphere (const \fBSbSphere\fP & sph)"
Set \fIsphere\fP to project onto\&. 
.SS "const \fBSbSphere\fP & SbSphereProjector::getSphere (void) const"
Returns projection sphere\&. 
.SS "void SbSphereProjector::setOrientToEye (const SbBool orienttoeye)"
Sets whether or not the projection surface should be oriented towards the eye of the viewer\&. Default is \fCTRUE\fP\&. 
.SS "SbBool SbSphereProjector::isOrientToEye (void) const"
Returns the state of the sphere orientation flag\&. 
.SS "void SbSphereProjector::setFront (const SbBool infront)"
Set whether to intersect with the outside of the sphere (\fIinfront\fP equal to \fCTRUE\fP), or the inside\&. 
.SS "SbBool SbSphereProjector::isFront (void) const"
Returns value of the flag which decides whether to intersect with the outside or inside of the sphere\&. 
.SS "SbBool SbSphereProjector::isPointInFront (const \fBSbVec3f\fP & point) const"
Check if \fIpoint\fP is on the frontside or the backside of the cylinder\&. 
.SS "void SbSphereProjector::setWorkingSpace (const \fBSbMatrix\fP & space)\fC [virtual]\fP"
Sets the matrix used for converting from the projector's coordinate system to the world coordinate system\&. 
.PP
Reimplemented from \fBSbProjector\fP\&.
.SS "SbBool SbSphereProjector::intersectSphereFront (const \fBSbLine\fP & l, \fBSbVec3f\fP & result)\fC [protected]\fP"
Intersect \fIline\fP with the \fBSbSphereProjector::sphere\fP and place the intersection point (if any) in \fIresult\fP\&. Considers \fBsetFront()\fP settings\&.
.PP
Returns \fCTRUE\fP if \fIline\fP actually hits the sphere, \fCFALSE\fP if it doesn't intersect with it\&. 
.SH "Member Data Documentation"
.PP 
.SS "SbSphereProjector::intersectFront\fC [protected]\fP"
Flag which says whether or not we should map to the outside or inside of the sphere surface\&. 
.SS "SbSphereProjector::sphere\fC [protected]\fP"
Projection sphere\&. 
.SS "SbSphereProjector::orientToEye\fC [protected]\fP"
Which direction the spherical surface is oriented\&. 
.SS "SbSphereProjector::needSetup\fC [protected]\fP"
Set to \fCTRUE\fP whenever the projection surface needs to be recalculated according to the setting of the \fBSbSphereProjector::orientToEye\fP flag\&. 
.SS "SbSphereProjector::lastPoint\fC [protected]\fP"
Stores the previously projected 3D point\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
