.TH "SoTexture2" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoTexture2 \- The \fBSoTexture2\fP class is used to map a 2D texture onto subsequent geometry in the scenegraph\&.
.PP
Shape nodes within the scope of \fBSoTexture2\fP nodes in the scenegraph (ie below the same \fBSoSeparator\fP and to the righthand side of the \fBSoTexture2\fP) will have the texture applied according to each shape type's individual characteristics\&. See the documentation of the various shape types (\fBSoFaceSet\fP, \fBSoCube\fP, \fBSoSphere\fP, etc etc) for information about the specifics of how the textures will be applied\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoTexture2\&.h>\fP
.PP
Inherits \fBSoTexture\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBModel\fP { \fBMODULATE\fP = SoMultiTextureImageElement::MODULATE, \fBDECAL\fP = SoMultiTextureImageElement::DECAL, \fBBLEND\fP = SoMultiTextureImageElement::BLEND, \fBREPLACE\fP = SoMultiTextureImageElement::REPLACE }"
.br
.ti -1c
.RI "enum \fBWrap\fP { \fBREPEAT\fP = SoMultiTextureImageElement::REPEAT, \fBCLAMP\fP = SoMultiTextureImageElement::CLAMP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoTexture2\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBrayPick\fP (\fBSoRayPickAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static SbBool \fBreadImage\fP (const \fBSbString\fP &fname, \fBint\fP &w, \fBint\fP &h, \fBint\fP &nc, unsigned char *&bytes)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFString\fP \fBfilename\fP"
.br
.ti -1c
.RI "\fBSoSFImage\fP \fBimage\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapS\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapT\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBmodel\fP"
.br
.ti -1c
.RI "\fBSoSFColor\fP \fBblendColor\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBenableCompressedTexture\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoTexture2\fP ()"
.br
.ti -1c
.RI "virtual SbBool \fBreadInstance\fP (\fBSoInput\fP *in, unsigned short flags)"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.ti -1c
.RI "\fBint\fP \fBgetReadStatus\fP (void)"
.br
.ti -1c
.RI "void \fBsetReadStatus\fP (\fBint\fP s)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoTexture2\fP class is used to map a 2D texture onto subsequent geometry in the scenegraph\&.
.PP
Shape nodes within the scope of \fBSoTexture2\fP nodes in the scenegraph (ie below the same \fBSoSeparator\fP and to the righthand side of the \fBSoTexture2\fP) will have the texture applied according to each shape type's individual characteristics\&. See the documentation of the various shape types (\fBSoFaceSet\fP, \fBSoCube\fP, \fBSoSphere\fP, etc etc) for information about the specifics of how the textures will be applied\&. 

For a simple usage example, see the class documentation for \fBSoSFImage\fP\&.
.PP
One common flaw with many programs that has support for exporting VRML or Inventor files, is that the same texture file is exported several times, but as different nodes\&. This can cause excessive texture memory usage and slow rendering\&. Below is an example program that fixes this by replacing all instances of the same texture with a pointer to the first node:
.PP
.PP
.nf
#include <Inventor/actions/SoSearchAction\&.h>
#include <Inventor/actions/SoWriteAction\&.h>
#include <Inventor/nodes/SoSeparator\&.h>
#include <Inventor/nodes/SoTexture2\&.h>
#include <Inventor/SoDB\&.h>
#include <Inventor/SoInput\&.h>
#include <Inventor/SoOutput\&.h>

int main(int argc, char ** argv)
{
  if (argc < 2) return -1;
  SoDB::init();

  SoInput in;
  if (!in\&.openFile(argv[1])) return -1;

  SoSeparator * root = SoDB::readAll(&in);
  if (!root) return -1;
  root->ref();

  SoSearchAction sa;
  sa\&.setType(SoTexture2::getClassTypeId());
  sa\&.setInterest(SoSearchAction::ALL);
  sa\&.setSearchingAll(TRUE);
  sa\&.apply(root);
  SoPathList & pl = sa\&.getPaths();
  SbDict namedict;

  for (int i = 0; i < pl\&.getLength(); i++) {
    SoFullPath * p = (SoFullPath*) pl[i];
    if (p->getTail()->isOfType(SoTexture2::getClassTypeId())) {
      SoTexture2 * tex = (SoTexture2*) p->getTail();
      if (tex->filename\&.getValue()\&.getLength()) {
        SbName name = tex->filename\&.getValue()\&.getString();
        unsigned long key = (unsigned long) ((void*) name\&.getString());
        void * tmp;
        if (!namedict\&.find(key, tmp)) {
          // new texture\&. just insert into list
          (void) namedict\&.enter(key, tex);
        }
        else if (tmp != (void*) tex) { // replace with node found in dict
          SoGroup * parent = (SoGroup*) p->getNodeFromTail(1);
          int idx = p->getIndexFromTail(0);
          parent->replaceChild(idx, (SoNode*) tmp);
        }
      }
    }
  }
  sa\&.reset();

  // output fixed scene to stdout
  SoOutput out;
  SoWriteAction wa(&out);
  wa\&.apply(root);
  root->unref();
}
.fi
.PP
.PP
When working with Inventor files, one often wants to embed external texture image files into the Inventor files themselves\&. Here's a minimal, stand-alone example which shows how that can be accomplished by calling \fBSoField::touch()\fP on the \fBSoTexture2::image\fP fields before scenegraph export:
.PP
.PP
.nf
#include <Inventor/SoDB\&.h>
#include <Inventor/nodes/SoSeparator\&.h>
#include <Inventor/nodes/SoTexture2\&.h>
#include <Inventor/actions/SoSearchAction\&.h>
#include <Inventor/actions/SoWriteAction\&.h>

int
main(void)
{
  if (argc == 1) {
    fprintf(stderr,"Usage: %s <infile> > outfile\&.iv\n", argv[0]);
    return -1;
  }
  SoDB::init();

  // open the file (don't use stdin) to enable Coin to search for textures
  // relative to the input file\&.
  SoInput in;
  if (!in\&.openFile(argv[1])) {
    return -1;
  }
  SoSeparator * root = SoDB::readAll(&in);
  if (!root) { exit(1); }

  root->ref();

  SoSearchAction searchaction;
  searchaction\&.setType(SoTexture2::getClassTypeId());
  searchaction\&.setSearchingAll(TRUE);
  searchaction\&.setInterest(SoSearchAction::ALL);

  searchaction\&.apply(root);

  const SoPathList & pl = searchaction\&.getPaths();
  for (int i=0; i < pl\&.getLength(); i++) {
    SoFullPath * fp = (SoFullPath *)pl[i];
    SoTexture2 * tex = (SoTexture2 *)fp->getTail();
    assert(tex->getTypeId() == SoTexture2::getClassTypeId());
    tex->image\&.touch();
  }

  SoWriteAction wa;
  wa\&.apply(root);

  root->unref();

  return 0;
}
.fi
.PP
.PP
Run the example by piping the iv-file you want do texture-embedding on from stdin, e\&.g\&. like this:
.PP
.PP
.nf
$ ./test < input.iv
.fi
.PP
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
Texture2 {
    filename ""
    image 0 0 0
    wrapS REPEAT
    wrapT REPEAT
    model MODULATE
    blendColor 0 0 0
    enableCompressedTexture FALSE
}

.fi
.PP
 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoTexture2::Model\fP"
Texture mapping model, for deciding how to 'merge' the texturemap with the object it is mapped onto\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMODULATE \fP\fP
Texture color is multiplied by the polygon color\&. The result will be Phong shaded (if light model is PHONG)\&. 
.TP
\fB\fIDECAL \fP\fP
Texture image overwrites polygon shading\&. Textured pixels will not be Phong shaded\&. Has undefined behaviour for grayscale and grayscale-alpha textures\&. 
.TP
\fB\fIBLEND \fP\fP
This model is normally used with monochrome textures (i\&.e\&. textures with one or two components)\&. The first component, the intensity, is then used to blend between the shaded color of the polygon and the \fBSoTexture2::blendColor\fP\&. 
.TP
\fB\fIREPLACE \fP\fP
Texture image overwrites polygon shading\&. Textured pixels will not be Phong shaded\&. Supports grayscale and grayscale alpha textures\&. This feature requires OpenGL 1\&.1\&. MODULATE will be used if OpenGL version < 1\&.1 is detected\&.
.PP
Please note that using this texture model will make your Inventor files incompatible with older versions of Coin and Inventor\&. You need Coin >= 2\&.2 or TGS Inventor 4\&.0 to load Inventor files that uses the REPLACE texture model\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.2 
.PP
TGS Inventor 4\&.0 
.RE
.PP

.SS "enum \fBSoTexture2::Wrap\fP"
Enumeration of wrapping strategies which can be used when the texturemap doesn't cover the full extent of the geometry\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIREPEAT \fP\fP
Repeat texture when coordinate is not between 0 and 1\&. 
.TP
\fB\fICLAMP \fP\fP
Clamp coordinate between 0 and 1\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoTexture2::SoTexture2 (void)"
Constructor\&. 
.SS "SoTexture2::~SoTexture2 ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. Frees up internal resources used to store texture image data\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoTexture2::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "const \fBSoFieldData\fP * SoTexture2::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture2::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture2::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture2::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture2::rayPick (\fBSoRayPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoRayPickAction\fP\&.
.PP
Checks the ray specification of the \fIaction\fP and tests for intersection with the data of the node\&.
.PP
Nodes influencing relevant state variables for how picking is done also overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "SbBool SoTexture2::readImage (const \fBSbString\fP & fname, \fBint\fP & w, \fBint\fP & h, \fBint\fP & nc, unsigned char *& bytes)\fC [static]\fP"
Not implemented in Coin; should probably not have been public in the original SGI Open Inventor API\&. We'll consider to implement it if requested\&. 
.SS "SbBool SoTexture2::readInstance (\fBSoInput\fP * in, unsigned short flags)\fC [protected]\fP, \fC [virtual]\fP"
This method is mainly intended for internal use during file import operations\&.
.PP
It reads a definition of an instance from the input stream \fIin\fP\&. The input stream state points to the start of a serialized / persistant representation of an instance of this class type\&.
.PP
\fCTRUE\fP or \fCFALSE\fP is returned, depending on if the instantiation and configuration of the new object of this class type went ok or not\&. The import process should be robust and handle corrupted input streams by returning \fCFALSE\fP\&.
.PP
\fIflags\fP is used internally during binary import when reading user extension nodes, group nodes or engines\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoTexture2::notify (\fBSoNotList\fP * l)\fC [protected]\fP, \fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "\fBint\fP SoTexture2::getReadStatus (void)\fC [protected]\fP"
Returns read status\&. 1 for success, 0 for failure\&. 
.SS "void SoTexture2::setReadStatus (\fBint\fP s)\fC [protected]\fP"
Sets read status\&. 
.PP
\fBSee also:\fP
.RS 4
\fBgetReadStatus()\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFString\fP SoTexture2::filename"
Texture filename, referring to a file on disk in a supported image bitmap format\&.
.PP
By default contains an empty string, which means the texture will be fetched from \fBSoTexture2::image\fP and not from disk\&. (Specify either this field or use \fBSoTexture2::image\fP, not both\&.)
.PP
FIXME: Section about simage is outdated\&.
.PP
For reading texture image files from disk, Coin uses the 'simage' library from Kongsberg Oil & Gas Technologies\&. This library must be installed for it to be possible to load any image files at all\&.
.PP
The set of image formats you can actually read with the simage library depends on how the simage library was built, as simage is again dependent on a few other low-level file import/export libraries (for instance for JPEG, GIF, TIFF and PNG support)\&. To make sure all wanted formats are supported, you should build the simage library yourself\&.
.PP
The set of image formats guaranteed to be supported by simage is Targa (\&.tga), PIC (\&.pic), SGI RGB (\&.rgb, \&.bw) and XWD (\&.xwd)\&.
.PP
For more information about the simage library, including download and build instructions, see the \fCCoin www-pages\fP\&. 
.SS "\fBSoSFImage\fP SoTexture2::image"
Inline image data\&. Defaults to contain an empty image\&.
.PP
See documentation of the \fBSoSFImage\fP class for a very detailed description of how the format specification for the image data is layed out, and what different image formats for color textures, semi-transparent textures, grayscale textures, etc etc, are supported\&. 
.SS "\fBSoSFEnum\fP SoTexture2::wrapS"
Wrapping strategy for the S coordinate when the texturemap is narrower than the object to map onto\&.
.PP
Default value is \fBSoTexture2::REPEAT\fP\&. 
.SS "\fBSoSFEnum\fP SoTexture2::wrapT"
Wrapping strategy for the T coordinate when the texturemap is shorter than the object to map onto\&.
.PP
Default value is \fBSoTexture2::REPEAT\fP\&. 
.SS "\fBSoSFEnum\fP SoTexture2::model"
Texturemapping model for how the texturemap is 'merged' with the polygon primitives it is applied to\&. Default value is \fBSoTexture2::MODULATE\fP\&. 
.SS "\fBSoSFColor\fP SoTexture2::blendColor"
Blend color\&. Used when \fBSoTexture2::model\fP is \fBSoTexture2::BLEND\fP\&.
.PP
Default color value is [0, 0, 0], black, which means no contribution to the blending is made\&. 
.SS "\fBSoSFBool\fP SoTexture2::enableCompressedTexture"
Hint to Coin that compressed textures should be used if this is supported by the graphics hardware and OpenGL drivers\&. Using compressed textures usually reduces texture memory usage for a texture by 4-6 times\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.4\&.2 
.PP
TGS Inventor 4\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
