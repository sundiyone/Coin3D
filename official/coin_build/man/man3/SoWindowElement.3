.TH "SoWindowElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoWindowElement \- The \fBSoWindowElement\fP class is used to store current window attributes\&.
.PP
In Coin, this element is not API-compatible with SGI Inventor, since it contains platform specific stuff, which we want to avoid\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoWindowElement\&.h>\fP
.PP
Inherits \fBSoElement\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual void \fBpush\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual void \fBpop\fP (\fBSoState\fP *state, const \fBSoElement\fP *prevTopElement)"
.br
.ti -1c
.RI "virtual SbBool \fBmatches\fP (const \fBSoElement\fP *element) const"
.br
.ti -1c
.RI "virtual \fBSoElement\fP * \fBcopyMatchInfo\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *state, void *\fBwindow\fP, void *\fBcontext\fP, void *\fBdisplay\fP, \fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "static void \fBget\fP (\fBSoState\fP *state, void *&\fBwindow\fP, void *&\fBcontext\fP, void *&\fBdisplay\fP, \fBSoGLRenderAction\fP *&action)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoWindowElement\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "void * \fBwindow\fP"
.br
.ti -1c
.RI "void * \fBcontext\fP"
.br
.ti -1c
.RI "void * \fBdisplay\fP"
.br
.ti -1c
.RI "\fBSoGLRenderAction\fP * \fBglRenderAction\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoWindowElement\fP class is used to store current window attributes\&.
.PP
In Coin, this element is not API-compatible with SGI Inventor, since it contains platform specific stuff, which we want to avoid\&. 

Instead of the platform specific types we use void pointers\&. We're sorry for any inconvenience this might cause people using this element\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoWindowElement::~SoWindowElement (void)\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoWindowElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoWindowElement::init (\fBSoState\fP * state)\fC [virtual]\fP"
This function initializes the element type in the given \fBSoState\fP\&. It is called for the first element of each enabled element type in \fBSoState\fP objects\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.SS "void SoWindowElement::push (\fBSoState\fP * state)\fC [virtual]\fP"
This method is called every time a new element is required in one of the stacks\&. This happens when a writable element is requested, using \fBSoState::getElement()\fP or indirectly \fBSoElement::getElement()\fP, and the depth of the current element is less than the state depth\&.
.PP
Override this method if your element needs to copy data from the previous top of stack\&. The \fBpush()\fP method is called on the new element, and the previous element can be found using \fBSoElement::getNextInStack()\fP\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.SS "void SoWindowElement::pop (\fBSoState\fP * state, const \fBSoElement\fP * prevTopElement)\fC [virtual]\fP"
This method is callled when the state is popped, and the depth of the element is bigger than the current state depth\&. \fBpop()\fP is called on the new top of stack, and a pointer to the previous top of stack is passed in \fIprevTopElement\fP\&.
.PP
Override this method if you need to copy some state information from the previous top of stack\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.SS "SbBool SoWindowElement::matches (const \fBSoElement\fP * element) const\fC [virtual]\fP"
This function returns \fCTRUE\fP is the element matches another element (of the same class), with respect to cache validity\&.
.PP
If the application programmer's extension element has a \fBmatches()\fP function, it should also have a \fBcopyMatchInfo()\fP function\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "\fBSoElement\fP * SoWindowElement::copyMatchInfo (void) const\fC [virtual]\fP"
This function creates a copy of the element that contains enough information to enable the \fBmatches()\fP function to work\&.
.PP
Used to help with scenegraph traversal caching operations\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "void SoWindowElement::set (\fBSoState\fP * state, void * window, void * context, void * display, \fBSoGLRenderAction\fP * action)\fC [static]\fP"
Sets data for this element\&. 
.SS "void SoWindowElement::get (\fBSoState\fP * state, void *& window, void *& context, void *& display, \fBSoGLRenderAction\fP *& action)\fC [static]\fP"
Returns data for this element\&. 
.SH "Member Data Documentation"
.PP 
.SS "SoWindowElement::window\fC [protected]\fP"
The window id\&. 
.SS "SoWindowElement::context\fC [protected]\fP"
The current context\&. 
.SS "SoWindowElement::display\fC [protected]\fP"
The current display\&. 
.SS "SoWindowElement::glRenderAction\fC [protected]\fP"
The current render action\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
