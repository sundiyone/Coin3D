.TH "SoVRMLTouchSensor" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoVRMLTouchSensor \- The \fBSoVRMLTouchSensor\fP class tracks to pointer position and sends events based on user interaction\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/VRMLnodes/SoVRMLTouchSensor\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoVRMLTouchSensor\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBaffectsState\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBhandleEvent\fP (\fBSoHandleEventAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFBool\fP \fBenabled\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBhitNormal_changed\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBhitPoint_changed\fP"
.br
.ti -1c
.RI "\fBSoSFVec2f\fP \fBhitTexCoord_changed\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBisActive\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBisOver\fP"
.br
.ti -1c
.RI "\fBSoSFTime\fP \fBtouchTime\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoVRMLTouchSensor\fP ()"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoVRMLTouchSensor\fP class tracks to pointer position and sends events based on user interaction\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP 


.PP
.nf
TouchSensor {
  exposedField SFBool  enabled TRUE
  eventOut     SFVec3f hitNormal_changed
  eventOut     SFVec3f hitPoint_changed
  eventOut     SFVec2f hitTexCoord_changed
  eventOut     SFBool  isActive
  eventOut     SFBool  isOver
  eventOut     SFTime  touchTime
}

.fi
.PP
.PP
A TouchSensor node tracks the location and state of the pointing device and detects when the user points at geometry contained by the TouchSensor node's parent group\&. A TouchSensor node can be enabled or disabled by sending it an enabled event with a value of TRUE or FALSE\&. If the TouchSensor node is disabled, it does not track user input or send events\&.
.PP
The TouchSensor generates events when the pointing device points toward any geometry nodes that are descendants of the TouchSensor's parent group\&. See 4\&.6\&.7\&.5, Activating and manipulating sensors (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.7.5), for more details on using the pointing device to activate the TouchSensor\&.
.PP
The \fIisOver\fP eventOut reflects the state of the pointing device with regard to whether it is pointing towards the TouchSensor node's geometry or not\&. When the pointing device changes state from a position such that its bearing does not intersect any of the TouchSensor node's geometry to one in which it does intersect geometry, an isOver TRUE event is generated\&. When the pointing device moves from a position such that its bearing intersects geometry to one in which it no longer intersects the geometry, or some other geometry is obstructing the TouchSensor node's geometry, an isOver FALSE event is generated\&. These events are generated only when the pointing device has moved and changed `over' state\&. Events are not generated if the geometry itself is animating and moving underneath the pointing device\&.
.PP
As the user moves the bearing over the TouchSensor node's geometry, the point of intersection (if any) between the bearing and the geometry is determined\&. Each movement of the pointing device, while isOver is TRUE, generates hitPoint_changed, hitNormal_changed and hitTexCoord_changed events\&. hitPoint_changed events contain the 3D point on the surface of the underlying geometry, given in the TouchSensor node's coordinate system\&. hitNormal_changed events contain the surface normal vector at the hitPoint\&. hitTexCoord_changed events contain the texture coordinates of that surface at the hitPoint\&. The values of hitTexCoord_changed and hitNormal_changed events are computed as appropriate for the associated shape\&.
.PP
If isOver is TRUE, the user may activate the pointing device to cause the TouchSensor node to generate isActive events (e\&.g\&., by pressing the primary mouse button)\&. When the TouchSensor node generates an isActive TRUE event, it grabs all further motion events from the pointing device until it is released and generates an isActive FALSE event (other pointing-device sensors will not generate events during this time)\&. Motion of the pointing device while isActive is TRUE is termed a 'drag\&.' If a 2D pointing device is in use, isActive events reflect the state of the primary button associated with the device (i\&.e\&., isActive is TRUE when the primary button is pressed and FALSE when it is released)\&. If a 3D pointing device is in use, isActive events will typically reflect whether the pointing device is within (or in contact with) the TouchSensor node's geometry\&.
.PP
The eventOut field touchTime is generated when all three of the following conditions are true:
.PP
.IP "\(bu" 2
The pointing device was pointing towards the geometry when it was initially activated (isActive is TRUE)\&.
.IP "\(bu" 2
The pointing device is currently pointing towards the geometry (isOver is TRUE)\&.
.IP "\(bu" 2
The pointing device is deactivated (isActive FALSE event is also generated)\&.
.PP
.PP
More information about this behaviour is described in 4\&.6\&.7\&.3, Pointing-device sensors (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.7.3), 4\&.6\&.7\&.4, Drag sensors (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.7.4), and 4\&.6\&.7\&.5, Activating and manipulating sensors (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.7.5)\&.
.PP
\fBThe rest of this class documentation is \fInot\fP from the VRML97 standards documentation, but was written specifically for the Coin3D API documentation\&.\fP
.PP
Here is a small example which demonstrates use of the \fBSoVRMLTouchSensor\fP\&. Click on the \fBSoVRMLSphere\fP to turn the \fBSoVRMLPointLight\fP on:
.PP
.PP
.nf
#VRML V2\&.0 utf8

Group {
   children [
      Transform {
         children [
            DEF light PointLight {
               intensity 1
               on FALSE
            }

            Transform {
               translation -2 0 -2
               children [
                  Shape {
                     appearance Appearance {
                        material Material {
                           diffuseColor 1 0 1
                           specularColor 1 1 1
                           shininess 0\&.9
                        }
                     }
                     geometry Sphere { }
                  }
                  DEF touchsensor TouchSensor { }
               ]
            }
         ]
      }
   ]
   ROUTE touchsensor\&.isActive TO light\&.set_on
}
.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoVRMLTouchSensor::SoVRMLTouchSensor (void)"
Constructor\&. 
.SS "SoVRMLTouchSensor::~SoVRMLTouchSensor ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoVRMLTouchSensor::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoVRMLTouchSensor::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "SbBool SoVRMLTouchSensor::affectsState (void) const\fC [virtual]\fP"
Returns \fCTRUE\fP if the node could have any effect on the state during traversal\&.
.PP
If it returns \fCFALSE\fP, no data in the traversal-state will change from the pre-traversal state to the post-traversal state\&. The \fBSoSeparator\fP node will for instance return \fCFALSE\fP, as it pushes and pops the state before and after traversal of its children\&. All \fBSoShape\fP nodes will also return \fCFALSE\fP, as just pushing out geometry data to the rendering engine won't affect the actual rendering state\&.
.PP
The default method returns \fCTRUE\fP, on a 'better safe than sorry' philosophy\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLTouchSensor::handleEvent (\fBSoHandleEventAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoHandleEventAction\fP\&.
.PP
Inspects the event data from \fIaction\fP, and processes it if it is something which this node should react to\&.
.PP
Nodes influencing relevant state variables for how event handling is done also overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLTouchSensor::notify (\fBSoNotList\fP * l)\fC [protected]\fP, \fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFBool\fP SoVRMLTouchSensor::enabled"
TRUE is enabled\&. Default value is TRUE\&. 
.SS "\fBSoSFVec3f\fP SoVRMLTouchSensor::hitNormal_changed"
An eventOut that is sent when the pointer is over some child geometry\&. Contains the object space normal\&. 
.SS "\fBSoSFVec3f\fP SoVRMLTouchSensor::hitPoint_changed"
An eventOut that is sent when the pointer is over some child geometry\&. Contains the object space point\&. 
.SS "\fBSoSFVec2f\fP SoVRMLTouchSensor::hitTexCoord_changed"
An eventOut that is sent when the pointer is over some child geometry\&. Contains the object space texture coordinates\&. 
.SS "\fBSoSFBool\fP SoVRMLTouchSensor::isActive"
An event out that is sent when the active state changes\&. The sensor goes active when the user clicks on some child, and is inactive again when the mouse button is release\&. 
.SS "\fBSoSFBool\fP SoVRMLTouchSensor::isOver"
An event out that is sent when the pointer is moved onto or away from a child object\&. 
.SS "\fBSoSFTime\fP SoVRMLTouchSensor::touchTime"
An event out that is generated when the sensor is active and is currently pointing on some child geometry\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
