.TH "SoGLCacheContextElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoGLCacheContextElement \- The \fBSoGLCacheContextElement\fP class handles the OpenGL cache for a context\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoGLCacheContextElement\&.h>\fP
.PP
Inherits \fBSoElement\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum { \fBDO_AUTO_CACHE\fP = 1, \fBDONT_AUTO_CACHE\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual SbBool \fBmatches\fP (const \fBSoElement\fP *elt) const"
.br
.ti -1c
.RI "virtual \fBSoElement\fP * \fBcopyMatchInfo\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *state, \fBint\fP context, SbBool twopasstransparency, SbBool remoterendering)"
.br
.ti -1c
.RI "static \fBint\fP \fBget\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetExtID\fP (const char *str)"
.br
.ti -1c
.RI "static void \fBgetOpenGLVersion\fP (\fBSoState\fP *state, \fBint\fP &major, \fBint\fP &minor)"
.br
.ti -1c
.RI "static SbBool \fBextSupported\fP (\fBSoState\fP *state, \fBint\fP extid)"
.br
.ti -1c
.RI "static SbBool \fBareMipMapsFast\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static void \fBshouldAutoCache\fP (\fBSoState\fP *state, \fBint\fP bits)"
.br
.ti -1c
.RI "static void \fBsetAutoCacheBits\fP (\fBSoState\fP *state, \fBint\fP bits)"
.br
.ti -1c
.RI "static \fBint\fP \fBresetAutoCacheBits\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static SbBool \fBgetIsRemoteRendering\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static uint32_t \fBgetUniqueCacheContext\fP (void)"
.br
.ti -1c
.RI "static void \fBscheduleDeleteCallback\fP (const uint32_t contextid, SoScheduleDeleteCB *cb, void *closure)"
.br
.ti -1c
.RI "static void \fBincNumShapes\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetNumShapes\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static void \fBincNumSeparators\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetNumSeparators\fP (\fBSoState\fP *state)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoGLCacheContextElement\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoGLCacheContextElement\fP class handles the OpenGL cache for a context\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoGLCacheContextElement::~SoGLCacheContextElement ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoGLCacheContextElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoGLCacheContextElement::init (\fBSoState\fP * state)\fC [virtual]\fP"
This function initializes the element type in the given \fBSoState\fP\&. It is called for the first element of each enabled element type in \fBSoState\fP objects\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.SS "SbBool SoGLCacheContextElement::matches (const \fBSoElement\fP * element) const\fC [virtual]\fP"
This function returns \fCTRUE\fP is the element matches another element (of the same class), with respect to cache validity\&.
.PP
If the application programmer's extension element has a \fBmatches()\fP function, it should also have a \fBcopyMatchInfo()\fP function\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "\fBSoElement\fP * SoGLCacheContextElement::copyMatchInfo (void) const\fC [virtual]\fP"
This function creates a copy of the element that contains enough information to enable the \fBmatches()\fP function to work\&.
.PP
Used to help with scenegraph traversal caching operations\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "void SoGLCacheContextElement::set (\fBSoState\fP * state, \fBint\fP context, SbBool twopasstransparency, SbBool remoterendering)\fC [static]\fP"
Sets data for context\&. 
.SS "\fBint\fP SoGLCacheContextElement::get (\fBSoState\fP * state)\fC [static]\fP"
Returns context id\&.
.PP
Note that the signature on this function is slightly wrong: the function should really return an \fCuint32_t\fP, like \fBSoGLRenderAction::getCacheContext()\fP does\&. It is kept like this for compatibility reasons\&.
.PP
The value returned will always be a positive integer\&. 
.SS "\fBint\fP SoGLCacheContextElement::getExtID (const char * str)\fC [static]\fP"
Returns an extension id based on the GL extension string\&. The extension id can be used to quickly test for the availability of an extension later, using \fBextSupported()\fP\&. 
.SS "void SoGLCacheContextElement::getOpenGLVersion (\fBSoState\fP * state, \fBint\fP & major, \fBint\fP & minor)\fC [static]\fP"
Returns the OpenGL version for the current context\&. This method is an extension versus the Open Inventor API\&. 
.SS "SbBool SoGLCacheContextElement::extSupported (\fBSoState\fP * state, \fBint\fP extid)\fC [static]\fP"
Returns TRUE if the extension is supported for the current context\&. \fIextid\fP must be an id returned from getExtId()\&. The test result is cached so this method is pretty fast and can be used run-time\&. 
.SS "SbBool SoGLCacheContextElement::areMipMapsFast (\fBSoState\fP * state)\fC [static]\fP"
Returns if mipmapped textures are fast for the current context\&. In Coin, we just return TRUE for the moment\&. 
.SS "void SoGLCacheContextElement::shouldAutoCache (\fBSoState\fP * state, \fBint\fP bits)\fC [static]\fP"
Update auto cache bits\&. 
.SS "void SoGLCacheContextElement::setAutoCacheBits (\fBSoState\fP * state, \fBint\fP bits)\fC [static]\fP"
Sets the auto cache bits\&. 
.SS "\fBint\fP SoGLCacheContextElement::resetAutoCacheBits (\fBSoState\fP * state)\fC [static]\fP"
Not properly supported yet\&. 
.SS "SbBool SoGLCacheContextElement::getIsRemoteRendering (\fBSoState\fP * state)\fC [static]\fP"
Returns \fCTRUE\fP if rendering is indirect / remote\&. 
.SS "uint32_t SoGLCacheContextElement::getUniqueCacheContext (void)\fC [static]\fP"
Returns an unique cache context id, in the range [1, ->\&.
.PP
If you render the same scene graph into two or different cache contexts, and you've not using display list and texture object sharing among contexts, the cache context id need to be unique for rendering to work\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoGLRenderAction::setCacheContext()\fP 
.RE
.PP

.SS "void SoGLCacheContextElement::scheduleDeleteCallback (const uint32_t contextid, SoScheduleDeleteCB * cb, void * closure)\fC [static]\fP"
Can be used to receive a callback the next time Coin knows that the context (specified by \fIcontextid\fP) is the current OpenGL context\&.
.PP
This function can be used to free OpenGL resources for a context\&.
.PP
Note that the callback will be invoked only once, and then removed from the internal list of scheduled callbacks\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.3 
.RE
.PP

.SS "void SoGLCacheContextElement::incNumShapes (\fBSoState\fP * state)\fC [static]\fP"
Increment the number of shapes in a open cache\&.
.PP
\fBSince:\fP
.RS 4
Coin 3\&.0 
.RE
.PP

.SS "\fBint\fP SoGLCacheContextElement::getNumShapes (\fBSoState\fP * state)\fC [static]\fP"
Returns the number of shapes in an open cache\&.
.PP
\fBSince:\fP
.RS 4
Coin 3\&.0 
.RE
.PP

.SS "void SoGLCacheContextElement::incNumSeparators (\fBSoState\fP * state)\fC [static]\fP"
Increment the number of separators in an open cache\&.
.PP
\fBSince:\fP
.RS 4
Coin 3\&.0 
.RE
.PP

.SS "\fBint\fP SoGLCacheContextElement::getNumSeparators (\fBSoState\fP * state)\fC [static]\fP"
Returns the number of separators in an open cache\&.
.PP
\fBSince:\fP
.RS 4
Coin 3\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
