.TH "SoMultiTextureCoordinateElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoMultiTextureCoordinateElement \- The \fBSoMultiTextureCoordinateElement\fP class is yet to be documented\&.
.PP
FIXME: write doc\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoMultiTextureCoordinateElement\&.h>\fP
.PP
Inherits \fBSoElement\fP\&.
.PP
Inherited by \fBSoGLMultiTextureCoordinateElement\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBUnitData\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCoordType\fP { \fBNONE\fP = 0, \fBTEXGEN\fP = 0, \fBEXPLICIT\fP = 1, \fBFUNCTION\fP = 2, \fBDEFAULT\fP = 3 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "virtual CoordType \fBgetType\fP (const \fBint\fP unit=0) const"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "const \fBSbVec4f\fP & \fBget\fP (const \fBint\fP unit, const \fBSbVec3f\fP &point, const \fBSbVec3f\fP &normal) const"
.br
.ti -1c
.RI "int32_t \fBgetNum\fP (const \fBint\fP unit=0) const"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "SbBool \fBis2D\fP (const \fBint\fP unit=0) const"
.br
.RI "FIXME: write doc\&. (for backwards compability\&. Use \fBgetDimension()\fP instead)\&. "
.ti -1c
.RI "int32_t \fBgetDimension\fP (const \fBint\fP unit=0) const"
.br
.ti -1c
.RI "const \fBSbVec2f\fP & \fBget2\fP (const \fBint\fP unit, const \fBint\fP index) const"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "const \fBSbVec3f\fP & \fBget3\fP (const \fBint\fP unit, const \fBint\fP index) const"
.br
.ti -1c
.RI "const \fBSbVec4f\fP & \fBget4\fP (const \fBint\fP unit, const \fBint\fP index) const"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "const \fBSbVec2f\fP * \fBgetArrayPtr2\fP (const \fBint\fP unit=0) const"
.br
.ti -1c
.RI "const \fBSbVec3f\fP * \fBgetArrayPtr3\fP (const \fBint\fP unit=0) const"
.br
.ti -1c
.RI "const \fBSbVec4f\fP * \fBgetArrayPtr4\fP (const \fBint\fP unit=0) const"
.br
.ti -1c
.RI "virtual void \fBpush\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual SbBool \fBmatches\fP (const \fBSoElement\fP *elem) const"
.br
.ti -1c
.RI "\fBSoElement\fP * \fBcopyMatchInfo\fP (void) const"
.br
.ti -1c
.RI "const \fBSbVec4f\fP & \fBget\fP (const \fBSbVec3f\fP &point, const \fBSbVec3f\fP &normal) const"
.br
.ti -1c
.RI "const \fBSbVec2f\fP & \fBget2\fP (const \fBint\fP index) const"
.br
.ti -1c
.RI "const \fBSbVec3f\fP & \fBget3\fP (const \fBint\fP index) const"
.br
.ti -1c
.RI "const \fBSbVec4f\fP & \fBget4\fP (const \fBint\fP index) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBsetDefault\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit=0)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static void \fBsetFunction\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, SoTextureCoordinateFunctionCB *const func, void *const userdata)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static void \fBset2\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const int32_t numCoords, const \fBSbVec2f\fP *const coords)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static void \fBset3\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const int32_t numCoords, const \fBSbVec3f\fP *const coords)"
.br
.ti -1c
.RI "static void \fBset4\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const int32_t numCoords, const \fBSbVec4f\fP *const coords)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static CoordType \fBgetType\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static const \fBSoMultiTextureCoordinateElement\fP * \fBgetInstance\fP (\fBSoState\fP *const state)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static void \fBsetFunction\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, SoTextureCoordinateFunctionCB *const func, void *const userdata)"
.br
.ti -1c
.RI "static void \fBset2\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const int32_t numCoords, const \fBSbVec2f\fP *const coords)"
.br
.ti -1c
.RI "static void \fBset3\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const int32_t numCoords, const \fBSbVec3f\fP *const coords)"
.br
.ti -1c
.RI "static void \fBset4\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const int32_t numCoords, const \fBSbVec4f\fP *const coords)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSoMultiTextureCoordinateElement\fP (void)"
.br
.ti -1c
.RI "virtual \fB~SoMultiTextureCoordinateElement\fP ()"
.br
.ti -1c
.RI "\fBint\fP \fBgetMaxUnits\fP () const"
.br
.ti -1c
.RI "\fBUnitData\fP & \fBgetUnitData\fP (const \fBint\fP unit)"
.br
.ti -1c
.RI "const \fBUnitData\fP & \fBgetUnitData\fP (const \fBint\fP unit) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSbVec2f\fP \fBconvert2\fP"
.br
.ti -1c
.RI "\fBSbVec3f\fP \fBconvert3\fP"
.br
.ti -1c
.RI "\fBSbVec4f\fP \fBconvert4\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoMultiTextureCoordinateElement\fP class is yet to be documented\&.
.PP
FIXME: write doc\&. 

Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.2 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoMultiTextureCoordinateElement::SoMultiTextureCoordinateElement (void)\fC [protected]\fP"
The constructor\&. 
.SS "SoMultiTextureCoordinateElement::~SoMultiTextureCoordinateElement ()\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoMultiTextureCoordinateElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoMultiTextureCoordinateElement::initClass (void)\fC [static]\fP"
This static method initializes static data for the \fBSoMultiTextureCoordinateElement\fP class\&. 
.SS "void SoMultiTextureCoordinateElement::set3 (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const int32_t numCoords, const \fBSbVec3f\fP *const coords)\fC [static]\fP"
FIXME: write doc\&. 
.SS "SoMultiTextureCoordinateElement::CoordType SoMultiTextureCoordinateElement::getType (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
This method is used by shapes\&. Three return values are possible\&.
.PP
DEFAULT means that the shapes should generate their own texture coordinates\&.
.PP
EXPLICIT means that discrete texture coordinates are stored, and should be fetched with \fBget2()\fP, \fBget3()\fP or \fBget4()\fP\&.
.PP
FUNCTION means that get(point, normal) must be used to generate texture coordinates\&. 
.SS "const \fBSbVec4f\fP & SoMultiTextureCoordinateElement::get (const \fBint\fP unit, const \fBSbVec3f\fP & point, const \fBSbVec3f\fP & normal) const"
This method returns texture coordinate for the given point and normal\&. The coordinate is returned as a 4D vector where the r and q coordinates may be set to 0 and 1 respecively depending on what texture coordinate dimension we're using\&.
.PP
This method should only be used if the CoordType is FUNCTION\&. 
.SS "int32_t SoMultiTextureCoordinateElement::getDimension (const \fBint\fP unit = \fC0\fP) const"
FIXME: write doc\&. 
.SS "const \fBSbVec3f\fP & SoMultiTextureCoordinateElement::get3 (const \fBint\fP unit, const \fBint\fP index) const"
FIXME: write doc\&. 
.SS "const \fBSbVec2f\fP * SoMultiTextureCoordinateElement::getArrayPtr2 (const \fBint\fP unit = \fC0\fP) const"
Returns a pointer to the 2D texture coordinate array\&. This method is not part of the OIV API\&. 
.SS "const \fBSbVec3f\fP * SoMultiTextureCoordinateElement::getArrayPtr3 (const \fBint\fP unit = \fC0\fP) const"
Returns a pointer to the 3D texture coordinate array\&. 
.SS "const \fBSbVec4f\fP * SoMultiTextureCoordinateElement::getArrayPtr4 (const \fBint\fP unit = \fC0\fP) const"
Returns a pointer to the 4D texture coordinate array\&. This method is not part of the OIV API\&. 
.SS "void SoMultiTextureCoordinateElement::push (\fBSoState\fP * state)\fC [virtual]\fP"
This method is called every time a new element is required in one of the stacks\&. This happens when a writable element is requested, using \fBSoState::getElement()\fP or indirectly \fBSoElement::getElement()\fP, and the depth of the current element is less than the state depth\&.
.PP
Override this method if your element needs to copy data from the previous top of stack\&. The \fBpush()\fP method is called on the new element, and the previous element can be found using \fBSoElement::getNextInStack()\fP\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.PP
Reimplemented in \fBSoGLMultiTextureCoordinateElement\fP\&.
.SS "SbBool SoMultiTextureCoordinateElement::matches (const \fBSoElement\fP * element) const\fC [virtual]\fP"
This function returns \fCTRUE\fP is the element matches another element (of the same class), with respect to cache validity\&.
.PP
If the application programmer's extension element has a \fBmatches()\fP function, it should also have a \fBcopyMatchInfo()\fP function\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "\fBSoElement\fP * SoMultiTextureCoordinateElement::copyMatchInfo (void) const\fC [virtual]\fP"
This function creates a copy of the element that contains enough information to enable the \fBmatches()\fP function to work\&.
.PP
Used to help with scenegraph traversal caching operations\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "\fBSoMultiTextureCoordinateElement::UnitData\fP & SoMultiTextureCoordinateElement::getUnitData (const \fBint\fP unit)\fC [protected]\fP"
Returns the per-unit data for this element\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
