.TH "ScXMLIfElt" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ScXMLIfElt \- implements the <if> SCXML element\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/scxml/ScXMLIfElt\&.h>\fP
.PP
Inherits \fBScXMLExecutableElt\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual void \fBsetCondAttribute\fP (const char *cond)"
.br
.ti -1c
.RI "virtual const char * \fBgetCondAttribute\fP (void) const"
.br
.ti -1c
.RI "virtual SbBool \fBhandleXMLAttributes\fP (void)"
.br
.ti -1c
.RI "virtual void \fBcopyContents\fP (const \fBScXMLElt\fP *rhs)"
.br
.ti -1c
.RI "virtual const \fBScXMLElt\fP * \fBsearch\fP (const char *attrname, const char *attrvalue) const"
.br
.ti -1c
.RI "virtual \fBint\fP \fBgetNumElseIfs\fP (void) const"
.br
.ti -1c
.RI "virtual \fBScXMLElseIfElt\fP * \fBgetElseIf\fP (\fBint\fP idx) const"
.br
.ti -1c
.RI "virtual void \fBaddElseIf\fP (\fBScXMLElseIfElt\fP *elseif)"
.br
.ti -1c
.RI "virtual void \fBremoveElseIf\fP (\fBScXMLElseIfElt\fP *elseif)"
.br
.ti -1c
.RI "virtual void \fBclearAllElseIfs\fP (void)"
.br
.ti -1c
.RI "virtual void \fBsetElse\fP (\fBScXMLElseElt\fP *elseelt)"
.br
.ti -1c
.RI "virtual \fBScXMLElseElt\fP * \fBgetElse\fP (void) const"
.br
.ti -1c
.RI "virtual \fBint\fP \fBgetNumExecutables\fP (const \fBScXMLExecutableElt\fP *conditional) const"
.br
.ti -1c
.RI "virtual \fBScXMLExecutableElt\fP * \fBgetExecutable\fP (const \fBScXMLExecutableElt\fP *conditional, \fBint\fP idx) const"
.br
.ti -1c
.RI "virtual void \fBaddExecutable\fP (\fBScXMLExecutableElt\fP *conditional, \fBScXMLExecutableElt\fP *executable)"
.br
.ti -1c
.RI "virtual void \fBremoveExecutable\fP (\fBScXMLExecutableElt\fP *conditional, \fBScXMLExecutableElt\fP *executable)"
.br
.ti -1c
.RI "virtual void \fBclearAllExecutables\fP (\fBScXMLExecutableElt\fP *conditional)"
.br
.ti -1c
.RI "virtual void \fBexecute\fP (\fBScXMLStateMachine\fP *statemachine) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBScXMLEltReader\fP * \fBgetElementReader\fP (void)"
.br
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBcleanClass\fP (void)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "char * \fBcond\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
implements the <if> SCXML element\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP ScXMLIfElt::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSoBase::getTypeId() const\fP 
.RE
.PP

.PP
Implements \fBScXMLExecutableElt\fP\&.
.SS "SbBool ScXMLIfElt::handleXMLAttributes (void)\fC [virtual]\fP"
This method is called when the file reader has set all the XML attributes on the object, and wants the object to handle them and report if the values were ok or if a read error should be produced\&.
.PP
\fBReturns:\fP
.RS 4
TRUE if the attributes are ok, and FALSE on error\&.
.RE
.PP
This base class implementation does nothing and just returns TRUE\&. 
.PP
Reimplemented from \fBScXMLElt\fP\&.
.SS "const \fBScXMLElt\fP * ScXMLIfElt::search (const char * attrname, const char * attrvalue) const\fC [virtual]\fP"
This method searches the SCXML structure for an element with the given attributevalue for the given attribute\&.
.PP
Returns NULL if nothing was found\&.
.PP
This function needs to be reimplemented to traverse child elements\&. 
.PP
Reimplemented from \fBScXMLElt\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
