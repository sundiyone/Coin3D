.TH "SoPointSet" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoPointSet \- The \fBSoPointSet\fP class is used to display a set of 3D points\&.
.PP
This node either uses the coordinates currently on the state (typically set up by a leading \fBSoCoordinate3\fP node in the scenegraph) or from a \fBSoVertexProperty\fP node attached to this node to render a set of 3D points\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoPointSet\&.h>\fP
.PP
Inherits \fBSoNonIndexedShape\fP\&.
.PP
Inherited by \fBSoMarkerSet\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoPointSet\fP (void)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFInt32\fP \fBnumPoints\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoPointSet\fP ()"
.br
.ti -1c
.RI "virtual void \fBgeneratePrimitives\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcomputeBBox\fP (\fBSoAction\fP *action, \fBSbBox3f\fP &box, \fBSbVec3f\fP &center)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *, \fBSoNormalCache\fP *nc)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *state, \fBSoNormalBundle\fP *bundle)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoPointSet\fP class is used to display a set of 3D points\&.
.PP
This node either uses the coordinates currently on the state (typically set up by a leading \fBSoCoordinate3\fP node in the scenegraph) or from a \fBSoVertexProperty\fP node attached to this node to render a set of 3D points\&. 

The \fBSoPointSet::numPoints\fP field specifies the number of points in the coordinate set which should be rendered (or otherwise handled by traversal actions)\&.
.PP
Here's a simple usage example of \fBSoPointSet\fP in a scenegraph:
.PP
.PP
.nf
#Inventor V2.1 ascii

Separator {
   Material {
      diffuseColor [
       1 0 0, 0 1 0, 0 0 1, 1 1 0, 1 0 1, 1 1 1, 1 0.8 0.6, 0.6 0.8 1
      ]
   }
   MaterialBinding { value PER_PART }

   Coordinate3 {
      point [
       -1 1 0, -1 -1 0, 1 -1 0, 1 1 0, 0 2 -1, -2 0 -1, 0 -2 -1, 2 0 -1
      ]
   }

   DrawStyle { pointSize 3 }

   PointSet { }
}
.fi
.PP
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
PointSet {
    vertexProperty NULL
    startIndex 0
    numPoints -1
}

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoPointSet::SoPointSet (void)"
Constructor\&. 
.SS "SoPointSet::~SoPointSet ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoPointSet::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoNonIndexedShape\fP\&.
.PP
Reimplemented in \fBSoMarkerSet\fP\&.
.SS "const \fBSoFieldData\fP * SoPointSet::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoNonIndexedShape\fP\&.
.PP
Reimplemented in \fBSoMarkerSet\fP\&.
.SS "void SoPointSet::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.PP
Reimplemented in \fBSoMarkerSet\fP\&.
.SS "void SoPointSet::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.SS "void SoPointSet::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.PP
Reimplemented in \fBSoMarkerSet\fP\&.
.SS "void SoPointSet::generatePrimitives (\fBSoAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
The method implements action behavior for shape nodes for \fBSoCallbackAction\fP\&. It is invoked from \fBSoShape::callback()\fP\&. (Subclasses should \fInot\fP override \fBSoNode::callback()\fP\&.)
.PP
The subclass implementations uses the convenience methods \fBSoShape::beginShape()\fP, \fBSoShape::shapeVertex()\fP, and \fBSoShape::endShape()\fP, with \fBSoDetail\fP instances, to pass the primitives making up the shape back to the caller\&. 
.PP
Implements \fBSoShape\fP\&.
.SS "void SoPointSet::computeBBox (\fBSoAction\fP * action, \fBSbBox3f\fP & box, \fBSbVec3f\fP & center)\fC [protected]\fP, \fC [virtual]\fP"
Implemented by \fBSoShape\fP subclasses to let the \fBSoShape\fP superclass know the exact size and weighted center point of the shape's bounding box\&.
.PP
The bounding box and center point should be calculated and returned in the local coordinate system\&.
.PP
The method implements action behavior for shape nodes for \fBSoGetBoundingBoxAction\fP\&. It is invoked from \fBSoShape::getBoundingBox()\fP\&. (Subclasses should \fInot\fP override \fBSoNode::getBoundingBox()\fP\&.)
.PP
The \fIbox\fP parameter sent in is guaranteed to be an empty box, while \fIcenter\fP is undefined upon function entry\&. 
.PP
Implements \fBSoShape\fP\&.
.SS "SbBool SoPointSet::generateDefaultNormals (\fBSoState\fP * state, \fBSoNormalCache\fP * cache)\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalCache\fP class\&. This is more effective than using \fBSoNormalGenerator\fP\&. Return \fCTRUE\fP if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method just returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVertexShape\fP\&.
.SS "SbBool SoPointSet::generateDefaultNormals (\fBSoState\fP * state, \fBSoNormalBundle\fP * bundle)\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalBundle\fP class\&. \fCTRUE\fP should be returned if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVertexShape\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFInt32\fP SoPointSet::numPoints"
Used to specify number of points in the point set\&. Coordinates for the points will be taken from the state stack's set of 3D coordinates, typically set up by a leading \fBSoCoordinate3\fP node\&.
.PP
If this field is equal to -1 (the default value) \fIall\fP coordinates currently on the state will be rendered or otherwise handled by traversal actions\&.
.PP
\fBSoPointSet\fP inherits the field \fBSoNonIndexedShape::startIndex\fP, which specifies the start index for points from the current state set of coordinates\&. Please note that this field has been obsoleted, but is still provided for compatibility\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
