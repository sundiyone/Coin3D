.TH "SoDirectionalLightDragger" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoDirectionalLightDragger \- The \fBSoDirectionalLightDragger\fP class provides interactive geometry for manipulating a directional light source\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state:  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/draggers/SoDirectionalLightDragger\&.h>\fP
.PP
Inherits \fBSoDragger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoDirectionalLightDragger\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFRotation\fP \fBrotation\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBtranslation\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoDirectionalLightDragger\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBsetUpConnections\fP (SbBool onoff, SbBool doitalways=FALSE)"
.br
.ti -1c
.RI "virtual void \fBsetDefaultOnNonWritingFields\fP (void)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.ti -1c
.RI "static void \fBfieldSensorCB\fP (void *f, \fBSoSensor\fP *s)"
.br
.ti -1c
.RI "static void \fBvalueChangedCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBmaterial\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslatorRotInv\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslatorSep\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBrotFieldSensor\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBtranslFieldSensor\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoDirectionalLightDragger\fP class provides interactive geometry for manipulating a directional light source\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state: 

 Screen Shot of Default Dragger
.PP
This dragger is well suited to use for setting up the fields of a \fBSoDirectionalLight\fP node, as it provides geometry for the end-user to interact with a directional vector\&.
.PP
The image below is an action shot example, with the directional light being red and the camera headlight turned right down\&.
.PP
 DirectionalLight Dragger Action Shot
.PP
For convenience, this dragger also by default contains interaction geometry for placing the dragger itself\&. (\fBSoDirectionalLight\fP nodes don't have a position field, so this was strictly not needed\&.)
.PP
The Coin library also includes a manipulator class, \fBSoDirectionalLightManip\fP, which wraps the functionality provided by this class inside the necessary mechanisms for connecting it to \fBSoDirectionalLight\fP node instances in a scenegraph\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoDirectionalLightManip\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoDirectionalLightDragger::SoDirectionalLightDragger (void)"
Default constructor, sets up the dragger nodekit catalog with the interaction and feedback geometry\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix):
.PP
.PP
.nf
CLASS SoDirectionalLightDragger
-->"this"
      "callbackList"
      "topSeparator"
         "motionMatrix"
-->      "material"
-->      "translatorSep"
-->         "translatorRotInv"
-->         "translator"
-->      "rotator"
         "geomSeparator"
.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoDirectionalLightDragger
PVT   "this",  SoDirectionalLightDragger  --- 
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ] 
PVT   "topSeparator",  SoSeparator  --- 
PVT   "motionMatrix",  SoMatrixTransform  --- 
      "material",  SoMaterial  --- 
PVT   "translatorSep",  SoSeparator  --- 
      "translatorRotInv",  SoRotation  --- 
      "translator",  SoDragPointDragger  --- 
      "rotator",  SoRotateSphericalDragger  --- 
PVT   "geomSeparator",  SoSeparator  --- 
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SS "SoDirectionalLightDragger::~SoDirectionalLightDragger (void)\fC [protected]\fP, \fC [virtual]\fP"
Protected destructor\&.
.PP
(Dragger classes are derived from \fBSoBase\fP, so they are reference counted and automatically destroyed when their reference count goes to 0\&.) 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoDirectionalLightDragger::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoFieldData\fP * SoDirectionalLightDragger::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoDirectionalLightDragger::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "SbBool SoDirectionalLightDragger::setUpConnections (SbBool onoff, SbBool doitalways = \fCFALSE\fP)\fC [protected]\fP, \fC [virtual]\fP"
Sets up all internal connections for instances of this class\&.
.PP
(This method will usually not be of interest to the application programmer, unless you want to extend the library with new custom nodekits or dragger classes\&. If so, see the \fBSoBaseKit\fP class documentation\&.) 
.PP
Reimplemented from \fBSoInteractionKit\fP\&.
.SS "void SoDirectionalLightDragger::setDefaultOnNonWritingFields (void)\fC [protected]\fP, \fC [virtual]\fP"
(Be aware that this method is unlikely to be of interest to the application programmer who does not want to extend the library with new custom nodekits or draggers\&. If you indeed \fIare\fP writing extensions, see the information in the \fBSoBaseKit\fP class documentation\&.)
.PP
This is a virtual method, and the code in it should call \fBSoField::setDefault()\fP with argument \fCTRUE\fP on part fields that should not be written upon scenegraph export operations\&.
.PP
This is typically done when:
.PP
.PD 0
.IP "1." 4
field value is \fCNULL\fP and part is \fCNULL\fP by default 
.PP

.IP "2." 4
it is a leaf \fBSoGroup\fP or \fBSoSeparator\fP node with no children 
.PP

.IP "3." 4
it is a leaf listpart with no children and an \fBSoGroup\fP or \fBSoSeparator\fP container 
.PP

.IP "4." 4
it is a non-leaf part and it's of \fBSoGroup\fP type and all fields are at their default values 
.PP

.PP
.PP
Subclasses should usually override this to do additional settings for new member fields\&. From the subclass, do remember to call 'upwards' to your superclass' \fBsetDefaultOnNonWritingFields()\fP method\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "void SoDirectionalLightDragger::fieldSensorCB (void * d, \fBSoSensor\fP * s)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoDirectionalLightDragger::valueChangedCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFRotation\fP SoDirectionalLightDragger::rotation"
This field is continuously updated to contain the rotation of the current direction vector\&. The application programmer will typically connect this to the rotation field of a \fBSoDirectionalLight\fP node (unless using the \fBSoDirectionalLightManip\fP class, where this is taken care of automatically)\&.
.PP
It may also of course be connected to any other rotation field controlling the direction of scenegraph geometry, it does not have to part of a \fBSoDirectionalLight\fP node specifically\&. 
.SS "\fBSoSFVec3f\fP SoDirectionalLightDragger::translation"
Continuously updated to contain the current translation from the dragger's local origo position\&.
.PP
This field is not used by the \fBSoDirectionalLightManip\fP, but may be of interest for the application programmer wanting to use the \fBSoDirectionalLightDragger\fP outside the context of controlling a directional light node\&. 
.SS "\fBSoFieldSensor\fP * SoDirectionalLightDragger::rotFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSoFieldSensor\fP * SoDirectionalLightDragger::translFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
