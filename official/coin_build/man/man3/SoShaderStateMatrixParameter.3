.TH "SoShaderStateMatrixParameter" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoShaderStateMatrixParameter \- The \fBSoShaderStateMatrixParameter\fP class is used to define a matrix as shader parameter whose content is derived from the traversal state\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoShaderParameter\&.h>\fP
.PP
Inherits \fBSoUniformShaderParameter\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMatrixType\fP { \fBMODELVIEW\fP, \fBPROJECTION\fP, \fBTEXTURE\fP, \fBMODELVIEW_PROJECTION\fP }"
.br
.ti -1c
.RI "enum \fBMatrixTransform\fP { \fBIDENTITY\fP, \fBTRANSPOSE\fP, \fBINVERSE\fP, \fBINVERSE_TRANSPOSE\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual void \fBupdateParameter\fP (SoGLShaderObject *shaderObject)"
.br
.RI "Updates the shader parameter in the OpenGL state with the content of the value field\&. "
.ti -1c
.RI "virtual void \fBupdateValue\fP (\fBSoState\fP *state)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFEnum\fP \fBmatrixType\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBmatrixTransform\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSbMatrix\fP \fBvalue\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoShaderStateMatrixParameter\fP class is used to define a matrix as shader parameter whose content is derived from the traversal state\&. 

Unlike other parameter classes, \fBSoShaderStateMatrixParameter\fP does not have a value field\&. The value member is protected and updated automatically from the traversal state\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoShaderStateMatrixParameter::MatrixType\fP"
Defines the different matrix types\&. 
.SS "enum \fBSoShaderStateMatrixParameter::MatrixTransform\fP"
Defines different transformations that can be applied to a matrix\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoShaderStateMatrixParameter::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoUniformShaderParameter\fP\&.
.SS "const \fBSoFieldData\fP * SoShaderStateMatrixParameter::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoUniformShaderParameter\fP\&.
.SS "void SoShaderStateMatrixParameter::updateValue (\fBSoState\fP * state)\fC [virtual]\fP"
Updates matrix value from state 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFEnum\fP SoShaderStateMatrixParameter::matrixType"
Defines the matrix type value for the uniform shader variable\&. 
.SS "\fBSoSFEnum\fP SoShaderStateMatrixParameter::matrixTransform"
Defines a transformation that is applied to the matrix value\&. The default value of IDENTITY keeps the value unchanged\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
