.TH "SoAlphaTest" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoAlphaTest \- The \fBSoAlphaTest\fP class is a node used to control the GL alpha test function\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SoAlphaTest\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBFunction\fP { \fBNONE\fP, \fBNEVER\fP, \fBALWAYS\fP, \fBLESS\fP, \fBLEQUAL\fP, \fBEQUAL\fP, \fBGEQUAL\fP, \fBGREATER\fP, \fBNOTEQUAL\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoAlphaTest\fP (void)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFEnum\fP \fBfunction\fP"
.br
.ti -1c
.RI "\fBSoSFFloat\fP \fBvalue\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoAlphaTest\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoAlphaTest\fP class is a node used to control the GL alpha test function\&. 

With this node you can control the OpenGL alpha test function\&. The alpha test function enables you to discard fragments based on its alpha value\&. For instance, if you set the function to GREATER and value to 0\&.5, only fragments with alpha value greater than 0\&.5 will be rendered\&.
.PP
Alpha testing is typically used when rendering textures where all pixels are either completely opaque or completely transparent\&. Transparency sorting propblems are avoided when alpha testing is used instead of blending, since depth testing can still be enabled and no sorting or delayed rendering is needed\&.
.PP
To enable alpha testing instead of transparency blending, insert a TransparencyType node with value = NONE, and an AlphaTest node with \fIfunction\fP set to GREATER and \fIvalue\fP set to for instance 0\&.01\&.
.PP
Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
\fBSince:\fP
.RS 4
Coin 4\&.0 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoAlphaTest::Function\fP"
Enumeration for the various alpha functions\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINONE \fP\fP
No alpha test is performed\&. 
.TP
\fB\fINEVER \fP\fP
Never passes\&. 
.TP
\fB\fIALWAYS \fP\fP
Always passes\&. 
.TP
\fB\fILESS \fP\fP
Passes if the incoming alpha value is less than the stored alpha value\&. 
.TP
\fB\fILEQUAL \fP\fP
Passes if the incoming alpha value is less than or equal to the stored alpha value\&. 
.TP
\fB\fIEQUAL \fP\fP
Passes if the incoming alpha value is equal to the stored alpha value\&. 
.TP
\fB\fIGEQUAL \fP\fP
Passes if the incoming alpha value is greater than or equal to the stored alpha value\&. 
.TP
\fB\fIGREATER \fP\fP
Passes if the incoming alpha value is greater than the stored alpha value\&. 
.TP
\fB\fINOTEQUAL \fP\fP
Passes if the incoming alpha value is not equal to the stored alpha value\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoAlphaTest::SoAlphaTest (void)"
Constructor\&. 
.SS "SoAlphaTest::~SoAlphaTest ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoAlphaTest::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoAlphaTest::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "void SoAlphaTest::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFEnum\fP SoAlphaTest::function"
Which alpha function to use\&. Defaults to NONE\&. 
.SS "\fBSoSFFloat\fP SoAlphaTest::value"
The value the function will compare against when applicable\&. Default is 0\&.5\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
