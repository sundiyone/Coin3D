.TH "SoLineDetail" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoLineDetail \- The \fBSoLineDetail\fP class is for storing detailed 3D line information\&.
.PP
Instances of this class are used among other things for storing information about lines after pick operations, and for storing information returned to tessellation callbacks\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/details/SoLineDetail\&.h>\fP
.PP
Inherits \fBSoDetail\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.ti -1c
.RI "\fBSoLineDetail\fP (void)"
.br
.ti -1c
.RI "virtual \fB~SoLineDetail\fP ()"
.br
.ti -1c
.RI "virtual \fBSoDetail\fP * \fBcopy\fP (void) const"
.br
.ti -1c
.RI "const \fBSoPointDetail\fP * \fBgetPoint0\fP (void) const"
.br
.ti -1c
.RI "const \fBSoPointDetail\fP * \fBgetPoint1\fP (void) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetLineIndex\fP (void) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetPartIndex\fP (void) const"
.br
.ti -1c
.RI "void \fBsetPoint0\fP (const \fBSoPointDetail\fP *const detail)"
.br
.ti -1c
.RI "void \fBsetPoint1\fP (const \fBSoPointDetail\fP *const detail)"
.br
.ti -1c
.RI "void \fBsetLineIndex\fP (const \fBint\fP idx)"
.br
.ti -1c
.RI "void \fBsetPartIndex\fP (const \fBint\fP idx)"
.br
.ti -1c
.RI "void \fBincLineIndex\fP (void)"
.br
.ti -1c
.RI "void \fBincPartIndex\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBcleanupClass\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoLineDetail\fP class is for storing detailed 3D line information\&.
.PP
Instances of this class are used among other things for storing information about lines after pick operations, and for storing information returned to tessellation callbacks\&. 


.PP
\fBSee also:\fP
.RS 4
\fBSoRayPickAction\fP, \fBSoPickedPoint\fP, \fBSoCallbackAction\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoLineDetail::SoLineDetail (void)"
Default constructor sets up an empty, non-valid detail specification\&. 
.SS "SoLineDetail::~SoLineDetail ()\fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoLineDetail::getTypeId (void) const\fC [virtual]\fP"
Returns the type identification of a detail derived from a class inheriting \fBSoDetail\fP\&. This is used for run-time type checking and 'downward' casting\&.
.PP
Usage example:
.PP
.PP
.nf
void fuhbear(SoDetail * detail)
{
  if (detail->getTypeId() == SoFaceDetail::getClassTypeId()) {
    // safe downward cast, know the type
    SoFaceDetail * facedetail = (SoFaceDetail *)detail;
  }
  return; // ignore if not a SoFaceDetail
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new detail classes: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through Inventor/nodes/SoSubDetail\&.h: SO_DETAIL_SOURCE and SO_DETAIL_INIT_CLASS\&. 
.PP
Implements \fBSoDetail\fP\&.
.SS "\fBSoDetail\fP * SoLineDetail::copy (void) const\fC [virtual]\fP"
Return a deep copy of ourself\&.
.PP
\fBNote that if the Coin library has been built as a DLL under Microsoft Windows and you use this method from application code, you \fImust\fP make sure that both the Coin DLL and the application executable is using the same instance of a C Run-Time (CRT) library\&. Otherwise, you \fIwill\fP get memory heap corruption upon deallocating the returned instances, eventually leading to mysterious crashes\&.\fP 
.PP
Implements \fBSoDetail\fP\&.
.SS "const \fBSoPointDetail\fP * SoLineDetail::getPoint0 (void) const"
Returns \fBSoPointDetail\fP describing the line start point\&. 
.SS "const \fBSoPointDetail\fP * SoLineDetail::getPoint1 (void) const"
Returns \fBSoPointDetail\fP describing the line end point\&. 
.SS "\fBint\fP SoLineDetail::getLineIndex (void) const"
Returns the index of this line within the lineset node it is part of\&. 
.SS "\fBint\fP SoLineDetail::getPartIndex (void) const"
Returns the index of this line within the complex shape node it is part of\&. 
.SS "void SoLineDetail::setPoint0 (const \fBSoPointDetail\fP *const detail)"
Stores information about line's start point\&. Used internally from library client code setting up a \fBSoLineDetail\fP instance\&.
.PP
\fBSee also:\fP
.RS 4
\fBgetPoint0()\fP 
.RE
.PP

.SS "void SoLineDetail::setPoint1 (const \fBSoPointDetail\fP *const detail)"
Stores information about line's end point\&. Used internally from library client code setting up a \fBSoLineDetail\fP instance\&.
.PP
\fBSee also:\fP
.RS 4
\fBgetPoint1()\fP 
.RE
.PP

.SS "void SoLineDetail::setLineIndex (const \fBint\fP idx)"
Used internally from library client code setting up a \fBSoLineDetail\fP instance\&.
.PP
\fBSee also:\fP
.RS 4
\fBgetLineIndex()\fP 
.RE
.PP

.SS "void SoLineDetail::setPartIndex (const \fBint\fP idx)"
Used internally from library client code setting up a \fBSoLineDetail\fP instance\&.
.PP
\fBSee also:\fP
.RS 4
\fBgetPartIndex()\fP 
.RE
.PP

.SS "void SoLineDetail::incLineIndex (void)"
Convenience method for library client code when setting up a \fBSoLineDetail\fP instance to use the line index as a counter\&. 
.SS "void SoLineDetail::incPartIndex (void)"
Convenience method for library client code when setting up a \fBSoLineDetail\fP instance to use the part index as a counter\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
