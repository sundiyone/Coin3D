.TH "SoMultiTextureImageElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoMultiTextureImageElement \- The \fBSoMultiTextureImageElement\fP class is yet to be documented\&.
.PP
FIXME: write doc\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoMultiTextureImageElement\&.h>\fP
.PP
Inherits \fBSoElement\fP\&.
.PP
Inherited by \fBSoGLMultiTextureImageElement\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBUnitData\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBModel\fP { \fBBLEND\fP = 0x0be2, \fBMODULATE\fP = 0x2100, \fBDECAL\fP = 0x2101, \fBREPLACE\fP = 0x1E01 }"
.br
.ti -1c
.RI "enum \fBWrap\fP { \fBCLAMP\fP = 0x2900, \fBREPEAT\fP = 0x2901, \fBCLAMP_TO_BORDER\fP = 0x812D }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "virtual void \fBpush\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual SbBool \fBmatches\fP (const \fBSoElement\fP *elem) const"
.br
.ti -1c
.RI "\fBSoElement\fP * \fBcopyMatchInfo\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBsetElt\fP (const \fBint\fP unit, const uint32_t nodeid, const \fBSbVec2s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Model model, const \fBSbColor\fP &blendColor)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "virtual void \fBsetElt\fP (const \fBint\fP unit, const uint32_t nodeid, const \fBSbVec3s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "virtual SbBool \fBhasTransparency\fP (const \fBint\fP unit=0) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBsetDefault\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const \fBSbVec2s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Model model, const \fBSbColor\fP &blendColor)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const \fBSbVec3s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec2s\fP &size, \fBint\fP &numComponents, Wrap &wrapS, Wrap &wrapT, Model &model, \fBSbColor\fP &blendColor)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec3s\fP &size, \fBint\fP &numComponents, Wrap &wrapS, Wrap &wrapT, Wrap &wrapR, Model &model, \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBgetImage\fP (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec2s\fP &size, \fBint\fP &numComponents)"
.br
.ti -1c
.RI "static const unsigned char * \fBgetImage\fP (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec3s\fP &size, \fBint\fP &numComponents)"
.br
.ti -1c
.RI "static const \fBSbColor\fP & \fBgetBlendColor\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static Model \fBgetModel\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static Wrap \fBgetWrapS\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static Wrap \fBgetWrapT\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static Wrap \fBgetWrapR\fP (\fBSoState\fP *const state, const \fBint\fP unit=0)"
.br
.ti -1c
.RI "static SbBool \fBcontainsTransparency\fP (\fBSoState\fP *const state)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static const unsigned char * \fBgetDefault\fP (\fBSbVec2s\fP &size, \fBint\fP &numComponents)"
.br
.RI "FIXME: write doc\&. "
.ti -1c
.RI "static const unsigned char * \fBgetDefault\fP (\fBSbVec3s\fP &size, \fBint\fP &numComponents)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec2s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const \fBint\fP wrapS, const \fBint\fP wrapT, const \fBint\fP model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec2s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const \fBint\fP wrapS, const \fBint\fP wrapT, const \fBint\fP wrapR, const \fBint\fP model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3s\fP &size, const \fBint\fP numComponents, const unsigned char *bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, \fBSbVec2s\fP &size, \fBint\fP &numComponents, Wrap &wrapS, Wrap &wrapT, Model &model, \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, \fBSbVec3s\fP &size, \fBint\fP &numComponents, Wrap &wrapS, Wrap &wrapT, Wrap &wrapR, Model &model, \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, \fBSbVec2s\fP &size, \fBint\fP &numComponents, \fBint\fP &wrapS, \fBint\fP &wrapT, \fBint\fP &model, \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBget\fP (\fBSoState\fP *const state, \fBSbVec3s\fP &size, \fBint\fP &numComponents, \fBint\fP &wrapS, \fBint\fP &wrapT, \fBint\fP &wrapR, \fBint\fP &model, \fBSbColor\fP &blendColor)"
.br
.ti -1c
.RI "static const unsigned char * \fBgetImage\fP (\fBSoState\fP *const state, \fBSbVec2s\fP &size, \fBint\fP &numComponents)"
.br
.ti -1c
.RI "static const unsigned char * \fBgetImage\fP (\fBSoState\fP *const state, \fBSbVec3s\fP &size, \fBint\fP &numComponents)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoMultiTextureImageElement\fP ()"
.br
.ti -1c
.RI "const \fBUnitData\fP & \fBgetUnitData\fP (const \fBint\fP unit) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetNumUnits\fP () const"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoMultiTextureImageElement\fP class is yet to be documented\&.
.PP
FIXME: write doc\&. 

Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.2 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoMultiTextureImageElement::~SoMultiTextureImageElement ()\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoMultiTextureImageElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoMultiTextureImageElement::initClass (void)\fC [static]\fP"
This static method initializes static data for the \fBSoMultiTextureImageElement\fP class\&. 
.SS "void SoMultiTextureImageElement::setDefault (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
Resets this element to its original values\&. 
.SS "void SoMultiTextureImageElement::set (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBint\fP unit, const \fBSbVec3s\fP & size, const \fBint\fP numComponents, const unsigned char * bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const \fBSbColor\fP & blendColor)\fC [static]\fP"
FIXME: write doc\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.SS "const unsigned char * SoMultiTextureImageElement::get (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec3s\fP & size, \fBint\fP & numComponents, Wrap & wrapS, Wrap & wrapT, Wrap & wrapR, Model & model, \fBSbColor\fP & blendColor)\fC [static]\fP"
FIXME: write doc\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.SS "const unsigned char * SoMultiTextureImageElement::getImage (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec2s\fP & size, \fBint\fP & numComponents)\fC [static]\fP"
FIXME: write doc 
.SS "const unsigned char * SoMultiTextureImageElement::getImage (\fBSoState\fP *const state, const \fBint\fP unit, \fBSbVec3s\fP & size, \fBint\fP & numComponents)\fC [static]\fP"
FIXME: write doc 
.SS "const \fBSbColor\fP & SoMultiTextureImageElement::getBlendColor (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
FIXME: write doc\&. 
.SS "SoMultiTextureImageElement::Model SoMultiTextureImageElement::getModel (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
FIXME: write doc\&. 
.SS "SoMultiTextureImageElement::Wrap SoMultiTextureImageElement::getWrapS (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
FIXME: write doc\&. 
.SS "SoMultiTextureImageElement::Wrap SoMultiTextureImageElement::getWrapT (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
FIXME: write doc\&. 
.SS "SoMultiTextureImageElement::Wrap SoMultiTextureImageElement::getWrapR (\fBSoState\fP *const state, const \fBint\fP unit = \fC0\fP)\fC [static]\fP"
FIXME: write doc\&. 
.SS "const unsigned char * SoMultiTextureImageElement::getDefault (\fBSbVec3s\fP & size, \fBint\fP & numComponents)\fC [static]\fP"
FIXME: write doc\&. 
.SS "void SoMultiTextureImageElement::push (\fBSoState\fP * state)\fC [virtual]\fP"
This method is called every time a new element is required in one of the stacks\&. This happens when a writable element is requested, using \fBSoState::getElement()\fP or indirectly \fBSoElement::getElement()\fP, and the depth of the current element is less than the state depth\&.
.PP
Override this method if your element needs to copy data from the previous top of stack\&. The \fBpush()\fP method is called on the new element, and the previous element can be found using \fBSoElement::getNextInStack()\fP\&. 
.PP
Reimplemented from \fBSoElement\fP\&.
.PP
Reimplemented in \fBSoGLMultiTextureImageElement\fP\&.
.SS "SbBool SoMultiTextureImageElement::matches (const \fBSoElement\fP * element) const\fC [virtual]\fP"
This function returns \fCTRUE\fP is the element matches another element (of the same class), with respect to cache validity\&.
.PP
If the application programmer's extension element has a \fBmatches()\fP function, it should also have a \fBcopyMatchInfo()\fP function\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "\fBSoElement\fP * SoMultiTextureImageElement::copyMatchInfo (void) const\fC [virtual]\fP"
This function creates a copy of the element that contains enough information to enable the \fBmatches()\fP function to work\&.
.PP
Used to help with scenegraph traversal caching operations\&. 
.PP
Implements \fBSoElement\fP\&.
.SS "void SoMultiTextureImageElement::setElt (const \fBint\fP unit, const uint32_t nodeid, const \fBSbVec3s\fP & size, const \fBint\fP numComponents, const unsigned char * bytes, const Wrap wrapS, const Wrap wrapT, const Wrap wrapR, const Model model, const \fBSbColor\fP & blendColor)\fC [virtual]\fP"
FIXME: write doc\&. 
.SS "SbBool SoMultiTextureImageElement::hasTransparency (const \fBint\fP unit = \fC0\fP) const\fC [virtual]\fP"
Called by \fBcontainsTransparency()\fP\&. Returns \fITRUE\fP if image data has transparency\&. Default method does a very poor job of detecting this, since it returns \fITRUE\fP when the number of components are 2 or
.IP "4." 4
Override whenever it is important to know this (SoGLTextureImageElement overrides it to avoid transparency handling where possible)\&. 
.PP

.PP
Reimplemented in \fBSoGLMultiTextureImageElement\fP\&.
.SS "\fBint\fP SoMultiTextureImageElement::getNumUnits () const\fC [protected]\fP"
Get the number of units with image data set\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
