.TH "SoBumpMapMatrixElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoBumpMapMatrixElement \- The \fBSoBumpMapMatrixElement\fP class is used to manage the bump map matrix stack\&.
.PP
The bump map matrix is used to transform bump map coordinates before being used to map bump maps onto polygons\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoBumpMapMatrixElement\&.h>\fP
.PP
Inherits \fBSoAccumulatedElement\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "virtual void \fBpush\fP (\fBSoState\fP *state)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBmakeIdentity\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbMatrix\fP &matrix)"
.br
.ti -1c
.RI "static void \fBmult\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbMatrix\fP &matrix)"
.br
.ti -1c
.RI "static void \fBtranslateBy\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3f\fP &translation)"
.br
.ti -1c
.RI "static void \fBrotateBy\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbRotation\fP &rotation)"
.br
.ti -1c
.RI "static void \fBscaleBy\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3f\fP &scaleFactor)"
.br
.ti -1c
.RI "static const \fBSbMatrix\fP & \fBget\fP (\fBSoState\fP *const state)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoBumpMapMatrixElement\fP ()"
.br
.ti -1c
.RI "virtual void \fBmakeEltIdentity\fP (void)"
.br
.ti -1c
.RI "virtual void \fBsetElt\fP (const \fBSbMatrix\fP &matrix)"
.br
.ti -1c
.RI "virtual void \fBmultElt\fP (const \fBSbMatrix\fP &matrix)"
.br
.ti -1c
.RI "virtual void \fBtranslateEltBy\fP (const \fBSbVec3f\fP &translation)"
.br
.ti -1c
.RI "virtual void \fBrotateEltBy\fP (const \fBSbRotation\fP &rotation)"
.br
.ti -1c
.RI "virtual void \fBscaleEltBy\fP (const \fBSbVec3f\fP &scaleFactor)"
.br
.ti -1c
.RI "virtual const \fBSbMatrix\fP & \fBgetElt\fP (void) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSbMatrix\fP \fBbumpMapMatrix\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoBumpMapMatrixElement\fP class is used to manage the bump map matrix stack\&.
.PP
The bump map matrix is used to transform bump map coordinates before being used to map bump maps onto polygons\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoBumpMapMatrixElement::~SoBumpMapMatrixElement (void)\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoBumpMapMatrixElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoBumpMapMatrixElement::init (\fBSoState\fP * state)\fC [virtual]\fP"
This function initializes the element type in the given \fBSoState\fP\&. It is called for the first element of each enabled element type in \fBSoState\fP objects\&. 
.PP
Reimplemented from \fBSoAccumulatedElement\fP\&.
.SS "void SoBumpMapMatrixElement::push (\fBSoState\fP * state)\fC [virtual]\fP"
This method is called every time a new element is required in one of the stacks\&. This happens when a writable element is requested, using \fBSoState::getElement()\fP or indirectly \fBSoElement::getElement()\fP, and the depth of the current element is less than the state depth\&.
.PP
Override this method if your element needs to copy data from the previous top of stack\&. The \fBpush()\fP method is called on the new element, and the previous element can be found using \fBSoElement::getNextInStack()\fP\&. 
.PP
Reimplemented from \fBSoAccumulatedElement\fP\&.
.SS "void SoBumpMapMatrixElement::makeIdentity (\fBSoState\fP *const state, \fBSoNode\fP *const node)\fC [static]\fP"
Sets current texture matrix to identity\&. 
.SS "void SoBumpMapMatrixElement::set (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbMatrix\fP & matrix)\fC [static]\fP"
Sets the current texture matrix to \fImatrix\fP\&.
.PP
This method is an extension versus the Open Inventor API\&. 
.SS "void SoBumpMapMatrixElement::mult (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbMatrix\fP & matrix)\fC [static]\fP"
Multiplies \fImatrix\fP into the current texture matrix\&. 
.SS "void SoBumpMapMatrixElement::translateBy (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3f\fP & translation)\fC [static]\fP"
Appends \fItranslation\fP to the current texture matrix\&. 
.SS "void SoBumpMapMatrixElement::rotateBy (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbRotation\fP & rotation)\fC [static]\fP"
Appends \fIrotation\fP to the current texture matrix\&. 
.SS "void SoBumpMapMatrixElement::scaleBy (\fBSoState\fP *const state, \fBSoNode\fP *const node, const \fBSbVec3f\fP & scaleFactor)\fC [static]\fP"
Appends \fIscaleFactor\fP to the current texture matrix\&. 
.SS "const \fBSbMatrix\fP & SoBumpMapMatrixElement::get (\fBSoState\fP *const state)\fC [static]\fP"
Returns current texture matrix\&. 
.SS "void SoBumpMapMatrixElement::makeEltIdentity (void)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBmakeIdentity()\fP\&. Sets element matrix to identity\&. 
.SS "void SoBumpMapMatrixElement::setElt (const \fBSbMatrix\fP & matrix)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBset()\fP\&. Sets the texture matrix to \fImatrix\fP\&.
.PP
This method is an extension versus the Open Inventor API\&. 
.SS "void SoBumpMapMatrixElement::multElt (const \fBSbMatrix\fP & matrix)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBmult()\fP\&. Multiplies \fImatrix\fP into element matrix\&. 
.SS "void SoBumpMapMatrixElement::translateEltBy (const \fBSbVec3f\fP & translation)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBtranslateBy()\fP\&. Appends \fItranslation\fP to the element matrix\&. 
.SS "void SoBumpMapMatrixElement::rotateEltBy (const \fBSbRotation\fP & rotation)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBrotateBy()\fP\&. Appends \fIrotation\fP to the element matrix\&. 
.SS "void SoBumpMapMatrixElement::scaleEltBy (const \fBSbVec3f\fP & scaleFactor)\fC [protected]\fP, \fC [virtual]\fP"
virtual method which is called from \fBscaleBy()\fP\&. Append \fIscaleFactor\fP to the element matrix\&. 
.SS "const \fBSbMatrix\fP & SoBumpMapMatrixElement::getElt (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns element matrix\&. Called from \fBget()\fP\&. 
.SH "Member Data Documentation"
.PP 
.SS "SoBumpMapMatrixElement::bumpMapMatrix\fC [protected]\fP"
The matrix\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
