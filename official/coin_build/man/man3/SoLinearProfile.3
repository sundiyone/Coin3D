.TH "SoLinearProfile" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoLinearProfile \- The \fBSoLinearProfile\fP class is a node for specifying linear profile curves\&.
.PP
Use nodes of this type if you want to set up profiles that are simply straight lines connected by control points\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoLinearProfile\&.h>\fP
.PP
Inherits \fBSoProfile\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoLinearProfile\fP (void)"
.br
.ti -1c
.RI "virtual void \fBgetTrimCurve\fP (\fBSoState\fP *state, int32_t &numpoints, float *&points, \fBint\fP &floatspervec, int32_t &numknots, float *&knotvector)"
.br
.ti -1c
.RI "virtual void \fBgetVertices\fP (\fBSoState\fP *state, int32_t &numvertices, \fBSbVec2f\fP *&vertices)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoLinearProfile\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoLinearProfile\fP class is a node for specifying linear profile curves\&.
.PP
Use nodes of this type if you want to set up profiles that are simply straight lines connected by control points\&. 

\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
LinearProfile {
    index 0
    linkage START_FIRST
}

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoLinearProfile::SoLinearProfile (void)"
Constructor\&. 
.SS "SoLinearProfile::~SoLinearProfile ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoLinearProfile::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoProfile\fP\&.
.SS "const \fBSoFieldData\fP * SoLinearProfile::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoProfile\fP\&.
.SS "void SoLinearProfile::getTrimCurve (\fBSoState\fP * state, int32_t & numpoints, float *& points, \fBint\fP & floatspervec, int32_t & numknots, float *& knotvector)\fC [virtual]\fP"
Return \fIpoints\fP and \fIknotvector\fP of the \fIstate\fP\&. 
.PP
Implements \fBSoProfile\fP\&.
.SS "void SoLinearProfile::getVertices (\fBSoState\fP * state, int32_t & numvertices, \fBSbVec2f\fP *& vertices)\fC [virtual]\fP"
Return vertex set of \fIstate\fP\&. 
.PP
Implements \fBSoProfile\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
