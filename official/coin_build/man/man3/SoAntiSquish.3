.TH "SoAntiSquish" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoAntiSquish \- The \fBSoAntiSquish\fP class is used to reset to uniform scaling\&.
.PP
When traversed, this node replaces the scale vector of the matrix with uniform values, based on one of the \fBSoAntiSquish::Sizing\fP strategies\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoAntiSquish\&.h>\fP
.PP
Inherits \fBSoTransformation\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSizing\fP { \fBX\fP, \fBY\fP, \fBZ\fP, \fBAVERAGE_DIMENSION\fP, \fBBIGGEST_DIMENSION\fP, \fBSMALLEST_DIMENSION\fP, \fBLONGEST_DIAGONAL\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoAntiSquish\fP (void)"
.br
.ti -1c
.RI "void \fBrecalc\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFEnum\fP \fBsizing\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBrecalcAlways\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoAntiSquish\fP ()"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetMatrix\fP (\fBSoGetMatrixAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.ti -1c
.RI "\fBSbMatrix\fP \fBgetUnsquishingMatrix\fP (const \fBSbMatrix\fP &squishedmatrix, const SbBool calcinverse, \fBSbMatrix\fP &getinverse)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoAntiSquish\fP class is used to reset to uniform scaling\&.
.PP
When traversed, this node replaces the scale vector of the matrix with uniform values, based on one of the \fBSoAntiSquish::Sizing\fP strategies\&. 

This node is for instance used by manipulators to retain the shape of their dragger geometries when set up within the influence of an \fBSoSurroundScale\fP node (which can yield nonuniform scale-vectors in the current state transformation matrix)\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
AntiSquish {
    recalcAlways TRUE
    sizing AVERAGE_DIMENSION
}

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSoSurroundScale\fP for a usage example\&. 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoAntiSquish::Sizing\fP"
Different strategies for 'unsquishing' a scale\&. Values are used by the \fBSoAntiSquish::sizing\fP field\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoAntiSquish::SoAntiSquish (void)"
Constructor\&. 
.SS "SoAntiSquish::~SoAntiSquish ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoAntiSquish::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoTransformation\fP\&.
.SS "const \fBSoFieldData\fP * SoAntiSquish::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoTransformation\fP\&.
.SS "void SoAntiSquish::recalc (void)"
If \fBSoAntiSquish::recalcAlways\fP has been set to \fCFALSE\fP, you must call this method whenever the transformations before this node in the graph has changed\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoAntiSquish::recalcAlways\fP 
.RE
.PP

.SS "void SoAntiSquish::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
Accumulates an 'unsquishing' matrix on top of the current model matrix\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoAntiSquish::callback (\fBSoCallbackAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoAntiSquish::GLRender (\fBSoGLRenderAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoAntiSquish::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoAntiSquish::getMatrix (\fBSoGetMatrixAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
Action method for \fBSoGetMatrixAction\fP\&.
.PP
Updates \fIaction\fP by accumulating with the transformation matrix of this node (if any)\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoAntiSquish::pick (\fBSoPickAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "\fBSbMatrix\fP SoAntiSquish::getUnsquishingMatrix (const \fBSbMatrix\fP & squishedmatrix, const SbBool calcinverse, \fBSbMatrix\fP & getinverse)\fC [protected]\fP"
Calculate and return the matrix needed to 'unsquish' the \fIsquishedmatrix\fP\&.
.PP
If \fIcalcinverse\fP is \fCTRUE\fP, store the inverse of the unsquishmatrix in \fIgetinverse\fP\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFEnum\fP SoAntiSquish::sizing"
The current 'unsquish' strategy\&. Default value is SoAntiSquish::AVERAGE_DIMENSION\&. 
.SS "\fBSoSFBool\fP SoAntiSquish::recalcAlways"
Whether to automatically have the unsquishing parameters recalculated for every traversal\&. Default value is \fCTRUE\fP\&.
.PP
You can set this to \fCFALSE\fP and manually invoke \fBSoAntiSquish::recalc()\fP if you need closer control of the geometry influenced by this node\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
