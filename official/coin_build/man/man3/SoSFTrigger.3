.TH "SoSFTrigger" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoSFTrigger \- The \fBSoSFTrigger\fP class is the 'void' class used for detecting field changes\&.
.PP
Connect this field to a master field (or engine output) to detect when the master field changes its value\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/fields/SoSFTrigger\&.h>\fP
.PP
Inherits \fBSoSField\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBcopyFrom\fP (const \fBSoField\fP &field)"
.br
.ti -1c
.RI "const \fBSoSFTrigger\fP & \fBoperator=\fP (const \fBSoSFTrigger\fP &field)"
.br
.ti -1c
.RI "virtual SbBool \fBisSame\fP (const \fBSoField\fP &field) const"
.br
.ti -1c
.RI "void \fBsetValue\fP (void)"
.br
.ti -1c
.RI "void \fBgetValue\fP (void) const"
.br
.ti -1c
.RI "\fBint\fP \fBoperator==\fP (const \fBSoSFTrigger\fP &trigger) const"
.br
.ti -1c
.RI "\fBint\fP \fBoperator!=\fP (const \fBSoSFTrigger\fP &trigger) const"
.br
.ti -1c
.RI "virtual void \fBstartNotify\fP (void)"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *l)"
.br
.ti -1c
.RI "virtual void \fBtouch\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoSFTrigger\fP class is the 'void' class used for detecting field changes\&.
.PP
Connect this field to a master field (or engine output) to detect when the master field changes its value\&. 

This is useful if you want to automatically trigger an update from the node or engine (or other field container) this field is part of whenever another field changes -- and you are not particularly interested in the actual value of the master field\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoFieldSensor\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoSFTrigger::getTypeId (void) const\fC [virtual]\fP"
Returns the type identification instance which uniquely identifies the Coin field class the object belongs to\&.
.PP
\fBSee also:\fP
.RS 4
getClassTypeId(), \fBSoType\fP 
.RE
.PP

.PP
Implements \fBSoField\fP\&.
.SS "void SoSFTrigger::copyFrom (const \fBSoField\fP & f)\fC [virtual]\fP"
Copy value(s) from \fIf\fP into this field\&. \fIf\fP must be of the same type as this field\&. 
.PP
Implements \fBSoField\fP\&.
.SS "SbBool SoSFTrigger::isSame (const \fBSoField\fP & f) const\fC [virtual]\fP"
Check for equal type and value(s)\&. 
.PP
Implements \fBSoField\fP\&.
.SS "void SoSFTrigger::setValue (void)"
This field class does not actually contain any value, so we just triggers an update by calling \fBtouch()\fP within this method\&. 
.SS "void SoSFTrigger::getValue (void) const"
Field doesn't contain any value, so this method does nothing\&. 
.SS "\fBint\fP SoSFTrigger::operator== (const \fBSoSFTrigger\fP & trigger) const"
Since \fBSoSFTrigger\fP fields doesn't have any value, they are all equal\&. So this method always returns \fCTRUE\fP\&. 
.SS "\fBint\fP SoSFTrigger::operator!= (const \fBSoSFTrigger\fP & trigger) const"
Since \fBSoSFTrigger\fP fields doesn't have any value, they are all equal\&. So this method always returns \fCFALSE\fP\&. 
.SS "void SoSFTrigger::startNotify (void)\fC [virtual]\fP"
Trigger a notification sequence\&.
.PP
At the end of a notification sequence, all 'immediate' sensors (i\&.e\&. sensors set up with a zero priority) are triggered\&. 
.PP
Reimplemented from \fBSoField\fP\&.
.SS "void SoSFTrigger::notify (\fBSoNotList\fP * nlist)\fC [virtual]\fP"
Notify auditors that this field has changed\&. 
.PP
Reimplemented from \fBSoField\fP\&.
.SS "void SoSFTrigger::touch (void)\fC [virtual]\fP"
Notify the field as well as the field's owner / container that it has been changed\&.
.PP
Touching a field which is part of any component (engine or node) in a scene graph will lead to a forced redraw\&. This is useful if you have been doing several updates to the field wrapped in a pair of \fBenableNotify()\fP calls to notify the field's auditors that its value has changed\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetValue()\fP, \fBenableNotify()\fP 
.RE
.PP

.PP
Reimplemented from \fBSoField\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
