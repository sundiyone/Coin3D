.TH "SoVertexProperty" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoVertexProperty \- The \fBSoVertexProperty\fP class collects the functionality of various appearance nodes\&.
.PP
Instead of reading data from the current state stack of the scenegraph traversal, nodes inheriting \fBSoVertexShape\fP can be set up with an \fBSoVertexProperty\fP node in the \fBSoVertexShape::vertexProperty\fP field\&. Coordinates, normals, texture coordinates and material / color information will then be fetched from the vertexshape's \fBSoVertexProperty\fP node instead of from the state stack\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoVertexProperty\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBBinding\fP { \fBOVERALL\fP = 2, \fBPER_PART\fP, \fBPER_PART_INDEXED\fP, \fBPER_FACE\fP, \fBPER_FACE_INDEXED\fP, \fBPER_VERTEX\fP, \fBPER_VERTEX_INDEXED\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoVertexProperty\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoMFVec3f\fP \fBvertex\fP"
.br
.ti -1c
.RI "\fBSoMFVec2f\fP \fBtexCoord\fP"
.br
.ti -1c
.RI "\fBSoMFVec3f\fP \fBtexCoord3\fP"
.br
.ti -1c
.RI "\fBSoMFVec3f\fP \fBnormal\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBnormalBinding\fP"
.br
.ti -1c
.RI "\fBSoMFUInt32\fP \fBorderedRGBA\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBmaterialBinding\fP"
.br
.ti -1c
.RI "\fBSoMFInt32\fP \fBtextureUnit\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoVertexProperty\fP ()"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoVertexProperty\fP class collects the functionality of various appearance nodes\&.
.PP
Instead of reading data from the current state stack of the scenegraph traversal, nodes inheriting \fBSoVertexShape\fP can be set up with an \fBSoVertexProperty\fP node in the \fBSoVertexShape::vertexProperty\fP field\&. Coordinates, normals, texture coordinates and material / color information will then be fetched from the vertexshape's \fBSoVertexProperty\fP node instead of from the state stack\&. 

The \fBSoVertexProperty\fP node provides fields for duplicating the functionality of all these other Inventor node types: \fBSoCoordinate3\fP, \fBSoTextureCoordinate2\fP, \fBSoTextureCoordinate3\fP, \fBSoNormal\fP, \fBSoPackedColor\fP, \fBSoMaterialBinding\fP and \fBSoNormalBinding\fP\&.
.PP
The \fBSoVertexProperty\fP node was introduced fairly late in the design of the Inventor API by SGI\&. The idea behind it was to provide a means to specify the necessary data for vertexshape-derived nodes which would be more efficient to work with than fetching the data from the traversal state stack\&.
.PP
In practice, the effect is not at all very noticable\&. Since the use of \fBSoVertexProperty\fP nodes in the \fBSoVertexShape::vertexProperty\fP field somewhat breaks with the basic design of the Open Inventor API (the \fBSoVertexProperty\fP data is not pushed to the traversal state stack), you might be better off design-wise by using the usual mechanisms, ie by setting up the individual nodes \fBSoVertexProperty\fP 'collects'\&.
.PP
One of the drawbacks will for instance be that it's not possible to share \fIparts\fP of the \fBSoVertexProperty\fP node between several shapes, which is something that can easily be done when setting up individual state-changing nodes in the scenegraph\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
VertexProperty {
    vertex [  ]
    normal [  ]
    texCoord [  ]
    orderedRGBA [  ]
    texCoord3 [  ]
    normalBinding PER_VERTEX_INDEXED
    materialBinding OVERALL
}

.fi
.PP
.PP
\fBSince:\fP
.RS 4
Inventor 2\&.1 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSoVertexShape\fP 
.PP
\fBSoCoordinate3\fP, \fBSoTextureCoordinate2\fP, \fBSoTextureCoordinate3\fP, \fBSoNormal\fP 
.PP
\fBSoPackedColor\fP 
.PP
\fBSoMaterialBinding\fP, \fBSoNormalBinding\fP 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoVertexProperty::Binding\fP"
The binding types available for our \fBSoVertexProperty::normalBinding\fP and \fBSoVertexProperty::materialBinding\fP fields\&.
.PP
For a detailed explanation of each of the enumeration value binding types, see the documentation of the \fBSoMaterialBinding\fP node\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoVertexProperty::SoVertexProperty (void)"
Constructor\&. 
.SS "SoVertexProperty::~SoVertexProperty ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoVertexProperty::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoVertexProperty::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "void SoVertexProperty::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::pick (\fBSoPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVertexProperty::notify (\fBSoNotList\fP * l)\fC [protected]\fP, \fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoMFVec3f\fP SoVertexProperty::vertex"
This field sets up vertex coordinates in the same manner as \fBSoCoordinate3::point\fP\&.
.PP
By default the field contains no coordinates\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoCoordinate3\fP 
.RE
.PP

.SS "\fBSoMFVec2f\fP SoVertexProperty::texCoord"
Same functionality as \fBSoTextureCoordinate2::point\fP\&. By default the field contains no coordinates\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoTextureCoordinate2\fP 
.RE
.PP

.SS "\fBSoMFVec3f\fP SoVertexProperty::texCoord3"
Same functionality as \fBSoTextureCoordinate3::point\fP\&. By default the field contains no coordinates\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoTextureCoordinate3\fP 
.RE
.PP
\fBSince:\fP
.RS 4
Coin 2\&.0 
.PP
TGS Inventor 2\&.6 
.RE
.PP

.SS "\fBSoMFVec3f\fP SoVertexProperty::normal"
This field defines a set of normal vectors in the same manner as \fBSoNormal::vector\fP\&. By default the field contains no vectors\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoNormal\fP 
.RE
.PP

.SS "\fBSoSFEnum\fP SoVertexProperty::normalBinding"
Defines how to bind the normals specified in the \fBSoVertexProperty::normal\fP set to the parts of the 'owner' shape\&. Must be one of the values in the \fBSoVertexProperty::Binding\fP enum\&.
.PP
Default value of the field is SoVertexProperty::PER_VERTEX_INDEXED\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoNormalBinding\fP 
.RE
.PP

.SS "\fBSoMFUInt32\fP SoVertexProperty::orderedRGBA"
A set of 'packed' 32-bit diffusecolor plus transparency values\&. Works in the same manner as the \fBSoPackedColor::orderedRGBA\fP field\&.
.PP
By default the field has no data\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoPackedColor\fP 
.RE
.PP

.SS "\fBSoSFEnum\fP SoVertexProperty::materialBinding"
Defines how to bind the colorvalues specified in the \fBSoVertexProperty::orderedRGBA\fP set to the parts of the 'owner' shape\&. Must be one of the values in the \fBSoVertexProperty::Binding\fP enum\&.
.PP
Default value of the field is SoVertexProperty::OVERALL\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoMaterialBinding\fP 
.RE
.PP

.SS "\fBSoMFInt32\fP SoVertexProperty::textureUnit"
The texture unit(s) for the texture coordinates\&. By default this field contains one value, 0, and texture coordinates are then sent to texture unit 0\&. It's possible to supply multiple values in this field, and the texture coordinates in texCoord or texCoord3 will then be split into those units\&. The first totalnum/numunits coordinates will be sent to the first unit specified, the next totalnum/numunits coordinates will be sent to the second unit in this field, etc\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoTextureCoordinate2\fP, \fBSoTextureUnit\fP 
.RE
.PP
\fBSince:\fP
.RS 4
Coin 4\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
