.TH "SoGeoOrigin" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoGeoOrigin \- The \fBSoGeoOrigin\fP class is used to specify an absolute geographic location against which geometry is referenced\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoGeoOrigin\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoGeoOrigin\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetMatrix\fP (\fBSoGetMatrixAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFVec3d\fP \fBgeoCoords\fP"
.br
.ti -1c
.RI "\fBSoMFString\fP \fBgeoSystem\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoGeoOrigin\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoGeoOrigin\fP class is used to specify an absolute geographic location against which geometry is referenced\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 


.PP
.nf
GeoOrigin {
  geoSystem ["GD", "WE"]
  geoCoords 0 0 0
}

.fi
.PP
.PP
A common problem when dealing with geographic data is the reduced floating point precision you often get\&. UTM coordinates are often in the 10^5 a 10^6 magnitude, and this leaves very little precision for details at that position\&.
.PP
The \fBSoGeo\fP nodes are therefore useful when you want to keep your data in its original system, but still get good floating point precision when rendering\&.
.PP
Coin needs a local Cartesian coordinate system when rendering\&. When a \fBSoGeoOrigin\fP node is used, Coin will create a coordinate system at the \fBSoGeoOrigin\fP position, and all geometry (and the camera) in the scene graph will be projected into that coordinate system\&.
.PP
The coordinate system will always have the Z axis point up from the ground\&. The Y axis will point towards the north pole, and the X-axis is found using the right hand rule\&.
.PP
A scene graph should only contain one GeoOrigin node, and all geometry in the scene graph will, as stated earlier, be rendered relative to this position\&. This means that the precision will be best if the GeoOrigin position is as close to actual camera position as possible\&. If you move around on a large area, it might therefore be a good idea too actually move the GeoOrigin postition instead of the camera\&.
.PP
To place geometry in the scene graph, you can either use an \fBSoGeoSeparator\fP node or an \fBSoGeoCoordinate\fP node\&. When using a GeoSeparator node, all geometry inside that separator will be rendered relative to its geo-system position and orientation, and you then use regular shapes and regular \fBSoCoordinate3\fP nodes to specify data (the points in an \fBSoCoordinate3\fP must be adjusted to be relative to the GeoSeparator position)\&.
.PP
The \fBSoGeoCoordinate\fP node on the other hand can contain double precision geo-coordinates, and that node will internally recalculate the double precison array to a single precision array which is relative to the SoGeoOrgin node\&.
.PP
One note regarding UTM projections: Since it's quite common to assume a flat earth when working with UTM data, it's possible to supply a 'FLAT' keyword for UTM coordinate systems:
.PP
.PP
.nf
GeoOrigin {
  geoSystem [ "UTM", "Z17", "FLAT" ]
  geoCoords  846889 4313850 0
}
.fi
.PP
.PP
Example scene graph:
.PP
.PP
.nf
GeoOrigin { geoSystem "GD" geoCoords 40\&.77 -73\&.97 0 }

GeoSeparator {
  # New York, NY
  geoSystem  "GD"
  geoCoords 40\&.67 -73\&.94 0

  BaseColor { rgb 0 1 0 }
  Cube { width 25000 height 25000 depth 25000 }
  Translation { translation 0 0 30000 }
  Text2 { string "New York" }
}

GeoSeparator {
  # Los Angeles, CA
  geoSystem "GD"
  geoCoords 34\&.11 -118\&.4 0

  BaseColor { rgb 1 0 0 }
  Cube { width 25000 height 25000 depth 25000 }
  Translation { translation 0 0 30000 }
  Text2 { string "Los Angeles" }
}

GeoSeparator {
  # Washington, DC
  geoSystem [ "UTM", "Z17" ]
  geoCoords  846889 4313850 0

  BaseColor { rgb 0 1 1 }
  Cube { width 25000 height 25000 depth 25000 }

  Translation { translation 0 0 30000 }
  Text2 { string "Washington" }    
}

# add a small geogrid
GeoCoordinate {
  geoSystem "GD"
  point [
  32 -120 0,
  32 -110 0,
  32 -100 0,
  32 -90 0,
  32 -80 0,
  32 -70 0,

  34 -120 0,
  34 -110 0,
  34 -100 0,
  34 -90 0,
  34 -80 0,
  34 -70 0,

  36 -120 0,
  36 -110 0,
  36 -100 0,
  36 -90 0,
  36 -80 0,
  36 -70 0,

  38 -120 0,
  38 -110 0,
  38 -100 0,
  38 -90 0,
  38 -80 0,
  38 -70 0,

  40 -120 0,
  40 -110 0,
  40 -100 0,
  40 -90 0,
  40 -80 0,
  40 -70 0

  42 -120 0,
  42 -110 0,
  42 -100 0,
  42 -90 0,
  42 -80 0,
  42 -70 0
  ]
}

DrawStyle { style LINES }
BaseColor {}
ShapeHints { vertexOrdering COUNTERCLOCKWISE }
QuadMesh { verticesPerRow 6 verticesPerColumn 6 }
.fi
.PP
.PP
\fBSince:\fP
.RS 4
Coin 2\&.5 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoGeoOrigin::SoGeoOrigin (void)"
Constructor\&. 
.SS "SoGeoOrigin::~SoGeoOrigin ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoGeoOrigin::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoGeoOrigin::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "void SoGeoOrigin::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::getMatrix (\fBSoGetMatrixAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoGetMatrixAction\fP\&.
.PP
Updates \fIaction\fP by accumulating with the transformation matrix of this node (if any)\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::pick (\fBSoPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoGeoOrigin::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFVec3d\fP SoGeoOrigin::geoCoords"
Used for specifying the geographic coordinates\&. For the GD system this should be <latitude> <longitude> <elevation>\&. For UTM it is <easting> <northing> <elevation>, and for GC it is simply <x> <y> <z>\&. 
.SS "\fBSoMFString\fP SoGeoOrigin::geoSystem"
Used to specify a spatial reference frame\&. Coin currently supports three different systems\&. Support for more systems might be added in the future\&.
.PP
.PD 0
.IP "\(bu" 2
'GD' - The Geodetic system (latitude/longitude)\&.
.PP
.PD 0
.IP "\(bu" 2
'UTM' - Universal Transverse Mercator coordinate system\&. The second string should be the zone, encoded as 'Z<n>'\&.
.PP
.PD 0
.IP "\(bu" 2
'GC' - Earth-fixed Geocentric with respect to the WGS84 ellipsoid\&.
.PP
The 'GD' and 'UTM' systems can, for future support, have an ellipsoid specification\&. The default is 'WE' which is the WGS84 ellipsoid, the only ellipsoid currently supported in Coin\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
