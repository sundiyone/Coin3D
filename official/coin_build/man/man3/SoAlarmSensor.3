.TH "SoAlarmSensor" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoAlarmSensor \- The \fBSoAlarmSensor\fP class is a sensor which will trigger once at a specified time\&.
.PP
\fBSoAlarmSensor\fP provides a convenient way of setting up triggers for jobs which should be executed only once when they are scheduled\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/sensors/SoAlarmSensor\&.h>\fP
.PP
Inherits \fBSoTimerQueueSensor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoAlarmSensor\fP (void)"
.br
.ti -1c
.RI "\fBSoAlarmSensor\fP (\fBSoSensorCB\fP *\fBfunc\fP, void *data)"
.br
.ti -1c
.RI "virtual \fB~SoAlarmSensor\fP (void)"
.br
.ti -1c
.RI "void \fBsetTime\fP (const \fBSbTime\fP &abstime)"
.br
.ti -1c
.RI "void \fBsetTimeFromNow\fP (const \fBSbTime\fP &reltime)"
.br
.ti -1c
.RI "const \fBSbTime\fP & \fBgetTime\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBschedule\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoAlarmSensor\fP class is a sensor which will trigger once at a specified time\&.
.PP
\fBSoAlarmSensor\fP provides a convenient way of setting up triggers for jobs which should be executed only once when they are scheduled\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoAlarmSensor::SoAlarmSensor (void)"
Default constructor\&. 
.SS "SoAlarmSensor::SoAlarmSensor (\fBSoSensorCB\fP * func, void * data)"
Constructor taking as parameters the sensor callback function and the userdata which will be passed the callback\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetFunction()\fP, \fBsetData()\fP 
.RE
.PP

.SS "SoAlarmSensor::~SoAlarmSensor (void)\fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void SoAlarmSensor::setTime (const \fBSbTime\fP & abstime)"
Set the time at which the sensor will trigger\&.
.PP
Note that you must manually \fBschedule()\fP the sensor after calling this method\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTimeFromNow()\fP, \fBgetTime()\fP 
.RE
.PP

.SS "void SoAlarmSensor::setTimeFromNow (const \fBSbTime\fP & reltime)"
Set the alarm to be at a specified offset from the current time\&.
.PP
Note that you must manually \fBschedule()\fP the sensor after calling this method\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTime()\fP, \fBgetTime()\fP 
.RE
.PP

.SS "const \fBSbTime\fP & SoAlarmSensor::getTime (void) const"
Returns the trigger time for the alarm as an absolute value from 1970-01-01 00:00:00\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetTime()\fP, \fBsetTimeFromNow()\fP 
.RE
.PP

.SS "void SoAlarmSensor::schedule (void)\fC [virtual]\fP"
Put the sensor in the global timer queue\&.
.PP
\fBSee also:\fP
.RS 4
\fBunschedule()\fP, \fBisScheduled()\fP 
.RE
.PP

.PP
Reimplemented from \fBSoTimerQueueSensor\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
