.TH "SoMFEnum" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoMFEnum \- The \fBSoMFEnum\fP class is a container for a set of enumerated values\&.
.PP
This field is used where nodes, engines or other field containers needs to store values constrained to be from an enumerated set\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/fields/SoMFEnum\&.h>\fP
.PP
Inherits \fBSoMField\fP\&.
.PP
Inherited by \fBSoMFBitMask\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBcopyFrom\fP (const \fBSoField\fP &field)"
.br
.ti -1c
.RI "const \fBSoMFEnum\fP & \fBoperator=\fP (const \fBSoMFEnum\fP &field)"
.br
.ti -1c
.RI "virtual SbBool \fBisSame\fP (const \fBSoField\fP &field) const"
.br
.ti -1c
.RI "\fBint\fP \fBoperator[]\fP (const \fBint\fP idx) const"
.br
.ti -1c
.RI "const \fBint\fP * \fBgetValues\fP (const \fBint\fP start) const"
.br
.ti -1c
.RI "\fBint\fP \fBfind\fP (\fBint\fP value, SbBool addifnotfound=FALSE)"
.br
.ti -1c
.RI "void \fBsetValues\fP (const \fBint\fP start, const \fBint\fP \fBnum\fP, const \fBint\fP *newvals)"
.br
.ti -1c
.RI "void \fBset1Value\fP (const \fBint\fP idx, \fBint\fP value)"
.br
.ti -1c
.RI "void \fBsetValue\fP (\fBint\fP value)"
.br
.ti -1c
.RI "\fBint\fP \fBoperator=\fP (\fBint\fP val)"
.br
.ti -1c
.RI "SbBool \fBoperator==\fP (const \fBSoMFEnum\fP &field) const"
.br
.ti -1c
.RI "SbBool \fBoperator!=\fP (const \fBSoMFEnum\fP &field) const"
.br
.ti -1c
.RI "\fBint\fP * \fBstartEditing\fP (void)"
.br
.ti -1c
.RI "void \fBfinishEditing\fP (void)"
.br
.ti -1c
.RI "void \fBsetValue\fP (const \fBSbName\fP name)"
.br
.ti -1c
.RI "void \fBset1Value\fP (const \fBint\fP idx, const \fBSbName\fP name)"
.br
.ti -1c
.RI "void \fBsetEnums\fP (const \fBint\fP \fBnum\fP, const \fBint\fP *const values, const \fBSbName\fP *const names)"
.br
.ti -1c
.RI "\fBint\fP \fBgetNumEnums\fP (void) const"
.br
.ti -1c
.RI "\fBint\fP \fBgetEnum\fP (const \fBint\fP idx, \fBSbName\fP &name) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdeleteAllValues\fP (void)"
.br
.ti -1c
.RI "virtual void \fBcopyValue\fP (\fBint\fP to, \fBint\fP from)"
.br
.ti -1c
.RI "virtual \fBint\fP \fBfieldSizeof\fP (void) const"
.br
.ti -1c
.RI "virtual void * \fBvaluesPtr\fP (void)"
.br
.ti -1c
.RI "virtual void \fBsetValuesPtr\fP (void *ptr)"
.br
.ti -1c
.RI "virtual void \fBallocValues\fP (\fBint\fP \fBnum\fP)"
.br
.ti -1c
.RI "virtual SbBool \fBfindEnumValue\fP (const \fBSbName\fP &name, \fBint\fP &value)"
.br
.ti -1c
.RI "virtual SbBool \fBfindEnumName\fP (\fBint\fP value, const \fBSbName\fP *&name) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBint\fP * \fBvalues\fP"
.br
.ti -1c
.RI "SbBool \fBlegalValuesSet\fP"
.br
.ti -1c
.RI "\fBint\fP \fBnumEnums\fP"
.br
.ti -1c
.RI "\fBint\fP * \fBenumValues\fP"
.br
.ti -1c
.RI "\fBSbName\fP * \fBenumNames\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoMFEnum\fP class is a container for a set of enumerated values\&.
.PP
This field is used where nodes, engines or other field containers needs to store values constrained to be from an enumerated set\&. 

A field of this type stores its values to file as the symbolic names, rather than the actual integer values\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoSFEnum\fP, \fBSoMFBitMask\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoMFEnum::getTypeId (void) const\fC [virtual]\fP"
Returns the type identification instance which uniquely identifies the Coin field class the object belongs to\&.
.PP
\fBSee also:\fP
.RS 4
getClassTypeId(), \fBSoType\fP 
.RE
.PP

.PP
Implements \fBSoField\fP\&.
.PP
Reimplemented in \fBSoMFBitMask\fP\&.
.SS "void SoMFEnum::copyFrom (const \fBSoField\fP & f)\fC [virtual]\fP"
Copy value(s) from \fIf\fP into this field\&. \fIf\fP must be of the same type as this field\&. 
.PP
Implements \fBSoField\fP\&.
.PP
Reimplemented in \fBSoMFBitMask\fP\&.
.SS "SbBool SoMFEnum::isSame (const \fBSoField\fP & f) const\fC [virtual]\fP"
Check for equal type and value(s)\&. 
.PP
Implements \fBSoField\fP\&.
.PP
Reimplemented in \fBSoMFBitMask\fP\&.
.SS "void SoMFEnum::deleteAllValues (void)\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.PP
Implements \fBSoMField\fP\&.
.SS "void SoMFEnum::copyValue (\fBint\fP to, \fBint\fP from)\fC [protected]\fP, \fC [virtual]\fP"
This method is used for moving values around internally within a multivalue field\&. It needs to be overridden in each field so it automatically takes care of running copy contructors where necessary\&. 
.PP
Implements \fBSoMField\fP\&.
.SS "const \fBint\fP* SoMFEnum::getValues (const \fBint\fP start) const\fC [inline]\fP"
\\ Returns a pointer to the values array\&. \\ 
.SS "void SoMFEnum::setValue (const \fBSbName\fP name)"
Set this field to contain a single value by specifying an enumeration string\&. 
.SS "void SoMFEnum::set1Value (const \fBint\fP idx, const \fBSbName\fP name)"
Set the value at \fIidx\fP to the enumeration value represented by \fIname\fP\&. 
.SS "void SoMFEnum::setEnums (const \fBint\fP numarg, const \fBint\fP *const vals, const \fBSbName\fP *const names)"
Makes a set of \fInum\fP enumeration \fInames\fP map to \fIvals\fP\&. 
.SS "\fBint\fP SoMFEnum::getNumEnums (void) const"
Returns the number of enum names the \fBSoSFEnum\fP object understands\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.0 
.RE
.PP

.SS "\fBint\fP SoMFEnum::getEnum (const \fBint\fP idx, \fBSbName\fP & name) const"
Returns the value of the Nth enum this \fBSoSFEnum\fP object understands, and mutates \fIname\fP to contain the Nth enum's name\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.0 
.RE
.PP

.SS "SbBool SoMFEnum::findEnumValue (const \fBSbName\fP & name, \fBint\fP & val)\fC [protected]\fP, \fC [virtual]\fP"
Return in \fIval\fP the enumeration value which matches the given enumeration \fIname\fP\&.
.PP
Returns \fCTRUE\fP if \fIname\fP is a valid enumeration string, otherwise \fCFALSE\fP\&. 
.SS "SbBool SoMFEnum::findEnumName (\fBint\fP value, const \fBSbName\fP *& name) const\fC [protected]\fP, \fC [virtual]\fP"
Set the enumeration \fIname\fP which matches the given enumeration value\&.
.PP
Returns \fCTRUE\fP if \fIvalue\fP is a valid enumeration value, otherwise \fCFALSE\fP\&. 
.SH "Member Data Documentation"
.PP 
.SS "SbBool SoMFEnum::legalValuesSet\fC [protected]\fP"
Is \fCTRUE\fP if a set of enum name-to-value mappings has been set\&. 
.SS "\fBint\fP SoMFEnum::numEnums\fC [protected]\fP"
Number of enumeration mappings\&. 
.SS "\fBint\fP * SoMFEnum::enumValues\fC [protected]\fP"
Array of enumeration values\&. Maps 1-to-1 with the enumNames\&. 
.SS "\fBSbName\fP * SoMFEnum::enumNames\fC [protected]\fP"
Array of enumeration names\&. Maps 1-to-1 with the enumValues\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
