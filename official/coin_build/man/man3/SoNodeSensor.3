.TH "SoNodeSensor" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoNodeSensor \- The \fBSoNodeSensor\fP class detects changes to nodes\&.
.PP
Attach a node to a sensor of this type to put it under surveillance, so you can act upon changes to the node\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/sensors/SoNodeSensor\&.h>\fP
.PP
Inherits \fBSoDataSensor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoNodeSensor\fP (void)"
.br
.ti -1c
.RI "\fBSoNodeSensor\fP (\fBSoSensorCB\fP *\fBfunc\fP, void *data)"
.br
.ti -1c
.RI "virtual \fB~SoNodeSensor\fP (void)"
.br
.ti -1c
.RI "void \fBattach\fP (\fBSoNode\fP *node)"
.br
.ti -1c
.RI "void \fBdetach\fP (void)"
.br
.ti -1c
.RI "\fBSoNode\fP * \fBgetAttachedNode\fP (void) const"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoNodeSensor\fP class detects changes to nodes\&.
.PP
Attach a node to a sensor of this type to put it under surveillance, so you can act upon changes to the node\&. 

Any modification to the node's fields will trigger the sensor, as will changes to node's children (if any), including if nodes are added or removed as children below the node in the subgraph\&.
.PP
An \fBSoNodeSensor\fP can also act for delete-callback purposes alone and does not need a regular notification-based callback\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoNodeSensor::SoNodeSensor (void)"
Default constructor\&. 
.SS "SoNodeSensor::SoNodeSensor (\fBSoSensorCB\fP * func, void * data)"
Constructor taking as parameters the sensor callback function and the userdata which will be passed the callback\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetFunction()\fP, \fBsetData()\fP 
.RE
.PP

.SS "SoNodeSensor::~SoNodeSensor (void)\fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void SoNodeSensor::attach (\fBSoNode\fP * node)"
Attach sensor to a node\&. Whenever any data in the node (or its children, if it's an \fBSoGroup\fP or \fBSoGroup\fP derived node) changes, the sensor will be triggered and call the callback function\&.
.PP
Attaching a node sensor to a node will \fInot\fP increase the node's reference count (and conversely, \fBdetach()\fP'ing the node sensor will not decrease the reference count, either)\&.
.PP
When the attached node is deleted, the sensor will be automatically detached()\&.
.PP
\fBSee also:\fP
.RS 4
\fBdetach()\fP 
.RE
.PP

.SS "void SoNodeSensor::detach (void)"
Detach sensor from node\&. As long as an \fBSoNodeSensor\fP is detached, it will never call its callback function\&.
.PP
\fBSee also:\fP
.RS 4
\fBattach()\fP 
.RE
.PP

.SS "\fBSoNode\fP * SoNodeSensor::getAttachedNode (void) const"
Returns a pointer to the node connected to the sensor\&.
.PP
\fBSee also:\fP
.RS 4
\fBattach()\fP, \fBdetach()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
