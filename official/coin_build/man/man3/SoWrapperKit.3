.TH "SoWrapperKit" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoWrapperKit \- The \fBSoWrapperKit\fP class is a simple kit for wrapping a transform and a sub-graph\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodekits/SoWrapperKit\&.h>\fP
.PP
Inherits \fBSoSeparatorKit\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoWrapperKit\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoWrapperKit\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBcontents\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBlocalTransform\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoWrapperKit\fP class is a simple kit for wrapping a transform and a sub-graph\&. 

Node kit structure (new entries versus parent class marked with arrow prefix):
.PP
.PP
.nf
CLASS SoWrapperKit
-->"this"
      "callbackList"
      "topSeparator"
         "pickStyle"
         "appearance"
         "units"
         "transform"
         "texture2Transform"
         "childList"
-->      "localTransform"
-->      "contents"
.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoWrapperKit
PVT   "this",  SoWrapperKit  --- 
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ] 
PVT   "topSeparator",  SoSeparator  --- 
      "pickStyle",  SoPickStyle  --- 
      "appearance",  SoAppearanceKit  --- 
      "units",  SoUnits  --- 
      "transform",  SoTransform  --- 
      "texture2Transform",  SoTexture2Transform  --- 
      "childList",  SoNodeKitListPart [ SoShapeKit, SoSeparatorKit ] 
      "localTransform",  SoTransform  --- 
      "contents",  SoSeparator  --- 
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoWrapperKit::SoWrapperKit (void)"
Constructor\&. 
.SS "SoWrapperKit::~SoWrapperKit ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoWrapperKit::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoSeparatorKit\fP\&.
.SS "const \fBSoFieldData\fP * SoWrapperKit::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoSeparatorKit\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoWrapperKit::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoSeparatorKit\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
