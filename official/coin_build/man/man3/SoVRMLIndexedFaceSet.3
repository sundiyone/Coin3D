.TH "SoVRMLIndexedFaceSet" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoVRMLIndexedFaceSet \- The \fBSoVRMLIndexedFaceSet\fP class is used for representing a generic 3D shape\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/VRMLnodes/SoVRMLIndexedFaceSet\&.h>\fP
.PP
Inherits \fBSoVRMLIndexedShape\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoVRMLIndexedFaceSet\fP (void)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *s, \fBSoNormalBundle\fP *nb)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *state, \fBSoNormalCache\fP *nc)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFBool\fP \fBccw\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBsolid\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBconvex\fP"
.br
.ti -1c
.RI "\fBSoSFFloat\fP \fBcreaseAngle\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoVRMLIndexedFaceSet\fP ()"
.br
.ti -1c
.RI "virtual void \fBgeneratePrimitives\fP (\fBSoAction\fP *action)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoVRMLIndexedFaceSet\fP class is used for representing a generic 3D shape\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP 


.PP
.nf
IndexedFaceSet {
  eventIn       MFInt32 set_colorIndex
  eventIn       MFInt32 set_coordIndex
  eventIn       MFInt32 set_normalIndex
  eventIn       MFInt32 set_texCoordIndex
  exposedField  SFNode  color             NULL
  exposedField  SFNode  coord             NULL
  exposedField  SFNode  normal            NULL
  exposedField  SFNode  texCoord          NULL
  field         SFBool  ccw               TRUE
  field         MFInt32 colorIndex        []        # [-1,)
  field         SFBool  colorPerVertex    TRUE
  field         SFBool  convex            TRUE
  field         MFInt32 coordIndex        []        # [-1,)
  field         SFFloat creaseAngle       0         # [0,)
  field         MFInt32 normalIndex       []        # [-1,)
  field         SFBool  normalPerVertex   TRUE
  field         SFBool  solid             TRUE
  field         MFInt32 texCoordIndex     []        # [-1,)
}

.fi
.PP
.PP
The IndexedFaceSet node represents a 3D shape formed by constructing faces (polygons) from vertices listed in the coord field\&. The coord field contains a Coordinate node that defines the 3D vertices referenced by the coordIndex field\&. IndexedFaceSet uses the indices in its coordIndex field to specify the polygonal faces by indexing into the coordinates in the Coordinate node\&. An index of '-1' indicates that the current face has ended and the next one begins\&. The last face may be (but does not have to be) followed by a '-1' index\&. If the greatest index in the coordIndex field is N, the Coordinate node shall contain N+1 coordinates (indexed as 0 to N)\&. Each face of the IndexedFaceSet shall have:
.PP
.IP "\(bu" 2
at least three non-coincident vertices;
.IP "\(bu" 2
vertices that define a planar polygon;
.IP "\(bu" 2
vertices that define a non-self-intersecting polygon\&.
.PP
.PP
Otherwise, The results are undefined\&.
.PP
The IndexedFaceSet node is specified in the local coordinate system and is affected by the transformations of its ancestors\&.
.PP
Descriptions of the coord, normal, and texCoord fields are provided in the \fBSoVRMLCoordinate\fP, \fBSoVRMLNormal\fP, and \fBSoVRMLTextureCoordinate\fP nodes, respectively\&.
.PP
Details on lighting equations and the interaction between color field, normal field, textures, materials, and geometries are provided in 4\&.14, Lighting model\&.
.PP
If the color field is not NULL, it shall contain a Color node whose colours are applied to the vertices or faces of the IndexedFaceSet as follows:
.PP
.IP "\(bu" 2
If colorPerVertex is FALSE, colours are applied to each face, as follows:
.IP "  \(bu" 4
If the colorIndex field is not empty, then one colour is used for each face of the IndexedFaceSet\&. There shall be at least as many indices in the colorIndex field as there are faces in the IndexedFaceSet\&. If the greatest index in the colorIndex field is N, then there shall be N+1 colours in the Color node\&. The colorIndex field shall not contain any negative entries\&.
.IP "  \(bu" 4
If the colorIndex field is empty, then the colours in the Color node are applied to each face of the IndexedFaceSet in order\&. There shall be at least as many colours in the Color node as there are faces\&.
.PP

.IP "\(bu" 2
If colorPerVertex is TRUE, colours are applied to each vertex, as follows:
.IP "  \(bu" 4
If the colorIndex field is not empty, then colours are applied to each vertex of the IndexedFaceSet in exactly the same manner that the coordIndex field is used to choose coordinates for each vertex from the Coordinate node\&. The colorIndex field shall contain at least as many indices as the coordIndex field, and shall contain end-of-face markers (-1) in exactly the same places as the coordIndex field\&. If the greatest index in the colorIndex field is N, then there shall be N+1 colours in the Color node\&.
.IP "  \(bu" 4
If the colorIndex field is empty, then the coordIndex field is used to choose colours from the Color node\&. If the greatest index in the coordIndex field is N, then there shall be N+1 colours in the Color node\&.
.PP

.PP
.PP
If the color field is NULL, the geometry shall be rendered normally using the Material and texture defined in the Appearance node (see 4\&.14, Lighting model, for details http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.5)\&.
.PP
If the normal field is not NULL, it shall contain a Normal node whose normals are applied to the vertices or faces of the IndexedFaceSet in a manner exactly equivalent to that described above for applying colours to vertices/faces (where normalPerVertex corresponds to colorPerVertex and normalIndex corresponds to colorIndex)\&. If the normal field is NULL, the browser shall automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices (see 4\&.6\&.3\&.5, Crease angle field)\&.
.PP
If the texCoord field is not NULL, it shall contain a TextureCoordinate node\&. The texture coordinates in that node are applied to the vertices of the IndexedFaceSet as follows: If the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet in exactly the same manner that the coordIndex field is used to choose coordinates for each vertex from the Coordinate node\&. The texCoordIndex field shall contain at least as many indices as the coordIndex field, and shall contain end-of-face markers (-1) in exactly the same places as the coordIndex field\&. If the greatest index in the texCoordIndex field is N, then there shall be N+1 texture coordinates in the TextureCoordinate node\&.
.PP
If the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\&. If the greatest index in the coordIndex field is N, then there shall be N+1 texture coordinates in the TextureCoordinate node\&. If the texCoord field is NULL, a default texture coordinate mapping is calculated using the local coordinate system bounding box of the shape\&. The longest dimension of the bounding box defines the S coordinates, and the next longest defines the T coordinates\&. If two or all three dimensions of the bounding box are equal, ties shall be broken by choosing the X, Y, or Z dimension in that order of preference\&. The value of the S coordinate ranges from 0 to 1, from one end of the bounding box to the other\&. The T coordinate ranges between 0 and the ratio of the second greatest dimension of the bounding box to the greatest dimension\&. Figure 6\&.10 illustrates the default texture coordinates for a simple box shaped IndexedFaceSet with an X dimension twice as large as the Z dimension and four times as large as the Y dimension\&. Figure 6\&.11 illustrates the original texture image used on the IndexedFaceSet used in Figure 6\&.10\&.
.PP
  Figure 6\&.10 
.PP
  Figure 6\&.11 
.PP
Subclause 4\&.6\&.3, Shapes and geometry (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.5), provides a description of the ccw, solid, convex, and creaseAngle fields\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoVRMLIndexedFaceSet::SoVRMLIndexedFaceSet (void)"
Constructor\&. 
.SS "SoVRMLIndexedFaceSet::~SoVRMLIndexedFaceSet ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoVRMLIndexedFaceSet::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoVRMLIndexedShape\fP\&.
.SS "const \fBSoFieldData\fP * SoVRMLIndexedFaceSet::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoVRMLIndexedShape\fP\&.
.SS "void SoVRMLIndexedFaceSet::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoVRMLVertexShape\fP\&.
.SS "void SoVRMLIndexedFaceSet::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.SS "SbBool SoVRMLIndexedFaceSet::generateDefaultNormals (\fBSoState\fP * s, \fBSoNormalBundle\fP * nb)\fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalBundle\fP class\&. \fCTRUE\fP should be returned if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVRMLVertexShape\fP\&.
.SS "SbBool SoVRMLIndexedFaceSet::generateDefaultNormals (\fBSoState\fP * s, \fBSoNormalCache\fP * nc)\fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalCache\fP class\&. This is more effective than using \fBSoNormalGenerator\fP\&. Return \fCTRUE\fP if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method just returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVRMLVertexShape\fP\&.
.SS "void SoVRMLIndexedFaceSet::generatePrimitives (\fBSoAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
The method implements action behavior for shape nodes for \fBSoCallbackAction\fP\&. It is invoked from \fBSoShape::callback()\fP\&. (Subclasses should \fInot\fP override \fBSoNode::callback()\fP\&.)
.PP
The subclass implementations uses the convenience methods \fBSoShape::beginShape()\fP, \fBSoShape::shapeVertex()\fP, and \fBSoShape::endShape()\fP, with \fBSoDetail\fP instances, to pass the primitives making up the shape back to the caller\&. 
.PP
Implements \fBSoShape\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFBool\fP SoVRMLIndexedFaceSet::ccw"
Specifies if vertex ordering is counterclockwise\&. Default value is TRUE\&. 
.SS "\fBSoSFBool\fP SoVRMLIndexedFaceSet::solid"
Can be used to enable backface culling\&. Default value is TRUE\&. 
.SS "\fBSoSFBool\fP SoVRMLIndexedFaceSet::convex"
Specifies if all polygons are convex\&. Default value is TRUE\&. 
.SS "\fBSoSFFloat\fP SoVRMLIndexedFaceSet::creaseAngle"
Specifies the crease angle for the generated normals\&. Default value is 0\&.0\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
