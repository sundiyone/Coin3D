.TH "SoGLColorIndexElement" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoGLColorIndexElement \- The \fBSoGLColorIndexElement\fP class sets the current OpenGL color\&.
.PP
This element is only used when the OpenGL canvas is in colorindex mode, ie where colors for individual pixels are fetched from a color lookup table ('CLUT')\&. The usual thing to do is to set up a canvas in RGBA truecolor mode\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/elements/SoGLColorIndexElement\&.h>\fP
.PP
Inherits \fBSoReplacedElement\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBinit\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "int32_t \fBgetNum\fP (void) const"
.br
.ti -1c
.RI "int32_t \fBget\fP (const \fBint\fP index) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetClassStackIndex\fP (void)"
.br
.ti -1c
.RI "static void * \fBcreateInstance\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static SbBool \fBisColorIndexMode\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static void \fBset\fP (\fBSoState\fP *const state, \fBSoNode\fP *const node, const int32_t numindices, const int32_t *const indices)"
.br
.ti -1c
.RI "static const \fBSoGLColorIndexElement\fP * \fBgetInstance\fP (\fBSoState\fP *state)"
.br
.ti -1c
.RI "static int32_t \fBgetDefault\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoGLColorIndexElement\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoGLColorIndexElement\fP class sets the current OpenGL color\&.
.PP
This element is only used when the OpenGL canvas is in colorindex mode, ie where colors for individual pixels are fetched from a color lookup table ('CLUT')\&. The usual thing to do is to set up a canvas in RGBA truecolor mode\&. 

One common use for colorindex mode OpenGL canvases is to use one in the overlay planes (which are usually limited to only 2 or 4 available colors), if supported by the OpenGL hardware and / or driver\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoColorIndex\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoGLColorIndexElement::~SoGLColorIndexElement ()\fC [protected]\fP, \fC [virtual]\fP"
The destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void * SoGLColorIndexElement::createInstance (void)\fC [static]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "SbBool SoGLColorIndexElement::isColorIndexMode (\fBSoState\fP * state)\fC [static]\fP"
Returns \fCTRUE\fP if the current GL context is in color index mode\&. 
.SS "void SoGLColorIndexElement::init (\fBSoState\fP * state)\fC [virtual]\fP"
This function initializes the element type in the given \fBSoState\fP\&. It is called for the first element of each enabled element type in \fBSoState\fP objects\&. 
.PP
Reimplemented from \fBSoReplacedElement\fP\&.
.SS "void SoGLColorIndexElement::set (\fBSoState\fP *const state, \fBSoNode\fP *const node, const int32_t numindices, const int32_t *const indices)\fC [static]\fP"
Sets current color indices\&. 
.SS "const \fBSoGLColorIndexElement\fP * SoGLColorIndexElement::getInstance (\fBSoState\fP * state)\fC [static]\fP"
Returns the current element\&. 
.SS "int32_t SoGLColorIndexElement::getNum (void) const"
Returns number of color indices in element\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
