.TH "SoTexture3" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoTexture3 \- The \fBSoTexture3\fP class is used to map a 3D texture onto geometry\&.
.PP
Shape nodes within the scope of \fBSoTexture3\fP nodes in the scenegraph (ie below the same \fBSoSeparator\fP and to the righthand side of the \fBSoTexture3\fP) will have the texture applied according to each shape type's individual characteristics\&. See the documentation of the various shape types (\fBSoFaceSet\fP, \fBSoCube\fP, \fBSoSphere\fP, etc etc) for information about the specifics of how the textures will be applied\&. An \fBSoTexture3\fP node will override any previous encountered \fBSoTexture2\fP nodes and vice versa\&. Mixing of \fBSoTexture3\fP and \fBSoTextureCoordinate2\fP (or the other way around) is legal, but the third texture coordinate component will be ignored (set to 0\&.0)\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoTexture3\&.h>\fP
.PP
Inherits \fBSoTexture\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBModel\fP { \fBMODULATE\fP = SoMultiTextureImageElement::MODULATE, \fBDECAL\fP = SoMultiTextureImageElement::DECAL, \fBBLEND\fP = SoMultiTextureImageElement::BLEND }"
.br
.ti -1c
.RI "enum \fBWrap\fP { \fBREPEAT\fP = SoMultiTextureImageElement::REPEAT, \fBCLAMP\fP = SoMultiTextureImageElement::CLAMP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoTexture3\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoMFString\fP \fBfilenames\fP"
.br
.ti -1c
.RI "\fBSoSFImage3\fP \fBimages\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapR\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapS\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBwrapT\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBmodel\fP"
.br
.ti -1c
.RI "\fBSoSFColor\fP \fBblendColor\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBenableCompressedTexture\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoTexture3\fP ()"
.br
.ti -1c
.RI "virtual SbBool \fBreadInstance\fP (\fBSoInput\fP *in, unsigned short flags)"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.ti -1c
.RI "\fBint\fP \fBgetReadStatus\fP (void)"
.br
.ti -1c
.RI "void \fBsetReadStatus\fP (\fBint\fP s)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoTexture3\fP class is used to map a 3D texture onto geometry\&.
.PP
Shape nodes within the scope of \fBSoTexture3\fP nodes in the scenegraph (ie below the same \fBSoSeparator\fP and to the righthand side of the \fBSoTexture3\fP) will have the texture applied according to each shape type's individual characteristics\&. See the documentation of the various shape types (\fBSoFaceSet\fP, \fBSoCube\fP, \fBSoSphere\fP, etc etc) for information about the specifics of how the textures will be applied\&. An \fBSoTexture3\fP node will override any previous encountered \fBSoTexture2\fP nodes and vice versa\&. Mixing of \fBSoTexture3\fP and \fBSoTextureCoordinate2\fP (or the other way around) is legal, but the third texture coordinate component will be ignored (set to 0\&.0)\&. 

 Rendering of an Example Texture3
.PP
Be aware that this class is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
Texture3 {
    filenames ""
    images 0 0 0 0
    wrapR REPEAT
    wrapS REPEAT
    wrapT REPEAT
    model MODULATE
    blendColor 0 0 0
    enableCompressedTexture FALSE
}

.fi
.PP
.PP
\fBSince:\fP
.RS 4
Coin 2\&.0 
.PP
TGS Inventor 2\&.6 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoTexture3::Model\fP"
Texture mapping model\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMODULATE \fP\fP
Texture image is modulated with polygon\&. 
.TP
\fB\fIDECAL \fP\fP
Texture image overwrites polygon color\&. 
.TP
\fB\fIBLEND \fP\fP
Blend image using blendColor\&. 
.SS "enum \fBSoTexture3::Wrap\fP"
Enum used to specify wrapping strategy\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIREPEAT \fP\fP
Repeat texture when coordinate is not between 0 and 1\&. 
.TP
\fB\fICLAMP \fP\fP
Clamp coordinate between 0 and 1\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoTexture3::SoTexture3 (void)"
Constructor\&. 
.SS "SoTexture3::~SoTexture3 ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoTexture3::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "const \fBSoFieldData\fP * SoTexture3::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture3::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture3::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "void SoTexture3::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoTexture\fP\&.
.SS "SbBool SoTexture3::readInstance (\fBSoInput\fP * in, unsigned short flags)\fC [protected]\fP, \fC [virtual]\fP"
This method is mainly intended for internal use during file import operations\&.
.PP
It reads a definition of an instance from the input stream \fIin\fP\&. The input stream state points to the start of a serialized / persistant representation of an instance of this class type\&.
.PP
\fCTRUE\fP or \fCFALSE\fP is returned, depending on if the instantiation and configuration of the new object of this class type went ok or not\&. The import process should be robust and handle corrupted input streams by returning \fCFALSE\fP\&.
.PP
\fIflags\fP is used internally during binary import when reading user extension nodes, group nodes or engines\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoTexture3::notify (\fBSoNotList\fP * l)\fC [protected]\fP, \fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "\fBint\fP SoTexture3::getReadStatus (void)\fC [protected]\fP"
Returns read status\&. 1 for success, 0 for failure\&. 
.SS "void SoTexture3::setReadStatus (\fBint\fP s)\fC [protected]\fP"
Sets read status\&. 
.PP
\fBSee also:\fP
.RS 4
\fBgetReadStatus()\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBSoMFString\fP SoTexture3::filenames"
Texture filename(s)\&. Specify either this or use \fBSoTexture3::images\fP, not both\&. The depth of the volume is specifies by the number of filenames specified\&. All images must have the same dimensions and number of components\&. NB! A field sensor is attached to this field internally and reloads all images when this field changes\&. You must therefore be careful when setting this field and either use startEditing()/finishEditing() or set all values with one function call; setValues()\&. 
.SS "\fBSoSFImage3\fP SoTexture3::images"
Inline image data\&. 
.SS "\fBSoSFEnum\fP SoTexture3::wrapR"
Wrapping strategy for the R coordinate (depth)\&. 
.SS "\fBSoSFEnum\fP SoTexture3::wrapS"
Wrapping strategy for the S coordinate\&. 
.SS "\fBSoSFEnum\fP SoTexture3::wrapT"
Wrapping strategy for the T coordinate\&. 
.SS "\fBSoSFEnum\fP SoTexture3::model"
Texture model\&. 
.SS "\fBSoSFColor\fP SoTexture3::blendColor"
Blend color\&. Used when \fBSoTexture3::model\fP is \fBSoTexture3::BLEND\fP\&. 
.SS "\fBSoSFBool\fP SoTexture3::enableCompressedTexture"
Hint to Coin that compressed textures should be used if this is supported by the graphics hardware and OpenGL drivers\&. Using compressed textures usually reduces texture memory usage for a texture by 4-6 times\&.
.PP
\fBSince:\fP
.RS 4
Coin 2\&.4\&.2 
.PP
TGS Inventor 4\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
