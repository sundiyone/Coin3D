.TH "SoTransformBoxDragger" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoTransformBoxDragger \- The \fBSoTransformBoxDragger\fP provides a box which can be translated, scaled and rotated\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state:  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/draggers/SoTransformBoxDragger\&.h>\fP
.PP
Inherits \fBSoDragger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoTransformBoxDragger\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFRotation\fP \fBrotation\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBtranslation\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBscaleFactor\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoTransformBoxDragger\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBsetUpConnections\fP (SbBool onoff, SbBool doitalways=FALSE)"
.br
.ti -1c
.RI "virtual void \fBsetDefaultOnNonWritingFields\fP (void)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.ti -1c
.RI "static void \fBinvalidateSurroundScaleCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBfieldSensorCB\fP (void *f, \fBSoSensor\fP *s)"
.br
.ti -1c
.RI "static void \fBvalueChangedCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBantiSquish\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator1\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator1Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator1Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator2\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator2Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator2Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator3\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator3Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator3Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBscaler\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBsurroundScale\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator1\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator1Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator1Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator2\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator2Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator2Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator3\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator3Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator3Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator4\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator4Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator4Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator5\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator5Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator5Sep\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator6\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator6Rot\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtranslator6Sep\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBrotFieldSensor\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBtranslFieldSensor\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBscaleFieldSensor\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoTransformBoxDragger\fP provides a box which can be translated, scaled and rotated\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state: 

 Screen Shot of Default Dragger
.PP
Translate the dragger by clicking and dragging any of the (invisible) sides\&. Scaling is done by dragging the corner cubes\&. Only uniform scaling is supported\&. Rotation is done by dragging any of the 12 beams connecting the corner cubes\&.
.PP
This dragger consists of a rigid framework for doing all the usual interaction operations on scene geometry\&. The 'user interface' of the dragger is very simple, providing little room for the end-user to make mistakes\&.
.PP
For the application programmer's convenience, the Coin library also provides a manipulator class called \fBSoTransformBoxManip\fP, which wraps the \fBSoTransformBoxDragger\fP into the necessary mechanisms for making direct insertion of this dragger into a scenegraph possible with very little effort\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoTransformBoxManip\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoTransformBoxDragger::SoTransformBoxDragger (void)"
Default constructor, sets up the dragger nodekit catalog with the interaction and feedback geometry\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix):
.PP
.PP
.nf
CLASS SoTransformBoxDragger
-->"this"
      "callbackList"
      "topSeparator"
         "motionMatrix"
-->      "surroundScale"
-->      "antiSquish"
-->      "scaler"
-->      "rotator1Sep"
-->         "rotator1Rot"
-->         "rotator1"
-->      "rotator2Sep"
-->         "rotator2Rot"
-->         "rotator2"
-->      "rotator3Sep"
-->         "rotator3Rot"
-->         "rotator3"
-->      "translator1Sep"
-->         "translator1Rot"
-->         "translator1"
-->      "translator2Sep"
-->         "translator2Rot"
-->         "translator2"
-->      "translator3Sep"
-->         "translator3Rot"
-->         "translator3"
-->      "translator4Sep"
-->         "translator4Rot"
-->         "translator4"
-->      "translator5Sep"
-->         "translator5Rot"
-->         "translator5"
-->      "translator6Sep"
-->         "translator6Rot"
-->         "translator6"
         "geomSeparator"
.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoTransformBoxDragger
PVT   "this",  SoTransformBoxDragger  ---
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ]
PVT   "topSeparator",  SoSeparator  ---
PVT   "motionMatrix",  SoMatrixTransform  ---
      "surroundScale",  SoSurroundScale  ---
      "antiSquish",  SoAntiSquish  ---
      "scaler",  SoScaleUniformDragger  ---
PVT   "rotator1Sep",  SoSeparator  ---
PVT   "rotator1Rot",  SoRotation  ---
      "rotator1",  SoRotateCylindricalDragger  ---
PVT   "rotator2Sep",  SoSeparator  ---
PVT   "rotator2Rot",  SoRotation  ---
      "rotator2",  SoRotateCylindricalDragger  ---
PVT   "rotator3Sep",  SoSeparator  ---
PVT   "rotator3Rot",  SoRotation  ---
      "rotator3",  SoRotateCylindricalDragger  ---
PVT   "translator1Sep",  SoSeparator  ---
PVT   "translator1Rot",  SoRotation  ---
      "translator1",  SoTranslate2Dragger  ---
PVT   "translator2Sep",  SoSeparator  ---
PVT   "translator2Rot",  SoRotation  ---
      "translator2",  SoTranslate2Dragger  ---
PVT   "translator3Sep",  SoSeparator  ---
PVT   "translator3Rot",  SoRotation  ---
      "translator3",  SoTranslate2Dragger  ---
PVT   "translator4Sep",  SoSeparator  ---
PVT   "translator4Rot",  SoRotation  ---
      "translator4",  SoTranslate2Dragger  ---
PVT   "translator5Sep",  SoSeparator  ---
PVT   "translator5Rot",  SoRotation  ---
      "translator5",  SoTranslate2Dragger  ---
PVT   "translator6Sep",  SoSeparator  ---
PVT   "translator6Rot",  SoRotation  ---
      "translator6",  SoTranslate2Dragger  ---
PVT   "geomSeparator",  SoSeparator  ---
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SS "SoTransformBoxDragger::~SoTransformBoxDragger (void)\fC [protected]\fP, \fC [virtual]\fP"
Protected destructor\&.
.PP
(Dragger classes are derived from \fBSoBase\fP, so they are reference counted and automatically destroyed when their reference count goes to 0\&.) 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoTransformBoxDragger::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoFieldData\fP * SoTransformBoxDragger::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoTransformBoxDragger::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "SbBool SoTransformBoxDragger::setUpConnections (SbBool onoff, SbBool doitalways = \fCFALSE\fP)\fC [protected]\fP, \fC [virtual]\fP"
Sets up all internal connections for instances of this class\&.
.PP
(This method will usually not be of interest to the application programmer, unless you want to extend the library with new custom nodekits or dragger classes\&. If so, see the \fBSoBaseKit\fP class documentation\&.) 
.PP
Reimplemented from \fBSoInteractionKit\fP\&.
.SS "void SoTransformBoxDragger::setDefaultOnNonWritingFields (void)\fC [protected]\fP, \fC [virtual]\fP"
(Be aware that this method is unlikely to be of interest to the application programmer who does not want to extend the library with new custom nodekits or draggers\&. If you indeed \fIare\fP writing extensions, see the information in the \fBSoBaseKit\fP class documentation\&.)
.PP
This is a virtual method, and the code in it should call \fBSoField::setDefault()\fP with argument \fCTRUE\fP on part fields that should not be written upon scenegraph export operations\&.
.PP
This is typically done when:
.PP
.PD 0
.IP "1." 4
field value is \fCNULL\fP and part is \fCNULL\fP by default 
.PP

.IP "2." 4
it is a leaf \fBSoGroup\fP or \fBSoSeparator\fP node with no children 
.PP

.IP "3." 4
it is a leaf listpart with no children and an \fBSoGroup\fP or \fBSoSeparator\fP container 
.PP

.IP "4." 4
it is a non-leaf part and it's of \fBSoGroup\fP type and all fields are at their default values 
.PP

.PP
.PP
Subclasses should usually override this to do additional settings for new member fields\&. From the subclass, do remember to call 'upwards' to your superclass' \fBsetDefaultOnNonWritingFields()\fP method\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "void SoTransformBoxDragger::invalidateSurroundScaleCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTransformBoxDragger::fieldSensorCB (void * d, \fBSoSensor\fP * s)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTransformBoxDragger::valueChangedCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFRotation\fP SoTransformBoxDragger::rotation"
This field is continuously updated to contain the rotation of the dragger's box\&. 
.SS "\fBSoSFVec3f\fP SoTransformBoxDragger::translation"
The dragger's offset position from the local origo\&. 
.SS "\fBSoSFVec3f\fP SoTransformBoxDragger::scaleFactor"
Continuously updated to contain the current vector of scaling along the X, Y and Z axes\&. The three components will always be equal, as this dragger only supports uniform scale operations\&. 
.SS "\fBSoFieldSensor\fP * SoTransformBoxDragger::rotFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSoFieldSensor\fP * SoTransformBoxDragger::translFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSoFieldSensor\fP * SoTransformBoxDragger::scaleFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
