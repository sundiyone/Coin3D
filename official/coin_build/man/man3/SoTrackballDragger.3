.TH "SoTrackballDragger" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoTrackballDragger \- The \fBSoTrackballDragger\fP provides the end-user with rotation and scaling interaction possibilities\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state:  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/draggers/SoTrackballDragger\&.h>\fP
.PP
Inherits \fBSoDragger\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoTrackballDragger\fP (void)"
.br
.ti -1c
.RI "SbBool \fBisAnimationEnabled\fP (void)"
.br
.ti -1c
.RI "void \fBsetAnimationEnabled\fP (SbBool newval)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFRotation\fP \fBrotation\fP"
.br
.ti -1c
.RI "\fBSoSFVec3f\fP \fBscaleFactor\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoTrackballDragger\fP (void)"
.br
.ti -1c
.RI "virtual SbBool \fBsetUpConnections\fP (SbBool onoff, SbBool doitalways=FALSE)"
.br
.ti -1c
.RI "virtual void \fBsetDefaultOnNonWritingFields\fP (void)"
.br
.ti -1c
.RI "void \fBdragStart\fP (void)"
.br
.ti -1c
.RI "void \fBdrag\fP (void)"
.br
.ti -1c
.RI "void \fBdragFinish\fP (void)"
.br
.ti -1c
.RI "void \fBsetAllPartsActive\fP (SbBool onoroff)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.ti -1c
.RI "static void \fBstartCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBmotionCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBfinishCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBmetaKeyChangeCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.ti -1c
.RI "static void \fBfieldSensorCB\fP (void *f, \fBSoSensor\fP *s)"
.br
.ti -1c
.RI "static void \fBvalueChangedCB\fP (void *f, \fBSoDragger\fP *d)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBXRotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBXRotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBXRotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBYRotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBYRotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBYRotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBZRotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBZRotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBZRotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBantiSquish\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBrotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBsurroundScale\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserAxis\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserAxisActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserAxisRotation\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserAxisSwitch\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserRotator\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserRotatorActive\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBuserRotatorSwitch\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBrotFieldSensor\fP"
.br
.ti -1c
.RI "\fBSoFieldSensor\fP * \fBscaleFieldSensor\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoTrackballDragger\fP provides the end-user with rotation and scaling interaction possibilities\&.
.PP
Here's how the dragger looks with its default geometry in the inactive state: 

 Screen Shot of Default Dragger
.PP
The dragger has three 'bands' around a transparent sphere, which when clicked and dragged will rotate around the three principal axes\&. In addition, the user can define his own rotation axis by holding down a SHIFT key while clicking with the left mouse button and dragging\&. A new, distinctively colored axis and dragger band will be then be added\&.
.PP
Free-form rotation on the sphere can be done by clicking and dragging \fIoutside\fP the pre-defined 'rotation bands'\&.
.PP
Scale operations are made available by holding down a CTRL key when clicking with the left mouse button\&. The dragger is then in scaling mode, and dragging while holding down the mouse button will \fIuniformly\fP scale the trackball sphere\&.
.PP
For the application programmer's convenience, the Coin library also provides a manipulator class called \fBSoTrackballManip\fP, which wraps the \fBSoTrackballDragger\fP into the necessary mechanisms for making direct insertion of this dragger into a scenegraph possible with very little effort\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoTrackballManip\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoTrackballDragger::SoTrackballDragger (void)"
Default constructor, sets up the dragger nodekit catalog with the interaction and feedback geometry\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix):
.PP
.PP
.nf
CLASS SoTrackballDragger
-->"this"
      "callbackList"
      "topSeparator"
         "motionMatrix"
-->      "surroundScale"
-->      "antiSquish"
         "geomSeparator"
-->         "rotatorSwitch"
-->            "rotator"
-->            "rotatorActive"
-->         "XRotatorSwitch"
-->            "XRotator"
-->            "XRotatorActive"
-->         "YRotatorSwitch"
-->            "YRotator"
-->            "YRotatorActive"
-->         "ZRotatorSwitch"
-->            "ZRotator"
-->            "ZRotatorActive"
-->         "userAxisRotation"
-->         "userAxisSwitch"
-->            "userAxis"
-->            "userAxisActive"
-->         "userRotatorSwitch"
-->            "userRotator"
-->            "userRotatorActive"
.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoTrackballDragger
PVT   "this",  SoTrackballDragger  --- 
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ] 
PVT   "topSeparator",  SoSeparator  --- 
PVT   "motionMatrix",  SoMatrixTransform  --- 
      "surroundScale",  SoSurroundScale  --- 
      "antiSquish",  SoAntiSquish  --- 
PVT   "geomSeparator",  SoSeparator  --- 
PVT   "rotatorSwitch",  SoSwitch  --- 
      "rotator",  SoSeparator  --- 
      "rotatorActive",  SoSeparator  --- 
PVT   "XRotatorSwitch",  SoSwitch  --- 
      "XRotator",  SoSeparator  --- 
      "XRotatorActive",  SoSeparator  --- 
PVT   "YRotatorSwitch",  SoSwitch  --- 
      "YRotator",  SoSeparator  --- 
      "YRotatorActive",  SoSeparator  --- 
PVT   "ZRotatorSwitch",  SoSwitch  --- 
      "ZRotator",  SoSeparator  --- 
      "ZRotatorActive",  SoSeparator  --- 
PVT   "userAxisRotation",  SoRotation  --- 
PVT   "userAxisSwitch",  SoSwitch  --- 
      "userAxis",  SoSeparator  --- 
      "userAxisActive",  SoSeparator  --- 
PVT   "userRotatorSwitch",  SoSwitch  --- 
      "userRotator",  SoSeparator  --- 
      "userRotatorActive",  SoSeparator  --- 
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SS "SoTrackballDragger::~SoTrackballDragger (void)\fC [protected]\fP, \fC [virtual]\fP"
Protected destructor\&.
.PP
(Dragger classes are derived from \fBSoBase\fP, so they are reference counted and automatically destroyed when their reference count goes to 0\&.) 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoTrackballDragger::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoFieldData\fP * SoTrackballDragger::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoTrackballDragger::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "SbBool SoTrackballDragger::isAnimationEnabled (void)"
Whether or not the trackball will start a spin animation after a quick drag-and-release\&.
.PP
Note: this feature is not supported yet in the Coin library, so even though if \fCTRUE\fP is returned, spin animations will not be possible to trigger\&. 
.SS "void SoTrackballDragger::setAnimationEnabled (SbBool newval)"
Set a flag which will decide whether or not the trackball will start a spin animation after a quick drag-and-release\&.
.PP
Note: this feature is not supported yet in the Coin library\&. 
.SS "SbBool SoTrackballDragger::setUpConnections (SbBool onoff, SbBool doitalways = \fCFALSE\fP)\fC [protected]\fP, \fC [virtual]\fP"
Sets up all internal connections for instances of this class\&.
.PP
(This method will usually not be of interest to the application programmer, unless you want to extend the library with new custom nodekits or dragger classes\&. If so, see the \fBSoBaseKit\fP class documentation\&.) 
.PP
Reimplemented from \fBSoInteractionKit\fP\&.
.SS "void SoTrackballDragger::setDefaultOnNonWritingFields (void)\fC [protected]\fP, \fC [virtual]\fP"
(Be aware that this method is unlikely to be of interest to the application programmer who does not want to extend the library with new custom nodekits or draggers\&. If you indeed \fIare\fP writing extensions, see the information in the \fBSoBaseKit\fP class documentation\&.)
.PP
This is a virtual method, and the code in it should call \fBSoField::setDefault()\fP with argument \fCTRUE\fP on part fields that should not be written upon scenegraph export operations\&.
.PP
This is typically done when:
.PP
.PD 0
.IP "1." 4
field value is \fCNULL\fP and part is \fCNULL\fP by default 
.PP

.IP "2." 4
it is a leaf \fBSoGroup\fP or \fBSoSeparator\fP node with no children 
.PP

.IP "3." 4
it is a leaf listpart with no children and an \fBSoGroup\fP or \fBSoSeparator\fP container 
.PP

.IP "4." 4
it is a non-leaf part and it's of \fBSoGroup\fP type and all fields are at their default values 
.PP

.PP
.PP
Subclasses should usually override this to do additional settings for new member fields\&. From the subclass, do remember to call 'upwards' to your superclass' \fBsetDefaultOnNonWritingFields()\fP method\&. 
.PP
Reimplemented from \fBSoDragger\fP\&.
.SS "void SoTrackballDragger::dragStart (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when dragger is selected (picked) by the user\&. 
.SS "void SoTrackballDragger::drag (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when user drags the mouse after picking the dragger\&. 
.SS "void SoTrackballDragger::dragFinish (void)\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP Called when mouse button is released after picking and interacting with the dragger\&. 
.SS "void SoTrackballDragger::setAllPartsActive (SbBool onoroff)\fC [protected]\fP"
If the input argument is \fCTRUE\fP, all the geometry parts of the dragger will become highligthed, as when active\&.
.PP
Used internally during scaling operations and free-form rotations\&. 
.SS "void SoTrackballDragger::startCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTrackballDragger::motionCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTrackballDragger::finishCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTrackballDragger::metaKeyChangeCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTrackballDragger::fieldSensorCB (void * d, \fBSoSensor\fP * s)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "void SoTrackballDragger::valueChangedCB (void * f, \fBSoDragger\fP * d)\fC [static]\fP, \fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFRotation\fP SoTrackballDragger::rotation"
This field is continuously updated to contain the rotation of the dragger's trackball\&. 
.SS "\fBSoSFVec3f\fP SoTrackballDragger::scaleFactor"
Continuously updated to contain the current vector of scaling along the X, Y and Z axes\&. The three components will always be equal, as this dragger only supports uniform scale operations\&. 
.SS "\fBSoFieldSensor\fP * SoTrackballDragger::rotFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.SS "\fBSoFieldSensor\fP * SoTrackballDragger::scaleFieldSensor\fC [protected]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
