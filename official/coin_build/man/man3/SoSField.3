.TH "SoSField" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoSField \- The \fBSoSField\fP class is the base class for fields which contains only a single value\&.
.PP
All field types which should always contain only a single member value inherits this class\&. \fBSoSField\fP is an abstract class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/fields/SoSField\&.h>\fP
.PP
Inherits \fBSoField\fP\&.
.PP
Inherited by \fBSoSFBool\fP, \fBSoSFBox2d\fP, \fBSoSFBox2f\fP, \fBSoSFBox2i32\fP, \fBSoSFBox2s\fP, \fBSoSFBox3d\fP, \fBSoSFBox3f\fP, \fBSoSFBox3i32\fP, \fBSoSFBox3s\fP, \fBSoSFColor\fP, \fBSoSFColorRGBA\fP, \fBSoSFDouble\fP, \fBSoSFEngine\fP, \fBSoSFEnum\fP, \fBSoSFFloat\fP, \fBSoSFImage\fP, \fBSoSFImage3\fP, \fBSoSFInt32\fP, \fBSoSFMatrix\fP, \fBSoSFName\fP, \fBSoSFNode\fP, \fBSoSFPath\fP, \fBSoSFPlane\fP, \fBSoSFRotation\fP, \fBSoSFShort\fP, \fBSoSFString\fP, \fBSoSFTime\fP, \fBSoSFTrigger\fP, \fBSoSFUInt32\fP, \fBSoSFUShort\fP, \fBSoSFVec2b\fP, \fBSoSFVec2d\fP, \fBSoSFVec2f\fP, \fBSoSFVec2i32\fP, \fBSoSFVec2s\fP, \fBSoSFVec3b\fP, \fBSoSFVec3d\fP, \fBSoSFVec3f\fP, \fBSoSFVec3i32\fP, \fBSoSFVec3s\fP, \fBSoSFVec4b\fP, \fBSoSFVec4d\fP, \fBSoSFVec4f\fP, \fBSoSFVec4i32\fP, \fBSoSFVec4s\fP, \fBSoSFVec4ub\fP, \fBSoSFVec4ui32\fP, and \fBSoSFVec4us\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoSField\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBatexit_cleanup\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSoSField\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoSField\fP class is the base class for fields which contains only a single value\&.
.PP
All field types which should always contain only a single member value inherits this class\&. \fBSoSField\fP is an abstract class\&. 

You use methods setValue() and getValue() to store or fetch the value of single-value fields\&. Example:
.PP
.PP
.nf
SoSpotLight * lightnode = new SoSpotLight;
lightnode->on\&.setValue(TRUE); // The "on" field of SoSpotLight is
                              // a single value field of type SoSFBool\&.
\&.\&.\&.
\&.\&.\&.
// Change lightswitch\&.
if (lightnode->on\&.getValue() == FALSE)
  lightnode->on = TRUE; // We can use operator = instead of setValue()\&.
else
  lightnode->on = FALSE;
\&.\&.\&.
.fi
.PP
.PP
When nodes, engines or other types of field containers are written to file, their single-value fields are written to file in this format:
.PP
.PP
.nf
containerclass {
  fieldname value
  fieldname value
  \&.\&.\&.
}
.fi
.PP
.PP
\&.\&.like this, for instance, a SpotLight node from a scene graph which will be default \fIoff\fP when read back from file:
.PP
.PP
.nf
SpotLight {
  on FALSE
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSoMField\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoSField::~SoSField ()\fC [virtual]\fP"
The \fBSoSField\fP destructor is empty, and is only defined so we could make it virtual\&. 
.SS "SoSField::SoSField (void)\fC [protected]\fP"
The \fBSoSField\fP constructor is protected, as this is an abstract class\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
