.TH "SoSwitch" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoSwitch \- The \fBSoSwitch\fP class is a group node which selects one child subgraph for traversal\&.
.PP
Which child to traverse is controlled by the application programmer by using the \fBSoSwitch::whichChild\fP field\&. In addition to picking out a single child for traversal, it is also possible to flip all children on or off for traversal\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoSwitch\&.h>\fP
.PP
Inherits \fBSoGroup\fP\&.
.PP
Inherited by \fBSoBlinker\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoSwitch\fP (void)"
.br
.ti -1c
.RI "\fBSoSwitch\fP (\fBint\fP numchildren)"
.br
.ti -1c
.RI "virtual SbBool \fBaffectsState\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBhandleEvent\fP (\fBSoHandleEventAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetMatrix\fP (\fBSoGetMatrixAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBsearch\fP (\fBSoSearchAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBwrite\fP (\fBSoWriteAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBaudioRender\fP (\fBSoAudioRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *nl)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFInt32\fP \fBwhichChild\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoSwitch\fP ()"
.br
.ti -1c
.RI "void \fBtraverseChildren\fP (\fBSoAction\fP *action)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoSwitch\fP class is a group node which selects one child subgraph for traversal\&.
.PP
Which child to traverse is controlled by the application programmer by using the \fBSoSwitch::whichChild\fP field\&. In addition to picking out a single child for traversal, it is also possible to flip all children on or off for traversal\&. 

This node is very useful for conditionally turning on or off parts of the scenegraph based on the current application processing mode, visualizing mode, or whatever else the application can do\&.
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
Switch {
    whichChild -1
}

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoSwitch::SoSwitch (void)"
Default constructor\&. 
.SS "SoSwitch::SoSwitch (\fBint\fP numchildren)"
Constructor\&.
.PP
The argument should be the approximate number of children which is expected to be inserted below this node\&. The number need not be exact, as it is only used as a hint for better memory resource allocation\&. 
.SS "SoSwitch::~SoSwitch ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoSwitch::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.PP
Reimplemented in \fBSoBlinker\fP\&.
.SS "const \fBSoFieldData\fP * SoSwitch::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.PP
Reimplemented in \fBSoBlinker\fP\&.
.SS "SbBool SoSwitch::affectsState (void) const\fC [virtual]\fP"
Returns \fCTRUE\fP if the node could have any effect on the state during traversal\&.
.PP
If it returns \fCFALSE\fP, no data in the traversal-state will change from the pre-traversal state to the post-traversal state\&. The \fBSoSeparator\fP node will for instance return \fCFALSE\fP, as it pushes and pops the state before and after traversal of its children\&. All \fBSoShape\fP nodes will also return \fCFALSE\fP, as just pushing out geometry data to the rendering engine won't affect the actual rendering state\&.
.PP
The default method returns \fCTRUE\fP, on a 'better safe than sorry' philosophy\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoSwitch::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::pick (\fBSoPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.PP
Reimplemented in \fBSoBlinker\fP\&.
.SS "void SoSwitch::handleEvent (\fBSoHandleEventAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoHandleEventAction\fP\&.
.PP
Inspects the event data from \fIaction\fP, and processes it if it is something which this node should react to\&.
.PP
Nodes influencing relevant state variables for how event handling is done also overrides this method\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::getMatrix (\fBSoGetMatrixAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoGetMatrixAction\fP\&.
.PP
Updates \fIaction\fP by accumulating with the transformation matrix of this node (if any)\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::search (\fBSoSearchAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoSearchAction\fP\&.
.PP
Compares the search criteria from the \fIaction\fP to see if this node is a match\&. Searching is done by matching up \fIall\fP criteria set up in the \fBSoSearchAction\fP -- if \fIany\fP of the requested criteria is a miss, the search is not deemed successful for the node\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoSearchAction\fP 
.RE
.PP

.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::write (\fBSoWriteAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoWriteAction\fP\&.
.PP
Writes out a node object, and any connected nodes, engines etc, if necessary\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.PP
Reimplemented in \fBSoBlinker\fP\&.
.SS "void SoSwitch::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::audioRender (\fBSoAudioRenderAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoAudioRenderAction\fP\&.
.PP
Does common processing for \fBSoAudioRenderAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoGroup\fP\&.
.SS "void SoSwitch::notify (\fBSoNotList\fP * l)\fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.PP
Reimplemented in \fBSoBlinker\fP\&.
.SS "void SoSwitch::traverseChildren (\fBSoAction\fP * action)\fC [protected]\fP"
This function was part of the original SGI Inventor API, but it is not supported in Coin, as it looks like it should probably have been private in Inventor\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFInt32\fP SoSwitch::whichChild"
Selects which child to traverse during rendering (and some other) actions\&.
.PP
The value should be either \fCSO_SWITCH_NONE\fP (for traversing no children, like it was an empty \fBSoGroup\fP node), \fCSO_SWITCH_ALL\fP (for traversing like if we were an \fBSoGroup\fP node), \fCSO_SWITCH_INHERIT\fP (for traversing the same child as the last \fBSoSwitch\fP node), or an index value for a child\&.
.PP
When using \fCSO_SWITCH_INHERIT\fP, it is important to understand how the SoSwitch-node is affected by other SoSwitch-nodes\&. If you have several switches in the scenegraph, the last switch with its \fCwhichChild\fP field set to anything but \fCSO_SWITCH_INHERIT\fP will be used\&. The switch does not only inherit from its parent switch node, but also from its siblings, located anywhere before it in the scenegraph\&. An example will help clarify this:
.PP
.PP
.nf
#Inventor V2\&.1 ascii

Separator {
  Switch {
    whichChild 0

    Group {
      Switch {
        whichChild 1
        BaseColor { rgb 1 0 0 } # red
        BaseColor { rgb 1 1 0 } # yellow
      }
      Switch {
        whichChild -2 # SO_SWITCH_INHERIT
        BaseColor { rgb 0 1 0 } # green
        BaseColor { rgb 0 0 1 } # blue
      }
      Cube { }
    }
  }
}
.fi
.PP
.PP
This results in a blue cube on the screen\&. The reason being that the value of the previous \fCwhichChild\fP field was inherited by the final switch, making it select child 1 - the blue BaseColor\&.
.PP
When constructing ascii Inventor files, the integer values for the keywords must be used instead of their names\&. They are -1 for \fCSO_SWITCH_NONE\fP, -2 for \fCSO_SWITCH_INHERIT\fP, and -3 for \fCSO_SWITCH_ALL\fP\&.
.PP
Default value for the field is \fCSO_SWITCH_NONE\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
