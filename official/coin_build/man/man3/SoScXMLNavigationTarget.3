.TH "SoScXMLNavigationTarget" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoScXMLNavigationTarget \- base class for navigation system SCXML event target services  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/navigation/SoScXMLNavigationTarget\&.h>\fP
.PP
Inherits \fBScXMLEventTarget\fP\&.
.PP
Inherited by \fBSoScXMLDollyTarget\fP, \fBSoScXMLFlightControlTarget\fP, \fBSoScXMLMiscTarget\fP, \fBSoScXMLMotionTarget\fP, \fBSoScXMLPanTarget\fP, \fBSoScXMLRotateTarget\fP, \fBSoScXMLSeekTarget\fP, \fBSoScXMLSpinTarget\fP, and \fBSoScXMLZoomTarget\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBData\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const =0"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBcleanClass\fP (void)"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef \fBData\fP * \fBNewDataFunc\fP(void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBData\fP * \fBgetSessionData\fP (\fBSbName\fP sessionid, NewDataFunc *constructor)"
.br
.ti -1c
.RI "void \fBfreeSessionData\fP (\fBSbName\fP sessionid)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static \fBSbName\fP \fBgetSessionId\fP (const \fBScXMLEvent\fP *event)"
.br
.ti -1c
.RI "static \fBScXMLStateMachine\fP * \fBgetStateMachine\fP (const \fBScXMLEvent\fP *event, \fBSbName\fP sessionid)"
.br
.ti -1c
.RI "static \fBSoScXMLStateMachine\fP * \fBgetSoStateMachine\fP (const \fBScXMLEvent\fP *event, \fBSbName\fP sessionid)"
.br
.ti -1c
.RI "static \fBSoCamera\fP * \fBgetActiveCamera\fP (const \fBScXMLEvent\fP *event, \fBSbName\fP sessionid)"
.br
.ti -1c
.RI "static SbBool \fBgetEventDouble\fP (const \fBScXMLEvent\fP *event, const char *label, double &dbl_out, SbBool required=TRUE)"
.br
.ti -1c
.RI "static SbBool \fBgetEventString\fP (const \fBScXMLEvent\fP *event, const char *label, \fBSbString\fP &str_out, SbBool required=TRUE)"
.br
.ti -1c
.RI "static SbBool \fBgetEventSbBool\fP (const \fBScXMLEvent\fP *event, const char *label, SbBool &bool_out, SbBool required=TRUE)"
.br
.ti -1c
.RI "static SbBool \fBgetEventSbVec2f\fP (const \fBScXMLEvent\fP *event, const char *label, \fBSbVec2f\fP &vec_out, SbBool required=TRUE)"
.br
.ti -1c
.RI "static SbBool \fBgetEventSbVec3f\fP (const \fBScXMLEvent\fP *event, const char *label, \fBSbVec3f\fP &vec_out, SbBool required=TRUE)"
.br
.ti -1c
.RI "static SbBool \fBgetEventSbRotation\fP (const \fBScXMLEvent\fP *event, const char *label, \fBSbRotation\fP &rot_out, SbBool required=TRUE)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
base class for navigation system SCXML event target services 

This class contains some common, useful, utility functions for implementing navigation system event targets\&.
.PP
\fBSince:\fP
.RS 4
2009-02-14 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual \fBSoType\fP SoScXMLNavigationTarget::getTypeId (void) const\fC [pure virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSoBase::getTypeId() const\fP 
.RE
.PP

.PP
Implements \fBScXMLEventTarget\fP\&.
.PP
Implemented in \fBSoScXMLDollyTarget\fP, \fBSoScXMLZoomTarget\fP, \fBSoScXMLSeekTarget\fP, \fBSoScXMLRotateTarget\fP, \fBSoScXMLPanTarget\fP, \fBSoScXMLSpinTarget\fP, \fBSoScXMLFlightControlTarget\fP, \fBSoScXMLMiscTarget\fP, and \fBSoScXMLMotionTarget\fP\&.
.SS "\fBSoScXMLNavigationTarget::Data\fP * SoScXMLNavigationTarget::getSessionData (\fBSbName\fP sessionid, NewDataFunc * constructor)\fC [protected]\fP"
Returns the Data* base handle for the datastructure that corresponds to the given \fIsessionid\fP\&. The \fIconstructor\fP argument is the function responsible for creating the Data-derived object if the session is new (or have been cleaned up earlier)\&. 
.SS "void SoScXMLNavigationTarget::freeSessionData (\fBSbName\fP sessionid)\fC [protected]\fP"
Cleans out the data structure that is mapped to the given \fIsessionid\fP\&. 
.SS "\fBSbName\fP SoScXMLNavigationTarget::getSessionId (const \fBScXMLEvent\fP * event)\fC [static]\fP, \fC [protected]\fP"
Returns the sessionid that is associated with the \fIevent\fP\&. If no session id is found, \fBSbName::empty()\fP is returned\&. 
.SS "\fBScXMLStateMachine\fP * SoScXMLNavigationTarget::getStateMachine (const \fBScXMLEvent\fP * event, \fBSbName\fP sessionid)\fC [static]\fP, \fC [protected]\fP"
Returns the state machine that is associated with the given sessionid, or NULL if there are no state machines registered for the session id\&. 
.SS "\fBSoScXMLStateMachine\fP * SoScXMLNavigationTarget::getSoStateMachine (const \fBScXMLEvent\fP * event, \fBSbName\fP sessionid)\fC [static]\fP, \fC [protected]\fP"
Returns the So- state machine that is associated with the given sessionid, or NULL if there are no state machines registered for the session id or if the state machine is not of \fBSoScXMLStateMachine\fP type\&. 
.SS "\fBSoCamera\fP * SoScXMLNavigationTarget::getActiveCamera (const \fBScXMLEvent\fP * event, \fBSbName\fP sessionid)\fC [static]\fP, \fC [protected]\fP"
Returns the current active camera, or NULL if there is no active camera set\&. If NULL is returned, error messages has been posted\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventDouble (const \fBScXMLEvent\fP * event, const char * label, double & dbl_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if a double was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventString (const \fBScXMLEvent\fP * event, const char * label, \fBSbString\fP & str_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if a string was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventSbBool (const \fBScXMLEvent\fP * event, const char * label, SbBool & bool_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if a boolean value was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventSbVec2f (const \fBScXMLEvent\fP * event, const char * label, \fBSbVec2f\fP & vec_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if an \fBSbVec2f\fP was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventSbVec3f (const \fBScXMLEvent\fP * event, const char * label, \fBSbVec3f\fP & vec_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if an \fBSbVec3f\fP was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 
.SS "SbBool SoScXMLNavigationTarget::getEventSbRotation (const \fBScXMLEvent\fP * event, const char * label, \fBSbRotation\fP & rot_out, SbBool required = \fCTRUE\fP)\fC [static]\fP, \fC [protected]\fP"
Returns TRUE if an \fBSbRotation\fP was delivered with the event under the label \fIlabel\fP, and FALSE otherwise\&. If \fIrequired\fP is TRUE, then errors will be given, otherwise this function will remain quiet\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
