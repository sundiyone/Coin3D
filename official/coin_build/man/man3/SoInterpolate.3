.TH "SoInterpolate" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoInterpolate \- The \fBSoInterpolate\fP class is the base class for all interpolator engines\&.
.PP
Interpolators are used to linearly interpolate between two values\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/engines/SoInterpolate\&.h>\fP
.PP
Inherits \fBSoEngine\fP\&.
.PP
Inherited by \fBSoInterpolateFloat\fP, \fBSoInterpolateRotation\fP, \fBSoInterpolateVec2f\fP, \fBSoInterpolateVec3f\fP, and \fBSoInterpolateVec4f\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual const \fBSoEngineOutputData\fP * \fBgetOutputData\fP (void) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClasses\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFFloat\fP \fBalpha\fP"
.br
.ti -1c
.RI "\fBSoEngineOutput\fP \fBoutput\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSoInterpolate\fP ()"
.br
.ti -1c
.RI "virtual \fB~SoInterpolate\fP (void)"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetInputDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoEngineOutputData\fP ** \fBgetOutputDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoInterpolate\fP class is the base class for all interpolator engines\&.
.PP
Interpolators are used to linearly interpolate between two values\&. 

In Coin, we've chosen to implement all interpolators in separate files\&. If you want to be OIV compatible when programming, you should include the \fBSoInterpolate\&.h\fP, and not the interpolator file(s) you need\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoInterpolate::SoInterpolate (void)\fC [protected]\fP"
Default constructor\&. 
.SS "SoInterpolate::~SoInterpolate (void)\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoInterpolate::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.PP
Reimplemented in \fBSoInterpolateVec4f\fP, \fBSoInterpolateVec3f\fP, \fBSoInterpolateFloat\fP, \fBSoInterpolateRotation\fP, and \fBSoInterpolateVec2f\fP\&.
.SS "const \fBSoFieldData\fP * SoInterpolate::getFieldData (void) const\fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.PP
Reimplemented in \fBSoInterpolateVec4f\fP, \fBSoInterpolateVec3f\fP, \fBSoInterpolateFloat\fP, \fBSoInterpolateRotation\fP, and \fBSoInterpolateVec2f\fP\&.
.SS "const \fBSoEngineOutputData\fP * SoInterpolate::getOutputData (void) const\fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP 
.PP
Implements \fBSoEngine\fP\&.
.PP
Reimplemented in \fBSoInterpolateVec4f\fP, \fBSoInterpolateVec3f\fP, \fBSoInterpolateFloat\fP, \fBSoInterpolateRotation\fP, and \fBSoInterpolateVec2f\fP\&.
.SS "void SoInterpolate::initClasses (void)\fC [static]\fP"
This method is provided only for API compatibility, and does nothing in Coin\&. 
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFFloat\fP SoInterpolate::alpha"
The value which says how much we've should interpolate from first value to second value\&. A value equal to 0 will give an output equal to the first value, alpha equal to 1 gives the second value, any value in between gives a 'weighted' interpolation between the two values\&. 
.SS "\fBSoEngineOutput\fP SoInterpolate::output"
Interpolated values from the input fields\&. The type of the output will of course be the same as the type of the input fields of each non-abstract subclass inheriting \fBSoInterpolate\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
