.TH "SoIndexedPointSet" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoIndexedPointSet \- The \fBSoIndexedPointSet\fP class is used to display a set of 3D points\&.
.PP
This node either uses the coordinates currently on the state (typically set up by a leading \fBSoCoordinate3\fP node in the scenegraph) or from a \fBSoVertexProperty\fP node attached to this node to render a set of 3D points\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoIndexedPointSet\&.h>\fP
.PP
Inherits \fBSoIndexedShape\fP\&.
.PP
Inherited by \fBSoIndexedMarkerSet\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoIndexedPointSet\fP (void)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBBinding\fP { \fBOVERALL\fP, \fBPER_VERTEX\fP, \fBPER_VERTEX_INDEXED\fP }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoIndexedPointSet\fP ()"
.br
.ti -1c
.RI "virtual void \fBgeneratePrimitives\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *, \fBSoNormalCache\fP *nc)"
.br
.ti -1c
.RI "virtual SbBool \fBgenerateDefaultNormals\fP (\fBSoState\fP *state, \fBSoNormalBundle\fP *bundle)"
.br
.ti -1c
.RI "Binding \fBfindNormalBinding\fP (\fBSoState\fP *const state) const"
.br
.ti -1c
.RI "Binding \fBfindMaterialBinding\fP (\fBSoState\fP *const state) const"
.br
.ti -1c
.RI "Binding \fBfindTextureBinding\fP (\fBSoState\fP *const state) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "SoVertexArrayIndexer * \fBvaindexer\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoIndexedPointSet\fP class is used to display a set of 3D points\&.
.PP
This node either uses the coordinates currently on the state (typically set up by a leading \fBSoCoordinate3\fP node in the scenegraph) or from a \fBSoVertexProperty\fP node attached to this node to render a set of 3D points\&. 

Here's a simple usage example of \fBSoIndexedPointSet\fP in a scenegraph:
.PP
.PP
.nf
#Inventor V2.1 ascii

Separator {
   Material {
      diffuseColor [
       1 0 0, 0 1 0, 0 0 1, 1 1 0, 1 0 1, 1 1 1, 1 0.8 0.6, 0.6 0.8 1
      ]
   }
   MaterialBinding { value PER_VERTEX_INDEXED }

   Normal {
      vector [
       0 0 1, 1 0 0
      ]
   }
   NormalBinding { value PER_VERTEX_INDEXED }

   Coordinate3 {
      point [
       -1 1 0, -1 -1 0, 1 -1 0, 1 1 0, 0 2 -1, -2 0 -1, 0 -2 -1, 2 0 -1
      ]
   }

   DrawStyle { pointSize 5 }

   IndexedPointSet {
      coordIndex [0, 1, 2, 3, 4, 5, 6, 7]
      normalIndex [0, 1, 0, 1, 0, 1, 0, 1]
   }
}.fi
.PP
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
IndexedPointSet {
  vertexProperty        NULL
  coordIndex        0
  materialIndex        -1
  normalIndex        -1
  textureCoordIndex        -1
}

.fi
.PP
.PP
\fBSince:\fP
.RS 4
TGS Inventor 6\&.0, Coin 3\&.1 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoIndexedPointSet::SoIndexedPointSet (void)"
Constructor\&. 
.SS "SoIndexedPointSet::~SoIndexedPointSet ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoIndexedPointSet::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoIndexedShape\fP\&.
.PP
Reimplemented in \fBSoIndexedMarkerSet\fP\&.
.SS "const \fBSoFieldData\fP * SoIndexedPointSet::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoIndexedShape\fP\&.
.PP
Reimplemented in \fBSoIndexedMarkerSet\fP\&.
.SS "void SoIndexedPointSet::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.PP
Reimplemented in \fBSoIndexedMarkerSet\fP\&.
.SS "void SoIndexedPointSet::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.SS "void SoIndexedPointSet::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoShape\fP\&.
.SS "void SoIndexedPointSet::notify (\fBSoNotList\fP * l)\fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoVertexShape\fP\&.
.SS "void SoIndexedPointSet::generatePrimitives (\fBSoAction\fP * action)\fC [protected]\fP, \fC [virtual]\fP"
The method implements action behavior for shape nodes for \fBSoCallbackAction\fP\&. It is invoked from \fBSoShape::callback()\fP\&. (Subclasses should \fInot\fP override \fBSoNode::callback()\fP\&.)
.PP
The subclass implementations uses the convenience methods \fBSoShape::beginShape()\fP, \fBSoShape::shapeVertex()\fP, and \fBSoShape::endShape()\fP, with \fBSoDetail\fP instances, to pass the primitives making up the shape back to the caller\&. 
.PP
Implements \fBSoShape\fP\&.
.SS "SbBool SoIndexedPointSet::generateDefaultNormals (\fBSoState\fP * state, \fBSoNormalCache\fP * cache)\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalCache\fP class\&. This is more effective than using \fBSoNormalGenerator\fP\&. Return \fCTRUE\fP if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method just returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVertexShape\fP\&.
.SS "SbBool SoIndexedPointSet::generateDefaultNormals (\fBSoState\fP * state, \fBSoNormalBundle\fP * bundle)\fC [protected]\fP, \fC [virtual]\fP"
\fIThis API member is considered internal to the library, as it is not likely to be of interest to the application programmer\&.\fP
.PP
Subclasses should override this method to generate default normals using the \fBSoNormalBundle\fP class\&. \fCTRUE\fP should be returned if normals were generated, \fCFALSE\fP otherwise\&.
.PP
Default method returns \fCFALSE\fP\&.
.PP
This function is an extension for Coin, and it is not available in the original SGI Open Inventor v2\&.1 API\&. 
.PP
Reimplemented from \fBSoVertexShape\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
