.TH "SoVRMLShape" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoVRMLShape \- The \fBSoVRMLShape\fP class holds geometry and geometry appearance nodes\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/VRMLnodes/SoVRMLShape\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCacheEnabled\fP { \fBOFF\fP, \fBON\fP, \fBAUTO\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual SbBool \fBaffectsState\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetBoundingBox\fP (\fBSoGetBoundingBoxAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBrayPick\fP (\fBSoRayPickAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBsearch\fP (\fBSoSearchAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBwrite\fP (\fBSoWriteAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBgetPrimitiveCount\fP (\fBSoGetPrimitiveCountAction\fP *action)"
.br
.ti -1c
.RI "virtual \fBSoChildList\fP * \fBgetChildren\fP (void) const"
.br
.ti -1c
.RI "virtual void \fBnotify\fP (\fBSoNotList\fP *list)"
.br
.ti -1c
.RI "virtual void \fBcopyContents\fP (const \fBSoFieldContainer\fP *from, SbBool copyConn)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.ti -1c
.RI "static void \fBsetNumRenderCaches\fP (\fBint\fP num)"
.br
.ti -1c
.RI "static \fBint\fP \fBgetNumRenderCaches\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBappearance\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBgeometry\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBrenderCaching\fP"
.br
.ti -1c
.RI "\fBSoSFEnum\fP \fBboundingBoxCaching\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoVRMLShape\fP class holds geometry and geometry appearance nodes\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP 


.PP
.nf
Shape {
  exposedField SFNode appearance NULL
  exposedField SFNode geometry   NULL
}

.fi
.PP
.PP
The Shape node has two fields, \fIappearance\fP and \fIgeometry\fP, which are used to create rendered objects in the world\&. The \fIappearance\fP field contains an \fBSoVRMLAppearance\fP node that specifies the visual attributes (e\&.g\&., material and texture) to be applied to the geometry\&. The geometry field contains a geometry node\&. The specified geometry node is rendered with the specified appearance nodes applied\&. See 4\&.6\&.3, Shapes and geometry (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.6.3), and \fBSoVRMLAppearance\fP, for more information\&.
.PP
4\&.14, Lighting model (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.14), contains details of the VRML lighting model and the interaction between Appearance nodes and geometry nodes\&. If the geometry field is NULL, the object is not drawn\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBSoVRMLShape::CacheEnabled\fP"
Used to enumerate cache strategies\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIOFF \fP\fP
Never cache 
.TP
\fB\fION \fP\fP
Always cache 
.TP
\fB\fIAUTO \fP\fP
Use heuristics to try to figure out the optimal caching policy\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoVRMLShape::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoVRMLShape::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "SbBool SoVRMLShape::affectsState (void) const\fC [virtual]\fP"
Returns \fCTRUE\fP if the node could have any effect on the state during traversal\&.
.PP
If it returns \fCFALSE\fP, no data in the traversal-state will change from the pre-traversal state to the post-traversal state\&. The \fBSoSeparator\fP node will for instance return \fCFALSE\fP, as it pushes and pops the state before and after traversal of its children\&. All \fBSoShape\fP nodes will also return \fCFALSE\fP, as just pushing out geometry data to the rendering engine won't affect the actual rendering state\&.
.PP
The default method returns \fCTRUE\fP, on a 'better safe than sorry' philosophy\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::getBoundingBox (\fBSoGetBoundingBoxAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetBoundingBoxAction\fP\&.
.PP
Calculates bounding box and center coordinates for node and modifies the values of the \fIaction\fP to encompass the bounding box for this node and to shift the center point for the scene more towards the one for this node\&.
.PP
Nodes influencing how geometry nodes calculates their bounding box also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::rayPick (\fBSoRayPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoRayPickAction\fP\&.
.PP
Checks the ray specification of the \fIaction\fP and tests for intersection with the data of the node\&.
.PP
Nodes influencing relevant state variables for how picking is done also overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::search (\fBSoSearchAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoSearchAction\fP\&.
.PP
Compares the search criteria from the \fIaction\fP to see if this node is a match\&. Searching is done by matching up \fIall\fP criteria set up in the \fBSoSearchAction\fP -- if \fIany\fP of the requested criteria is a miss, the search is not deemed successful for the node\&.
.PP
\fBSee also:\fP
.RS 4
\fBSoSearchAction\fP 
.RE
.PP

.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::write (\fBSoWriteAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoWriteAction\fP\&.
.PP
Writes out a node object, and any connected nodes, engines etc, if necessary\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::getPrimitiveCount (\fBSoGetPrimitiveCountAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGetPrimitiveCountAction\fP\&.
.PP
Calculates the number of triangle, line segment and point primitives for the node and adds these to the counters of the \fIaction\fP\&.
.PP
Nodes influencing how geometry nodes calculates their primitive count also overrides this method to change the relevant state variables\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "\fBSoChildList\fP * SoVRMLShape::getChildren (void) const\fC [virtual]\fP"
Returns list of children for this node\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::notify (\fBSoNotList\fP * l)\fC [virtual]\fP"
Notifies all auditors for this instance when changes are made\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLShape::copyContents (const \fBSoFieldContainer\fP * from, SbBool copyconnections)\fC [virtual]\fP"
Makes a deep copy of all data of \fIfrom\fP into this instance, \fIexcept\fP external scenegraph references if \fIcopyconnections\fP is \fCFALSE\fP\&.
.PP
This is the method that should be overridden by extension node / engine / dragger / whatever subclasses which needs to account for internal data that are not handled automatically\&.
.PP
For copying nodes from application code, you should not invoke this function directly, but rather call the \fBSoNode::copy()\fP function:
.PP
.PP
.nf
SoNode * mynewnode = templatenode->copy();
.fi
.PP
.PP
The same also goes for engines\&.
.PP
Make sure that when you override the \fBcopyContents()\fP method in your extension class that you also make it call upwards to it's parent superclass in the inheritance hierarchy, as \fBcopyContents()\fP in for instance \fBSoNode\fP and \fBSoFieldContainer\fP does important work\&. It should go something like this:
.PP
.PP
.nf
void
MyCoinExtensionNode::copyContents(const SoFieldContainer * from,
                                  SbBool copyconnections)
{
  // let parent superclasses do their thing (copy fields, copy
  // instance name, etc etc)
  SoNode::copyContents(from, copyconnections);

  // [\&.\&.then copy internal data\&.\&.]
}
.fi
.PP
 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFNode\fP SoVRMLShape::appearance"
Can store an \fBSoVRMLAppearance\fP node, or NULL\&. 
.SS "\fBSoSFNode\fP SoVRMLShape::geometry"
Can store any \fBSoVRMLGeometry\fP subclass, or NULL\&. 
.SS "\fBSoSFEnum\fP SoVRMLShape::renderCaching"
Render caching strategy\&. Default value is AUTO\&. 
.SS "\fBSoSFEnum\fP SoVRMLShape::boundingBoxCaching"
Bounding box caching strategy\&. Default value is AUTO\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
