.TH "SoVRMLMaterial" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoVRMLMaterial \- The \fBSoVRMLMaterial\fP class is used to assign a material to geometry\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/VRMLnodes/SoVRMLMaterial\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoVRMLMaterial\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFColor\fP \fBdiffuseColor\fP"
.br
.ti -1c
.RI "\fBSoSFFloat\fP \fBambientIntensity\fP"
.br
.ti -1c
.RI "\fBSoSFColor\fP \fBspecularColor\fP"
.br
.ti -1c
.RI "\fBSoSFColor\fP \fBemissiveColor\fP"
.br
.ti -1c
.RI "\fBSoSFFloat\fP \fBshininess\fP"
.br
.ti -1c
.RI "\fBSoSFFloat\fP \fBtransparency\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoVRMLMaterial\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoVRMLMaterial\fP class is used to assign a material to geometry\&.
.PP
\fBThe detailed class documentation is taken verbatim from the VRML97 standard (ISO/IEC 14772-1:1997)\&. It is copyright The Web3D Consortium, and is used by permission of the Consortium:\fP 


.PP
.nf
Material {
  exposedField SFFloat ambientIntensity  0.2         # [0,1]
  exposedField SFColor diffuseColor      0.8 0.8 0.8 # [0,1]
  exposedField SFColor emissiveColor     0 0 0       # [0,1]
  exposedField SFFloat shininess         0.2         # [0,1]
  exposedField SFColor specularColor     0 0 0       # [0,1]
  exposedField SFFloat transparency      0           # [0,1]
}

.fi
.PP
.PP
The Material node specifies surface material properties for associated geometry nodes and is used by the VRML lighting equations during rendering\&. Subclause 4\&.14, Lighting model (http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/concepts.html#4.14), contains a detailed description of the VRML lighting model equations\&. All of the fields in the Material node range from 0\&.0 to 1\&.0\&. The fields in the Material node determine how light reflects off an object to create colour:
.PP
.IP "\(bu" 2
The ambientIntensity field specifies how much ambient light from light sources this surface shall reflect\&. Ambient light is omnidirectional and depends only on the number of light sources, not their positions with respect to the surface\&. Ambient colour is calculated as ambientIntensity × diffuseColor\&.
.IP "\(bu" 2
The diffuseColor field reflects all VRML light sources depending on the angle of the surface with respect to the light source\&. The more directly the surface faces the light, the more diffuse light reflects\&.
.IP "\(bu" 2
The emissiveColor field models 'glowing' objects\&. This can be useful for displaying pre-lit models (where the light energy of the room is computed explicitly), or for displaying scientific data\&.
.IP "\(bu" 2
The specularColor and shininess fields determine the specular highlights (e\&.g\&., the shiny spots on an apple)\&. When the angle from the light to the surface is close to the angle from the surface to the viewer, the specularColor is added to the diffuse and ambient colour calculations\&. Lower shininess values produce soft glows, while higher values result in sharper, smaller highlights\&.
.IP "\(bu" 2
The transparency field specifies how 'clear' an object is, with 1\&.0 being completely transparent, and 0\&.0 completely opaque\&. 
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoVRMLMaterial::SoVRMLMaterial (void)"
Constructor\&. 
.SS "SoVRMLMaterial::~SoVRMLMaterial ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoVRMLMaterial::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.SS "const \fBSoFieldData\fP * SoVRMLMaterial::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.SS "void SoVRMLMaterial::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLMaterial::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SS "void SoVRMLMaterial::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFColor\fP SoVRMLMaterial::diffuseColor"
The diffuse color component\&. Default value is (0\&.8, 0\&.8, 0\&.8)\&. 
.SS "\fBSoSFFloat\fP SoVRMLMaterial::ambientIntensity"
The ambient intensity\&. Default value is 0\&.2\&. 
.SS "\fBSoSFColor\fP SoVRMLMaterial::specularColor"
The specular color component\&. Default value is (0, 0, 0)\&. 
.SS "\fBSoSFColor\fP SoVRMLMaterial::emissiveColor"
The emissive color component\&. Default value is (0, 0, 0)\&. 
.SS "\fBSoSFFloat\fP SoVRMLMaterial::shininess"
The shininess value\&. A number between 0 and 1\&. Default value is 0\&.2\&. 
.SS "\fBSoSFFloat\fP SoVRMLMaterial::transparency"
The material transparency\&. Valid range is from 0\&.0 (completely opaque) to 1\&.0 (completely transparent)\&. Default value is 0\&.0\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
