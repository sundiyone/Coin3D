.TH "sched.h" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sched.h
.SH SYNOPSIS
.br
.PP
\fC#include <Inventor/C/basic\&.h>\fP
.br
\fC#include <Inventor/C/threads/common\&.h>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void \fBcc_sched_f\fP(void *closure)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcc_sched\fP * \fBcc_sched_construct\fP (\fBint\fP numthreads)"
.br
.ti -1c
.RI "void \fBcc_sched_destruct\fP (\fBcc_sched\fP *sched)"
.br
.ti -1c
.RI "void \fBcc_sched_set_num_threads\fP (\fBcc_sched\fP *sched, \fBint\fP num)"
.br
.ti -1c
.RI "\fBint\fP \fBcc_sched_get_num_threads\fP (\fBcc_sched\fP *sched)"
.br
.ti -1c
.RI "uint32_t \fBcc_sched_schedule\fP (\fBcc_sched\fP *sched, \fBcc_sched_f\fP *workfunc, void *closure, float priority)"
.br
.ti -1c
.RI "SbBool \fBcc_sched_unschedule\fP (\fBcc_sched\fP *sched, uint32_t schedid)"
.br
.ti -1c
.RI "void \fBcc_sched_wait_all\fP (\fBcc_sched\fP *sched)"
.br
.ti -1c
.RI "\fBint\fP \fBcc_sched_get_num_remaining\fP (\fBcc_sched\fP *sched)"
.br
.ti -1c
.RI "void \fBcc_sched_set_num_allowed\fP (\fBcc_sched\fP *sched, \fBint\fP num)"
.br
.ti -1c
.RI "void \fBcc_sched_change_priority\fP (\fBcc_sched\fP *sched, uint32_t schedid, float priority)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "void cc_sched_f"
The type definition for the work function called when a thread becomes available\&. 
.SH "Function Documentation"
.PP 
.SS "\fBcc_sched\fP* cc_sched_construct (\fBint\fP numthreads)"
Construct a scheduler that uses \fInumthreads\fP threads\&. 
.SS "void cc_sched_destruct (\fBcc_sched\fP * sched)"
Destruct the scheduler\&.
.PP
This method will block until all currently executing jobs have finished\&. Any remaining scheduled jobs will be cancelled\&.
.PP
Note that this differs from Coin-2\&. To emulate Coin-2 behavior, call \fBcc_sched_wait_all()\fP before calling this method\&. 
.SS "void cc_sched_set_num_threads (\fBcc_sched\fP * sched, \fBint\fP num)"
Set/change the number of threads used by the scheduler\&. 
.SS "\fBint\fP cc_sched_get_num_threads (\fBcc_sched\fP * sched)"
Returns the number of threads used by the scheduler\&. 
.SS "uint32_t cc_sched_schedule (\fBcc_sched\fP * sched, \fBcc_sched_f\fP * workfunc, void * closure, float priority)"
Schedule a new job\&. A thread calls \fIworkfunc\fP with the \fIclosure\fP argument when a thread becomes available\&. larger \fIpriority\fP values will be scheduled first\&.
.PP
Returns a schedid that can be used to unschedule the job\&. schedid is guaranteed to be != 0\&.
.PP
Note that jobs are automatically unscheduled when triggered, just before calling the work function\&. 
.SS "SbBool cc_sched_unschedule (\fBcc_sched\fP * sched, uint32_t schedid)"
Attempt to unschedule a job\&. \fIschedid\fP must be an id returned from \fBcc_sched_schedule()\fP\&.
.PP
Note that jobs are automatically unscheduled when triggered, just before calling the work function\&.
.PP
Returns TRUE if job was successfully removed, FALSE if job wasn't found in the internal dict\&. 
.SS "void cc_sched_wait_all (\fBcc_sched\fP * sched)"
Wait for all scheduled jobs to finish\&. 
.SS "\fBint\fP cc_sched_get_num_remaining (\fBcc_sched\fP * sched)"
Returns the number of remaining scheduled jobs, not counting jobs that are currently being executed (i\&.e\&. are in their workfuncs)\&. 
.SS "void cc_sched_set_num_allowed (\fBcc_sched\fP * sched, \fBint\fP num)"
Sets the number of allowed jobs per 'batch'\&. The scheduler will execute at max the \fInum\fP jobs\&. To continue executing jobs, call this function again\&. This is typically done to limit the number of I/O or CPU intensive jobs to a few per frame to avoid starving the main thread\&.
.PP
If \fInum\fP is -1 (the default), the number of jobs per batch is not limited\&. 
.SS "void cc_sched_change_priority (\fBcc_sched\fP * sched, uint32_t schedid, float priority)"
Changes the priority of the given scheduled item\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
