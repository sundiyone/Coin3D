.TH "SoClipPlane" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoClipPlane \- The \fBSoClipPlane\fP class is a node type for specifying clipping planes\&.
.PP
A scene graph \fIwithout\fP any \fBSoClipPlane\fP nodes uses six clipping planes to define the viewing frustum: top, bottom, left, right, near and far\&. If you want extra clipping planes for 'slicing' the visible geometry, you can do that by using nodes of this type\&. Geometry on the back side of the clipping plane is clipped away\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodes/SoClipPlane\&.h>\fP
.PP
Inherits \fBSoNode\fP\&.
.PP
Inherited by \fBSoClipPlaneManip\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "\fBSoClipPlane\fP (void)"
.br
.ti -1c
.RI "virtual void \fBdoAction\fP (\fBSoAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBGLRender\fP (\fBSoGLRenderAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBcallback\fP (\fBSoCallbackAction\fP *action)"
.br
.ti -1c
.RI "virtual void \fBpick\fP (\fBSoPickAction\fP *action)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFPlane\fP \fBplane\fP"
.br
.ti -1c
.RI "\fBSoSFBool\fP \fBon\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoClipPlane\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoClipPlane\fP class is a node type for specifying clipping planes\&.
.PP
A scene graph \fIwithout\fP any \fBSoClipPlane\fP nodes uses six clipping planes to define the viewing frustum: top, bottom, left, right, near and far\&. If you want extra clipping planes for 'slicing' the visible geometry, you can do that by using nodes of this type\&. Geometry on the back side of the clipping plane is clipped away\&. 

Note that OpenGL implementations have a fixed maximum number of clipping planes available\&. To find out what this number is, you can use the following code:
.PP
.PP
.nf
#include <Inventor/elements/SoGLClipPlaneElement\&.h>
// \&.\&.\&.[snip]\&.\&.\&.
int maxplanes = SoGLClipPlaneElement::getMaxGLPlanes();
.fi
.PP
.PP
Below is a simple, basic scene graph usage example of \fBSoClipPlane\fP\&. It connects an \fBSoClipPlane\fP to an \fBSoCenterballDragger\fP, for end-user control over the orientation and position of the clipping plane:
.PP
.PP
.nf
#Inventor V2.1 ascii

Separator {
   Separator {
      Translation { translation -6 0 0 }
      DEF cbdragger CenterballDragger { }
   }

   TransformSeparator {
      Transform {
         rotation 0 0 1 0 = USE cbdragger . rotation
         translation 0 0 0 = USE cbdragger . center
      }
      ClipPlane { }
   }

   Sphere { }
}
.fi
.PP
.PP
Note that \fBSoClipPlane\fP is a state-changing appearance node, and as such, it will only assert its effects under the current \fBSoSeparator\fP node (as the \fBSoSeparator\fP pops the state stack when traversal returns above it), as can be witnessed by loading this simple example file into a Coin viewer:
.PP
.PP
.nf
#Inventor V2.1 ascii

Separator {
   ClipPlane { }
   Cube { }
}

Separator {
   Translation { translation -3 0 0 }
   Cube { }
}
.fi
.PP
.PP
\fBFILE FORMAT/DEFAULTS:\fP 
.PP
.nf
ClipPlane {
    plane 1 0 0  0
    on TRUE
}

.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoClipPlane::SoClipPlane (void)"
Constructor\&. 
.SS "SoClipPlane::~SoClipPlane ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoClipPlane::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Implements \fBSoBase\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SS "const \fBSoFieldData\fP * SoClipPlane::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoFieldContainer\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SS "void SoClipPlane::doAction (\fBSoAction\fP * action)\fC [virtual]\fP"
This function performs the typical operation of a node for any action\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SS "void SoClipPlane::GLRender (\fBSoGLRenderAction\fP * action)\fC [virtual]\fP"
Action method for the \fBSoGLRenderAction\fP\&.
.PP
This is called during rendering traversals\&. Nodes influencing the rendering state in any way or who wants to throw geometry primitives at OpenGL overrides this method\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SS "void SoClipPlane::callback (\fBSoCallbackAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoCallbackAction\fP\&.
.PP
Simply updates the state according to how the node behaves for the render action, so the application programmer can use the \fBSoCallbackAction\fP for extracting information about the scene graph\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SS "void SoClipPlane::pick (\fBSoPickAction\fP * action)\fC [virtual]\fP"
Action method for \fBSoPickAction\fP\&.
.PP
Does common processing for \fBSoPickAction\fP \fIaction\fP instances\&. 
.PP
Reimplemented from \fBSoNode\fP\&.
.PP
Reimplemented in \fBSoClipPlaneManip\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBSoSFPlane\fP SoClipPlane::plane"
Definition of clipping plane\&. Geometry on the back side of the clipping plane is clipped away\&.
.PP
The default clipping plane has it's normal pointing in the <1,0,0> direction, and intersects origo\&. (I\&.e\&., everything along the negative X axis is clipped\&.) 
.SS "\fBSoSFBool\fP SoClipPlane::on"
Whether clipping plane should be on or off\&. Defaults to \fCTRUE\fP\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
