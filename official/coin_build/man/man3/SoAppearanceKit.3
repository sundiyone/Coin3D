.TH "SoAppearanceKit" 3 "Sun May 28 2017" "Version 4.0.0a" "Coin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoAppearanceKit \- The \fBSoAppearanceKit\fP class is a node kit catalog that collects miscellaneous appearance node types\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix):  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Inventor/nodekits/SoAppearanceKit\&.h>\fP
.PP
Inherits \fBSoBaseKit\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBSoType\fP \fBgetTypeId\fP (void) const"
.br
.RI "Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. "
.ti -1c
.RI "virtual const \fBSoNodekitCatalog\fP * \fBgetNodekitCatalog\fP (void) const"
.br
.ti -1c
.RI "\fBSoAppearanceKit\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBSoType\fP \fBgetClassTypeId\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP * \fBgetClassNodekitCatalog\fP (void)"
.br
.ti -1c
.RI "static void \fBinitClass\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual const \fBSoFieldData\fP * \fBgetFieldData\fP (void) const"
.br
.ti -1c
.RI "virtual \fB~SoAppearanceKit\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static const \fBSoFieldData\fP ** \fBgetFieldDataPtr\fP (void)"
.br
.ti -1c
.RI "static const \fBSoNodekitCatalog\fP ** \fBgetClassNodekitCatalogPtr\fP (void)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSoSFNode\fP \fBcomplexity\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBdrawStyle\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBenvironment\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBfont\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBlightModel\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBmaterial\fP"
.br
.ti -1c
.RI "\fBSoSFNode\fP \fBtexture2\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBSoAppearanceKit\fP class is a node kit catalog that collects miscellaneous appearance node types\&.
.PP
Node kit structure (new entries versus parent class marked with arrow prefix): 


.PP
.nf
CLASS SoAppearanceKit
-->"this"
      "callbackList"
-->   "lightModel"
-->   "environment"
-->   "drawStyle"
-->   "material"
-->   "complexity"
-->   "texture2"
-->   "font"

.fi
.PP
.PP
(See \fBSoBaseKit::printDiagram()\fP for information about the output formatting\&.)
.PP
Detailed information on catalog parts:
.PP
.PP
.nf
CLASS SoAppearanceKit
PVT   "this",  SoAppearanceKit  --- 
      "callbackList",  SoNodeKitListPart [ SoCallback, SoEventCallback ] 
      "lightModel",  SoLightModel  --- 
      "environment",  SoEnvironment  --- 
      "drawStyle",  SoDrawStyle  --- 
      "material",  SoMaterial  --- 
      "complexity",  SoComplexity  --- 
      "texture2",  SoTexture2  --- 
      "font",  SoFont  --- 
.fi
.PP
.PP
(See \fBSoBaseKit::printTable()\fP for information about the output formatting\&.) 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SoAppearanceKit::SoAppearanceKit (void)"
Constructor\&. 
.SS "SoAppearanceKit::~SoAppearanceKit ()\fC [protected]\fP, \fC [virtual]\fP"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSoType\fP SoAppearanceKit::getTypeId (void) const\fC [virtual]\fP"

.PP
Returns the type identification of an object derived from a class inheriting \fBSoBase\fP\&. This is used for run-time type checking and 'downward' casting\&. Usage example:
.PP
.PP
.nf
void foo(SoNode * node)
{
  if (node->getTypeId() == SoFile::getClassTypeId()) {
    SoFile * filenode = (SoFile *)node;  // safe downward cast, knows the type
  }
}
.fi
.PP
.PP
For application programmers wanting to extend the library with new nodes, engines, nodekits, draggers or others: this method needs to be overridden in \fIall\fP subclasses\&. This is typically done as part of setting up the full type system for extension classes, which is usually accomplished by using the pre-defined macros available through for instance \fBInventor/nodes/SoSubNode\&.h\fP (SO_NODE_INIT_CLASS and SO_NODE_CONSTRUCTOR for node classes), \fBInventor/engines/SoSubEngine\&.h\fP (for engine classes) and so on\&.
.PP
For more information on writing Coin extensions, see the class documentation of the toplevel superclasses for the various class groups\&. 
.PP
Reimplemented from \fBSoBaseKit\fP\&.
.SS "const \fBSoFieldData\fP * SoAppearanceKit::getFieldData (void) const\fC [protected]\fP, \fC [virtual]\fP"
Returns a pointer to the class-wide field data storage object for this instance\&. If no fields are present, returns \fCNULL\fP\&. 
.PP
Reimplemented from \fBSoBaseKit\fP\&.
.SS "const \fBSoNodekitCatalog\fP * SoAppearanceKit::getNodekitCatalog (void) const\fC [virtual]\fP"
Returns the nodekit catalog which defines the layout of this class' kit\&. 
.PP
Reimplemented from \fBSoBaseKit\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Coin from the source code\&.
