// @configure_input@

/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#ifndef SO@GUI@_INTERNAL
#error this is a private header file
#endif // !SO@GUI@_INTERNAL

#include <Inventor/SbString.h>
#include <Inventor/errors/SoDebugError.h>
#include <stdio.h>

#include <Inventor/@Gui@/engines/SoGuiFormat.h>

void
SoGuiFormat::initClass(void)
{
  SO_ENGINE_INIT_CLASS(SoGuiFormat, SoEngine, "Engine");
}

SO_ENGINE_SOURCE(SoGuiFormat);

SoGuiFormat::SoGuiFormat(void)
{
  this->internals = NULL;

  SO_ENGINE_CONSTRUCTOR(SoGuiFormat);

  SO_ENGINE_ADD_INPUT(float1, (0.0f));
  SO_ENGINE_ADD_INPUT(format, (""));

  SO_ENGINE_ADD_OUTPUT(output, SoSFString);
}

SoGuiFormat::~SoGuiFormat(void)
{
}

void
SoGuiFormat::evaluate(void)
{
#ifdef __COIN__
  SbString result;
  result.sprintf(this->format.getValue().getString(), this->float1.getValue());
#else // __COIN__
  char buf[4096]; // FIXME: temporary workaround
  sprintf(buf, this->format.getValue().getString(), this->float1.getValue());
  SbString result = buf;
#endif // ! __COIN__
 
  // SoDebugError::postInfo("SoGuiFormat::evaluate", "%s", result.getString());
  SO_ENGINE_OUTPUT(output, SoSFString, setValue(result));
}

